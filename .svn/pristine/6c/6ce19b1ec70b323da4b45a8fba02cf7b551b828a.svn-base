# !/usr/bin/python
# -*-coding:utf-8 -*
"""
测试内容:指定池创建逻辑卷

步骤:
1）配置访问区，创建存储池pool1，pool2，pool3
2）创建逻辑卷属性默认，选择pool2存储池，创建逻辑卷LUN1；
3）提交后创建成功

检查项:
1）存储池创建成功
2）逻辑卷创建成功，逻辑卷列表中可查看到该逻辑卷
"""
import os, sys
import time
import utils_path
import Lun_managerTest
import common
import log
import get_config
import login
import decorator_func
from get_config import config_parser as cp
import env_manage_lun_manage
import random


def setup():
    global osan
    global client_ips
    global deploy_ips
    conf_file = Lun_managerTest.CONF_FILE  # 配置文件路径
    file_name = os.path.basename(__file__)
    file_name = file_name[:-3]  # 获取本脚本名，去掉.py后缀
    log_file_path = log.get_log_path(file_name)  # 获取日志目录，即test_cases/Log/Case_log
    log.init(log_file_path, True)  # 初始化日志文件

    deploy_ips = get_config.get_env_ip_info(conf_file)  # 获取集群IP列表
    client_ips = get_config.get_allclient_ip()  # 获取客户端IP

    osan = Lun_managerTest.oSan()


def case(**kwargs):
    a=random.randint(1,10000)
    lun_id = osan.create_lun(s_ip=deploy_ips[0], total_bytes='102400000', lun_type="THIN",
                             lun_name='LUN{}'.format(a),
                             stor_pool_id=3, acc_zone_id=1,stripe_width=kwargs["stripe_width"])
    log.info(lun_id)
    decorator_func.judge_target(
        osan.get_option_single(s_ip=deploy_ips[0], command="get_luns", indexname="luns"
                               , argv2="name", ids="ids", argv1=lun_id),
        'LUN{}'.format(a))

    result = (osan.get_option_single(s_ip=deploy_ips[0], command="get_luns", indexname="luns"
                                     , argv2="layout", ids="ids", argv1=lun_id))['stripe_width']
    log.info(result)
    decorator_func.judge_target(
        result,
        kwargs["stripe_width"])

#@decorator_func.tasklet(int(env_manage.cp('timeout', 'second')), maxretry=int(env_manage.cp('timeout', 'maxretry')))
def main():
    setup()  # 初始化环境
    env_manage_lun_manage.clean()
    case(stripe_width=1)
    case(stripe_width=2)
    case(stripe_width=3)
    case(stripe_width=4)
    case(stripe_width=5)
    case(stripe_width=6)
    case(stripe_width=7)
    case(stripe_width=8)
    common.ckeck_system()  # 检查系统状态


if __name__ == '__main__':
    main()