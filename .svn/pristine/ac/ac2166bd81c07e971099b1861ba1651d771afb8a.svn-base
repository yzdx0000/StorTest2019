#!/usr/bin/python
# -*- coding:utf-8 -*-
#**********************************************
#实现功能：recovery_oOms_logger用于杀几次oOms进程，待其恢复后退出；recovery_oOss_logger用于杀指定次数的oOss进程，待其恢复后退出；recovery_postgres_logger用于杀指定次数的postgres进程，待其恢复后退出
#所需参数：recovery_oOms_logger参数oomsip，recovery_oOss_logger需要oomsip和oossip,recovery_postgres_logger需要修改参数oomsip
#作者：刘萍
#创建时间：2018/01/12
#**********************************************
import os
import commands
import threading
import time
import _readconffile_lp
import commonfunction_lp
import getoutputpath_lp
import _log_lp

def recovery_oOms_logger(oomsip,logger):
    n=0
    while(n<5):
	cmd1="ssh "+oomsip+" \"ps aux |grep /cliparastor/oms/oOms |grep -v grep"+"| wc -l"+"\""
	(status1,result1)=commands.getstatusoutput(cmd1)
	if(result1=='1'):
	    (status,out)=commands.getstatusoutput("ssh "+oomsip+" \"killall -9 oOms"+"\"")
	    logger.info("ssh "+oomsip+" killall -9 oOms")
	    if(status==0):
		logger.info("the count of kill oOms is %d" % (n+1))
		n+=1
#判断oOms有没有正常
    while True:
        time.sleep(20)
        mgrid=os.popen("ssh "+oomsip+" \"parastor_sysctl getip|grep MGR|grep "+oomsip+"|cut -d '#' -f2|cut -d ':' -f2"+"\"").read()
	cmd="ssh "+oomsip+" \"parastor_monitor checkstat nodetype=oOms nodeid="+mgrid.strip()+"|cut -d ':' -f4"+"\""
	oomsstat=os.popen(cmd).read()
	if(oomsstat.strip()=='ok'):
	    break
	else:
	    time.sleep(10)
			
def recovery_oOss_logger(oomsip,oossip,logger):
    n=0
    while(n<2):
	cmd2="ssh "+oossip+" \"ps aux |grep /cliparastor/oss/oOss |grep -v grep"+"| wc -l"+"\""
	(status2,result2)=commands.getstatusoutput(cmd2)
        if(result2=='1'):
            (status,out)=commands.getstatusoutput("ssh "+oossip+" \"killall -9 oOss"+"\"")
	    logger.info("ssh "+oossip+" killall -9 oOss")
            if(status==0):
	        logger.info("the count of kill oOss is %d" % (n+1))
		n+=1
#判断oOss进程有没有正常
    while True:
        time.sleep(60)
	dsid=os.popen("ssh "+oomsip+" \"parastor_sysctl getip|grep "+oossip+"|cut -d '#' -f2|cut -d ':' -f2"+"\"").read()
        nodeid=int(dsid)+2
        oossstat=os.popen("ssh "+oomsip+" \"parastor_monitor checkstat nodetype=oOss nodeid="+str(nodeid)+"|cut -d ':' -f4"+"\"").read()
	if(oossstat.strip()=='ok'):
	    break
	else:
	    time.sleep(30)
def recovery_postgres_logger(oomsip,oossip,logger):
    n=0
    while(n<5):
	cmd3="ssh "+oomsip+" \"ps aux|grep /mnt/parastor/.ps_hidden/pos/postgres/bin/postgres|grep -v grep|wc -l"+"\""
	(status3,result3)=commands.getstatusoutput(cmd3)
	if(result3=='1'):
	    (status,out)=commands.getstatusoutput("ssh "+oomsip+" killall -9 postgres")
	    logger.info("ssh "+oomsip+" killall -9 postgres")
	    if(status==0):
	        logger.info("the count of kill postgres is %d" % (n+1))
		n+=1
    filename='/opt/lpcmdforsqlexit'
    rc1=commands.getstatusoutput("ssh "+oossip+" \"ls -l "+filename+"\"")
    if(rc1[0]==0):
        cmd="ssh "+oossip+" \"rm -rf "+filename+"\""
        logger.info(cmd)
        os.system(cmd)
    cmd='ssh '+oossip+' "touch '+filename+'"'
    logger.info(cmd)
    (status,output)=commands.getstatusoutput(cmd)
    cmd1='ssh %s "echo \'\q\' > %s"' %(oossip,filename)
    logger.info(cmd1)
    (status, output) = commands.getstatusoutput(cmd1)
    logger.info(output)
    while True:
        time.sleep(20)
        cmd2='ssh '+oossip+' "/mnt/parastor/.ps_hidden/pos/postgres/bin/psql -d pos_iam -h '+oomsip+'< '+filename+'"'
        logger.info(cmd2)
        (status,output2)=commands.getstatusoutput(cmd2)
        logger.info(output)
        if(output2==''):
            logger.info("postgres is ok!")
	    break
	else:
	    time.sleep(10)			

				

if __name__=="__main__":
    args=_readconffile_lp.readconf()
#    print args
    # 第二个步骤：创建logger
    logfilename='test'
    # 创建日志输出文件
    output = getoutputpath_lp.getoutputpath()
    logfilepath = os.path.join(output, logfilename)
    ifmkdir = commonfunction_lp.touchfile(logfilepath)
    logger = _log_lp.log(logfilename)
    if ifmkdir:
        logger.info('%s is alreay exists and we delete it and create a new one' % logfilepath)
    else:
        logger.info('%s is created ok' % logfilepath)
#    recovery_oOms_logger(args['master_mgr_ip'],logger.info)

#    recovery_oOss_logger(args['master_mgr_ip'],args['oossip'],logger)

    recovery_postgres_logger(args['master_mgr_ip'],args['oossip'],logger)
