# -*- coding:utf-8 _*-
"""
@author: wangxiang
@file: 2-06-05-01.py
@time: 2018/07/06
"""
"""
测试内容:访问区创建

步骤:
1）配置节点池设置副本数为3
2）创建存储池，使用全部磁盘
3）通过管理端cli命令创建访问区

检查项:
1）节点池创建成功
2）存储池创建成功
3）访问区创建成功
"""
import os, sys
import re
import time
import utils_path
import Lun_managerTest
import common
import log
import error
import get_config
import login
import error
import decorator_func
from get_config import config_parser as cp
import env_manage_lun_manage

"""初始化日志和全局变量"""
conf_file = Lun_managerTest.CONF_FILE  # 配置文件路径
file_name = os.path.basename(__file__)
file_name = file_name[:-3]  # 获取本脚本名，去掉.py后缀
log_file_path = log.get_log_path(file_name)  # 获取日志目录，即test_cases/Log/Case_log
log.init(log_file_path, True)  # 初始化日志文件

log.info("---------------全局初始化操作-----------------")
node_ip = env_manage_lun_manage.node_ip1
node_ip2 = env_manage_lun_manage.deploy_ips[1]
client_ip1 = env_manage_lun_manage.client_ips[0]
client_ip2 = env_manage_lun_manage.client_ips[1]
esxi_ip = env_manage_lun_manage.Esxi_ips

deploy_ips = get_config.get_env_ip_info(conf_file)  # 获取集群IP列表
client_ips = get_config.get_allclient_ip()  # 获取客户端IP

osan = Lun_managerTest.oSan()


def case():
    share_disk_ids_list = env_manage_lun_manage.break_down.get_all_shared_disk_id()
    data_disk_ids_list = env_manage_lun_manage.break_down.get_all_data_disk_id()
    share_disk_ids = re.sub('\[|\]| ', '', str(env_manage_lun_manage.break_down.get_all_shared_disk_id()))
    data_disk_ids = re.sub('\[|\]| ', '', str(env_manage_lun_manage.break_down.get_all_data_disk_id()))
    node_pool_id = osan.get_option(s_ip=node_ip, command="get_node_pools", indexname="node_pools",
                                   argv="id")[-1]
    osan.disable_san()  # 关于访问区，vip的操作需要先disable san
    osan.startup(s_ip=node_ip)
    log.info("集群中的所有未使用数据盘:{}".format(data_disk_ids_list))
    if len(data_disk_ids_list) >= 9:
        avg_len = len(data_disk_ids_list) / 3
        osan.create_storage_pool(s_ip=node_ip, node_pool_ids=node_pool_id, name='pool1',
                                 disk_ids='{},{},{}'.format(data_disk_ids_list[0], data_disk_ids_list[0 + avg_len],
                                                            data_disk_ids_list[0 + avg_len * 2]))
        osan.create_storage_pool(s_ip=node_ip, node_pool_ids=node_pool_id, name='pool2',
                                 disk_ids='{},{},{}'.format(data_disk_ids_list[1], data_disk_ids_list[1 + avg_len],
                                                            data_disk_ids_list[1 + avg_len * 2]))
        osan.create_storage_pool(s_ip=node_ip, node_pool_ids=node_pool_id, name='pool3',
                                 disk_ids='{},{},{}'.format(data_disk_ids_list[2], data_disk_ids_list[2 + avg_len],
                                                            data_disk_ids_list[2 + avg_len * 2]))
    else:
        avg_len = len(data_disk_ids_list) / 3
        osan.create_storage_pool(s_ip=node_ip, node_pool_ids=node_pool_id, name='pool1',
                                 disk_ids='{},{}'.format(data_disk_ids_list[0], data_disk_ids_list[0 + avg_len]))
        osan.create_storage_pool(s_ip=node_ip, node_pool_ids=node_pool_id, name='pool2',
                                 disk_ids='{},{}'.format(data_disk_ids_list[1], data_disk_ids_list[1 + avg_len]))
        osan.create_storage_pool(s_ip=node_ip, node_pool_ids=node_pool_id, name='pool3',
                                 disk_ids='{},{}'.format(data_disk_ids_list[2], data_disk_ids_list[2 + avg_len]))
    osan.update_param(s_ip=node_ip, section='MGR', name='mgcd_auto_mount_flag', current='0')  # 解除自动挂载
    az_id = osan.create_access_zone(s_ip=node_ip, node_id='1,2,3', name='accesszone1')
    sub_id = osan.create_subnet(s_ip=node_ip, access_zone_id=az_id, name='subnet1',
                                sv_ip=cp("create_subnet", "sv_ip"),
                                mask=cp("create_subnet", "mask"),
                                vv_ip=cp("create_subnet", "vv_ip"),
                                gate_way=cp("create_subnet", "gate_way"),
                                network_interface=cp("create_subnet", "network_interface"))
    osan.add_vip_address_pool(s_ip=node_ip, subnet_id=sub_id,
                              domain_name=cp("add_vip_address_pool", "domain_name"),
                              vip="10.1.1.115-121")

#@decorator_func.tasklet(int(env_manage.cp('timeout', 'second')), maxretry=int(env_manage.cp('timeout', 'maxretry')))
def main():
    env_manage_lun_manage.revert_env()
    error.rel_check_before_run(file_name, jnl_rep=3, free_jnl_num=0, node_num=3)
    # env_manage_lun_manage.clean_for_storage_pool()
    env_manage_lun_manage.create_node_pool()
    case()  # 用例步骤
    common.ckeck_system()  # 检查系统状态


if __name__ == '__main__':
    main()