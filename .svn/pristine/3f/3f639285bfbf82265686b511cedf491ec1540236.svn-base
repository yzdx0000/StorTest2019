#!usr/bin/env python
# -*- coding:utf-8 _*-
'''
测试步骤：
1）配置访问区，创建逻辑卷
2）创建过程中制造一台日志组非业务节点数据网+日志组业务节点oPmgr进程异常
检查项：
1）访问区配置成功
2）逻辑卷创建成功
'''

# testlink case: 1000-33987
import os
import time
import random
import commands
import threading
import utils_path
import log
import common
import access_env
import ReliableTest
import env_manage
import decorator_func

'''初始化'''
file_name = os.path.basename(__file__)
file_name = file_name[:-3]  # 获取本脚本名，去掉.py后缀
log_file_path = log.get_log_path(file_name)  # 获取日志目录，即test_cases/Log/Case_log


def setup():
    '''获取业务节点IP和非业务节点IP'''
    global node_ip1
    global node_ip2
    global node_ip3
    global client_ip1
    node_ip1 = env_manage.deploy_ips[0]
    node_ip2 = env_manage.deploy_ips[1]
    node_ip3 = env_manage.deploy_ips[2]
    client_ip1 = env_manage.client_ips[0]


pro_ips = []
test_net_ip = []
create_lun_ip = []
types = []
infos = []


def check_ip():
    orole_ip = env_manage.com_lh.get_master_oRole(node_ip1)
    if orole_ip == node_ip1:
        pro_ips.append(orole_ip)
        test_net_ip.append(orole_ip)
        create_lun_ip.append(node_ip2)
    elif orole_ip == node_ip2:
        pro_ips.append(orole_ip)
        test_net_ip.append(node_ip1)
        create_lun_ip.append(node_ip3)
    else:
        pro_ips.append(orole_ip)
        test_net_ip.append(node_ip1)
        create_lun_ip.append(node_ip2)


def node_pro_test(eth_name):
    env_manage.com_lh.kill_thread(s_ip=pro_ips[0], p_name="oRole", t_name="pmgr")
    os_type = env_manage.get_os_type(eth_name)
    info = env_manage.down_node(eth_name, os_type, "init 0")
    types.append(os_type)
    infos.append(info)


def create_access():
    env_manage.deploy_ips.remove(pro_ips[0], test_net_ip[0])
    node_ids = []
    for ip in env_manage.deploy_ips:
        node_id = env_manage.com_lh.get_node_id_by_ip(ip)
        node_ids.append(node_id)
    env_manage.create_access(create_lun_ip[0], node_ids, "accesszone1")


def case():
    check_ip()
    threads = []
    t1 = threading.Thread(target=node_pro_test, args=(test_net_ip[0],))
    threads.append(t1)
    t2 = threading.Thread(target=create_access)
    threads.append(t2)
    for t in threads:
        t.start()
    for t in threads:
        t.join()
    env_manage.up_node(infos[0], types[0])
    log.info("step：4、检查节点运行状态，检查服务恢复情况。")
    rc = env_manage.com_lh.get_os_status(test_net_ip[0])
    if rc == 0:
        return


def main():
    access_env.check_env()
    setup()
    case()
    env_manage.clean_access_zone()
    log.info("The case finished!!!")


if __name__ == "__main__":
    env_manage.rel_check_before_run(file_name, jnl_rep=3,free_jnl_num=0, node_num=5)
    common.case_main(main)
