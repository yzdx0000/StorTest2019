# -*- coding:utf-8 -*-
# Author:Liu he
# Date  :2018-11-20

'''
有LUN映射时更新VIP
测试步骤：
1、创建节点池
2、创建存储池
3、创建访问区
4、创建SVIP，填写zone id，svip name，IP地址，掩码，网关，网卡名称，提交后可成功创建
5、创建VIP，填写 SVIP id，域名，IP地址，协议类型，配置方法，负载均衡类型并启动iSCSI
6、创建LUN和对应的映射，并在主机端扫描对应的LUN
7、主机端注销会话，且解除LUN映射
8、修改vip地址池中有LUN关联的VIP，使和步骤5中的地址不同
9、添加LUN映射，并在主机端使用SVIP扫描修改后的VIP并登录
检查项：
6、主机端能扫描到对应的LUN
7、LUN映射解除成功，主机端注销成功
8、修改VIP成功
9、主机端扫描修改VIP并登录成功

'''
# testlink case: 1000-34181

import os
import time
import random
import xml
import json
import commands
import threading
import utils_path
import log
import common
import ReliableTest
import prepare_x1000
import env_manage
import access_env
import decorator_func
from get_config import config_parser as cp

'''初始化'''
file_name = os.path.basename(__file__)
file_name = file_name[:-3]  # 获取本脚本名，去掉.py后缀
log_file_path = log.get_log_path(file_name)  # 获取日志目录，即test_cases/Log/Case_log


def setup():
    '''获取业务节点IP和非业务节点IP'''
    global node_ip1
    global node_ip2
    global client_ip1
    node_ip1 = env_manage.deploy_ips[0]  # 业务节点IP
    node_ip2 = env_manage.deploy_ips[1]  # 非业务节点IP
    client_ip1 = env_manage.client_ips[0]


def get_vip():
    lun_xml = os.getcwd() + '/test_config.xml'
    svip2 = xml.dom.minidom.parse(lun_xml)
    svip2_info = svip2.getElementsByTagName('vips')[0]
    svips_infos = svip2_info.getElementsByTagName('vip')
    vips_list = []
    for svip in svips_infos:
        ip = svip.getElementsByTagName('ip')[0].firstChild.nodeValue
        vips_list.append(ip)
    return vips_list


def create_luns():
    for i in range(10):
        lun_name = "LUN" + str(i)
        env_manage.create_lun(node_ip1, lun_name)


def update_vip(n_vip):
    log.info("修改（删除）有lun的vip")
    vip_pool_id = env_manage.osan.get_vip_pool_ids(s_ip=node_ip1)
    env_manage.osan.update_vip_address_pool(vip_id=vip_pool_id[0], s_ip=node_ip1, vip_addresses=n_vip)


def case():
    vip2 = get_vip()[1]
    log.info("get new vip %s" % vip2)
    log.info("创建lun")
    create_luns()
    log.info("创建lun map")
    env_manage.create_lun_map()
    log.info("iscsi 登录")
    env_manage.create_iscsi_login()
    log.info("扫描iscsi设备")
    luns=env_manage.com2_osan.ls_scsi_dev(client_ip1)
    log.info("from host get scsi %s" % luns)
    log.info("退出登录")
    env_manage.com2_osan.iscsi_logout_all(client_ip1)
    log.info("删除lun map")
    env_manage.clean_lun_map(node_ip1)
    log.info("修改vip")
    update_vip(vip2)
    log.info("再次创建lun map")
    env_manage.create_lun_map(node_ip1)
    log.info("iscsi再次登录")
    env_manage.create_iscsi_login()
    log.info("再次扫描iscsi设备")
    new_luns = env_manage.com2_osan.ls_scsi_dev(client_ip1)
    if len(new_luns) == 10:
        log.info("all lun login to host")
    else:
        log.error("have lun lose")
        os._exit(1)


def main():
    env_manage.clean_test_env()
    setup()
    case()
    log.info("step:6.检查清理测试环境")
    env_manage.clean_test_env()
    log.info("The case finished!!!")


if __name__ == '__main__':
    env_manage.rel_check_before_run(file_name, jnl_rep=3, free_jnl_num=0, node_num=3)
    common.case_main(main)
