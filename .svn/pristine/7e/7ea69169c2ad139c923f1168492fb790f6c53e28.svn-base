# !/usr/bin/python
# -*-coding:utf-8 -*
"""
测试内容:访问区创建

步骤:
1）配置节点池设置副本数为3
2）创建存储池，使用全部磁盘
3）通过管理端cli命令创建访问区

检查项:
1）节点池创建成功
2）存储池创建成功
3）访问区创建成功
"""
import os, sys
import random
import time
import utils_path
import Lun_managerTest
import common
import log
import get_config
import login
import decorator_func
from get_config import config_parser as cp
import env_manage_lun_manage

node_ip = env_manage_lun_manage.deploy_ips[0]

file_name = os.path.basename(__file__)
file_name = file_name[:-3]  # 获取本脚本名，去掉.py后缀
log_file_path = log.get_log_path(file_name)  # 获取日志目录，即test_cases/Log/Case_log
log.init(log_file_path, True)  # 初始化日志文件


def case():
    nodeids = env_manage_lun_manage.osan.get_nodes(s_ip=node_ip)
    nodes_ids='{},{}'.format(nodeids[0],nodeids[1])
    nodes_ids2 = (",".join('%s' % id for id in nodeids))

    node_pool_id = env_manage_lun_manage.osan.create_node_pool(s_ip=node_ip, node_ids=nodes_ids2,
                                                               replica_num=cp("create_node_pool", "replica_num"),
                                                               stripe_width=cp('create_node_pool', 'stripe_width'),
                                                               disk_parity_num=cp("create_node_pool", "disk_parity_num"),
                                                               node_parity_num=cp("create_node_pool", "node_parity_num"),
                                                               name=cp('create_node_pool', 'name'))
    env_manage_lun_manage.osan.startup(s_ip=node_ip)
    env_manage_lun_manage.osan.create_storage_pool(s_ip=node_ip, node_pool_ids=node_pool_id, name='pool1')
    env_manage_lun_manage.osan.update_param(s_ip=node_ip, section=cp('update_param', 'section'),
                                            name=cp('update_param', 'name'),
                                            current=cp('update_param', 'current'))  # 解除自动挂载
    az_id = env_manage_lun_manage.osan.create_access_zone(s_ip=node_ip, node_id=nodes_ids, name='qwertyuiopasdfghjklzxcvbnm12345')
    decorator_func.judge_target(
        env_manage_lun_manage.osan.get_option_single(s_ip=node_ip, command="get_access_zones", indexname="access_zones"
                                                     , argv2="name", ids="ids", argv1=az_id), "qwertyuiopasdfghjklzxcvbnm12345")

#@decorator_func.tasklet(int(env_manage.cp('timeout', 'second')), maxretry=int(env_manage.cp('timeout', 'maxretry')))
def main():
    env_manage_lun_manage.clean()
    case()  # 用例步骤
    common.ckeck_system()  # 检查系统状态


if __name__ == '__main__':
    main()