# -*-coding:utf-8 -*

#######################################################
# 脚本作者：duyuli
# 日期：2018-11-23
# 脚本说明：界面自动化库函数
#######################################################

import time
import os
import common
import log
import xml.dom.minidom
import prepare_clean
import get_config
import quota_common
from selenium import webdriver
from selenium.webdriver import ActionChains                   # double_click
from selenium.webdriver.common.keys import Keys               # check_box 类型反选
from selenium.webdriver.support.select import Select          # 下来菜单选择

from selenium.webdriver.support.wait import WebDriverWait     # 智能等待
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.common.by import By

FILE_NAME = os.path.splitext(os.path.basename(__file__))[0]                       # 本脚本名字
quota_volume_name = os.path.basename(quota_common.BASE_QUOTA_PATH)                # volume1
quota_create_path = quota_volume_name + ':/' + quota_common.QUOTA_PATH_BASENAME   # volume1:/quota_test_dir

# 获取web ip
webui_ip = get_config.get_web_ip()

def init_web_driver(webui):
    """
    :param webui: eg  10.2.41.231
    :return:
    """
    """初始化浏览器"""
    global driver
    driver = webdriver.Firefox()
    driver.get("https://%s:6080" % webui)

    """选择语言，输入用户名，密码"""
    Select(find_element_by_xpath("//*[@id='login_select_language']")).select_by_value("zh_CN")
    find_element_by_xpath("//*[@id='login_name']").send_keys("optadmin")
    find_element_by_xpath("//*[@id='login_pwd']").send_keys("111111")
    find_element_by_xpath("//*[@id='login-btn']").click()

    """点击“连接”"""
    find_element_by_xpath("//a[contains(text(),'连接')]").click()

    # 强制等待2s：避免主界面有点击操作，无正常反应的情况
    time.sleep(2)
    return

def implicit_wait(xpath, time_out=15):
    # 智能等待，只要出现了字段就进行下一步操作
    # xpath:   eg   "//*[@id='xxxxxx']"
    # time_out: 最大超时时间
    global driver
    location_login = (By.XPATH, xpath)
    WebDriverWait(driver, time_out, 1).until(expected_conditions.presence_of_element_located(location_login))
    time.sleep(1)
    return

def find_element_by_xpath(xpath, elements_num=0, time_out=15):
    # 经常使用，重写一个方法加入时间的优化
    global driver
    implicit_wait(xpath, time_out=time_out)
    return driver.find_elements_by_xpath(xpath)[elements_num]

def check_element_done(xpath="//*[@id='frame-main-top-panel']", time_out=180):
    # 通过捕获异常的方式，判断是否执行完成，一般用在公共函数的结尾
    # //*[@id='frame-main-top-panel']
    time.sleep(3)
    count = 1
    while True:
        # noinspection PyBroadException
        try:
            find_element_by_xpath(xpath).click()
        except Exception:
            # log.info("check for %s s" % (count * 5))
            if (count * 5) > time_out:
                log.info("check time out")
                raise Exception("time out")
            count = count + 1
            time.sleep(5)
            continue
        break

def check_href_on_or_off(xpath):
    # 检查折叠链接是否展开
    obj = find_element_by_xpath(xpath)
    class_attribute = obj.get_attribute("class")

    # 关闭状态
    if "icon-angle-right" in class_attribute:
        return False, obj

    # 展开状态
    if "icon-angle-down" in class_attribute:
        return True, obj

def get_driver_obj():
    # 用于非common文件driver的调用
    global driver
    return driver

def locate_manage_operation():
    # 定位到管理运维
    xpath = "//*[@id='ofs_maintain']/a/child::node()[last()]"
    is_on_or_off, obj = check_href_on_or_off(xpath)
    if is_on_or_off is False:
        obj.click()
    return

def locate_job_manage():
    # 管理运维--->任务管理
    xpath = "//*[@id='ofs_jobengine']/a/child::node()[last()]"
    is_on_or_off, obj = check_href_on_or_off(xpath)
    if is_on_or_off is False:
        obj.click()
    return

def locate_source_manage():
    # 定位到资源管理
    xpath = "//*[@id='ofs_resourcepartitioning']/a/child::node()[last()]"
    is_on_or_off, obj = check_href_on_or_off(xpath)
    if is_on_or_off is False:
        obj.click()
    return

def locate_file():
    # 定位到文件：  资源管理 ---> 文件
    xpath = "//*[@id='ofs_res_file']/a/child::node()[last()]"
    is_on_or_off, obj = check_href_on_or_off(xpath)
    if is_on_or_off is False:
        obj.click()
    return

def locate_dir_quota():
    # 定位到目录配额:  资源管理 ---> 文件 ---> 目录配额
    find_element_by_xpath("//*[@id='ofs_quota']/a").click()
    return

def locate_node_pool():
    # 资源管理--->节电池
    find_element_by_xpath("//*[@id='ofs_nodepool']/a").click()
    return

def locate_storage_pool():
    # 资源管理--->存储池
    find_element_by_xpath("//*[@id='ofs_storagepool']/a").click()
    return

def locate_access_manage():
    # 定位到访问管理
    xpath = "//*[@id='ofs_access']/a/child::node()[last()]"
    is_on_or_off, obj = check_href_on_or_off(xpath)
    if is_on_or_off is False:
        obj.click()
    return

def locate_access_zone():
    # 访问管理--->访问分区
    find_element_by_xpath("//*[@id='ofs_accesszone']/a").click()
    return

def locate_user_group():
    # 访问管理--->用户/用户组
    find_element_by_xpath("//*[@id='ofs_usergroup']/a").click()
    return

def locate_auth_provider():
    # 访问管理--->认证服务器
    find_element_by_xpath("//*[@id='ofs_authprovider']/a").click()
    return

def locate_protocol_manage():
    # 定位到协议管理
    xpath = "//*[@id='ofs_protocol']/a/child::node()[last()]"
    is_on_or_off, obj = check_href_on_or_off(xpath)
    if is_on_or_off is False:
        obj.click()
    return

def locate_protocol_file():
    # 协议管理--->文件
    xpath = "//*[@id='ofs_protocol_file']/a/child::node()[last()]"
    is_on_or_off, obj = check_href_on_or_off(xpath)
    if is_on_or_off is False:
        obj.click()
    return

def locate_protocol_object():
    # 协议管理--->对象
    xpath = "//*[@id='ofs_protocol_object']/a/child::node()[last()]"
    is_on_or_off, obj = check_href_on_or_off(xpath)
    if is_on_or_off is False:
        obj.click()
    return

def locate_alarm_event():
    # 告警事件
    xpath = "//*[@id='ofs_alarm']/a/child::node()[last()]"
    is_on_or_off, obj = check_href_on_or_off(xpath)
    if is_on_or_off is False:
        obj.click()
    return

def locate_current_alarms():
    # 告警事件--->实时告警
    find_element_by_xpath("//*[@id='ofs_currentalarms']/a").click()
    return

def locate_all_events():
    # 告警事件--->所有事件
    find_element_by_xpath("//*[@id='ofs_allevents']/a").click()
    return

def locate_smb():
    # 协议管理--->文件--->smb
    find_element_by_xpath("//*[@id='ofs_smb']/a").click()
    return

def locate_nfs():
    # 协议管理--->文件--->nfs
    find_element_by_xpath("//*[@id='ofs_nfs']/a").click()
    return

def locate_ftp():
    # 协议管理--->文件--->ftp
    find_element_by_xpath("//*[@id='ofs_ftp']/a").click()
    return

def locate_posix():
    # 协议管理--->文件--->posix
    find_element_by_xpath("//*[@id='ofs_posix']/a").click()
    return

def create_quota(path, auth_provider_name=None, user_type=None, user_or_group_name=None,
                 logical_quota_cal_type=None, logical_hard_threshold=None, logical_soft_threshold=None,
                 logical_grace_time=None, logical_suggest_threshold=None, physical_quota_cal_type=None,
                 physical_hard_threshold=None, physical_soft_threshold=None, physical_grace_time=None,
                 physical_suggest_threshold=None, physical_count_snapshot=None, physical_count_redundant_space=None,
                 filenr_quota_cal_type=None, filenr_hard_threshold=None, filenr_soft_threshold=None,
                 filenr_grace_time=None, filenr_suggest_threshold=None, description=None):
    """
    :author:duyuli
    :path :      eg  volume:/quota_test_dir
    :time:20181123
    :阈值设定单位：  logical_hard_threshold（GB）
                    logical_grace_time（天）
                    filenr_hard_threshold（千）
    :return:
    """
    global driver
    log.info("begin to create quota")

    # 定位到配额
    locate_source_manage()
    locate_file()
    locate_dir_quota()

    volume_name = path.split(":")[0]
    path_list = path.split(":")[1].split("/")[1:]

    # 创建配额
    find_element_by_xpath("//*[@id='quota_bn_create']").click()

    # 创建配额 -> 路径
    find_element_by_xpath("//*[@id='quota_operate_path_input']/div/i").click()

    # 选择卷,选择卷时需要双击
    obj_stdout = find_element_by_xpath("//*[@class='default-cell' and @title='%s']" % volume_name)
    ActionChains(driver).double_click(obj_stdout).perform()

    # 选择具体路径
    for path_quota in path_list:
        obj_stdout = find_element_by_xpath("//*[@class='default-cell' and @title='%s']" % path_quota)
        ActionChains(driver).double_click(obj_stdout).perform()

    # 单击确定路径
    find_element_by_xpath("//*[@id='fs_file_path_browse_window-btn-0']").click()

    # 选择认证服务器
    if auth_provider_name:
        Select(find_element_by_xpath(
            "//*[@id='ofs_quota_operate_auth_provider_combo']")).select_by_visible_text(auth_provider_name)

        # 选择用户、用户组
        Select(find_element_by_xpath("//*[@id='ofs_quota_operate_user_type_combo']")).select_by_value(user_type)
        find_element_by_xpath("//*[@id='quota_operate_user_input']/div/child::node()[last()]").click()

        # 勾选用户或用户组
        find_element_by_xpath("//*[@title='%s']/../../div/label/input" % user_or_group_name).send_keys(Keys.SPACE)

        # 点击确定
        find_element_by_xpath("//*[@id='ofs_auth_get_user_list_window-btn-0']").click()

    # 选择不同类型的配额，逻辑空间阈值
    if logical_quota_cal_type == "QUOTA_COMPUTE":
        Select(find_element_by_xpath("//*[@id='logical_quota_cal_type_combo']")).select_by_value("QUOTA_COMPUTE")

    if logical_quota_cal_type == "QUOTA_LIMIT":
        Select(find_element_by_xpath("//*[@id='logical_quota_cal_type_combo']")).select_by_value("QUOTA_LIMIT")

        if logical_hard_threshold:
            obj = find_element_by_xpath("//*[@id='logical_hard_threshold_field']")
            obj.clear()
            obj.send_keys(logical_hard_threshold)

        if logical_soft_threshold:
            obj_soft = find_element_by_xpath("//*[@id='logical_soft_threshold_field']")
            obj_soft.clear()
            obj_soft.send_keys(logical_soft_threshold)

            obj_time = find_element_by_xpath("//*[@id='logical_grace_time_field']")
            obj_time.clear()
            obj_time.send_keys(logical_grace_time)

        if logical_suggest_threshold:
            obj_suggest = find_element_by_xpath("//*[@id='logical_suggest_threshold_field']")
            obj_suggest.clear()
            obj_suggest.send_keys(logical_suggest_threshold)

    # 选择不同类型的配额，inode阈值
    if filenr_quota_cal_type == 'QUOTA_COMPUTE':
        Select(find_element_by_xpath("//*[@id='filenr_quota_cal_type_combo']")).select_by_value("QUOTA_COMPUTE")

    if filenr_quota_cal_type == 'QUOTA_LIMIT':
        Select(find_element_by_xpath("//*[@id='filenr_quota_cal_type_combo']")).select_by_value("QUOTA_LIMIT")

        if filenr_hard_threshold:
            obj = find_element_by_xpath("//*[@id='filenr_hard_threshold_field']")
            obj.clear()
            obj.send_keys(filenr_hard_threshold)

        if filenr_soft_threshold:
            obj_soft = find_element_by_xpath("//*[@id='filenr_soft_threshold_field']")
            obj_soft.clear()
            obj_soft.send_keys(filenr_soft_threshold)

            obj_time = find_element_by_xpath("//*[@id='filenr_grace_time_field']")
            obj_time.clear()
            obj_time.send_keys(filenr_grace_time)

        if filenr_suggest_threshold:
            obj_suggest = find_element_by_xpath("//*[@id='filenr_suggest_threshold_field']")
            obj_suggest.clear()
            obj_suggest.send_keys(filenr_suggest_threshold)

    # 单击确定创建配额
    find_element_by_xpath("//*[@id='ofs_quota_create_window-btn-0']").click()

    # 等待创建完成
    check_element_done("//*[@id='frame-main-top-panel']")

    return

def delete_quota(path):
    """
    :author:duyuli
    :time:20181123
    :path : eg   volume:/quota_test_dir
    :return:
    """
    log.info("begin to delete quota")

    # 定位到配额
    locate_source_manage()
    locate_file()
    locate_dir_quota()

    # 勾选指定路径配额
    find_element_by_xpath("//*[@class='default-cell' and @title='%s']/../../div/label/input" % path).click()

    # 勾选删除
    find_element_by_xpath("//*[@id='quota_bn_delete']").click()

    # 点击确定
    find_element_by_xpath("//*[contains(@id,'btn-0')]").click()

    # 等待删除成功
    check_element_done("//*[@id='frame-main-top-panel']")

    return

def quit_web_driver():
    global driver

    # 以防止上一个动作未执行完毕，强制等待
    time.sleep(3)
    driver.quit()
    return

def create_access_zone(name, auth_provider_name=None, nodes_all=True, enable_nas=False,
                       nfs=False, smb=False, ftp=False, s3=False, *args):
    """
    :param name: 访问分区名称
    :param auth_provider_name: 认证服务器
    :param nodes_all: 是否全选
    :param args: 指定选择的节点  eg 10.2.42.151   TODO
    :return:
    tips: 若要使能nas，请指明nfs=True，smb=True等等
    """
    log.info("begin to create access zone")

    # 定位到访问分区
    locate_access_manage()
    locate_access_zone()

    # 单击创建
    find_element_by_xpath("//*[@id='access_zone_bn_create']/i").click()

    # 输入name
    find_element_by_xpath("//*[@id='ofs_access_zone_create_name_id']").send_keys(name)

    # 选择认证服务器
    if auth_provider_name:
        Select(find_element_by_xpath(
            "//*[@id='ofs_access_zone_create_auth_provider_id']")).select_by_visible_text(auth_provider_name)

    # 点开节点列表
    find_element_by_xpath("//*[@id='ofs_access_zone_create_node_list']/div/i").click()

    # 选择节点
    if nodes_all:
        find_element_by_xpath("//*[@id='nodeGrid']/div[2]/div/div/div/div/div/div/label/input").click()

    # 确定节点
    find_element_by_xpath("//*[@id='accessZoneCreateNodeListWindow-btn-0']").click()

    # 回到上层窗口下一步
    find_element_by_xpath("//*[@id='access_zone_create_window_step1-btn-0']").click()

    smb_xpath = "//*[@id='protocolSetting-nas-smb-box']"
    nfs_xpath = "//*[@id='protocolSetting-nas-nfs-box']"
    ftp_xpath = "//*[@id='protocolSetting-nas-ftp-box']"
    s3_xpath = "//*[@id='protocolSetting-object-s3-box']"

    smb_obj = find_element_by_xpath(smb_xpath)
    nfs_obj = find_element_by_xpath(nfs_xpath)
    ftp_obj = find_element_by_xpath(ftp_xpath)
    s3_obj = find_element_by_xpath(s3_xpath)

    if nfs or smb or ftp or s3:
        enable_nas = True

    # 无nas
    if enable_nas is False:
        if smb_obj.is_selected():
            find_element_by_xpath(smb_xpath).send_keys(Keys.SPACE)   # box 类型反选

        if nfs_obj.is_selected():
            find_element_by_xpath(nfs_xpath).send_keys(Keys.SPACE)

        if ftp_obj.is_selected():
            find_element_by_xpath(ftp_xpath).send_keys(Keys.SPACE)

        if s3_obj.is_selected():
            find_element_by_xpath(s3_xpath).send_keys(Keys.SPACE)

    # 有部分或全部nas
    if smb:
        if smb_obj.is_selected() is False:
            find_element_by_xpath(smb_xpath).send_keys(Keys.SPACE)
    else:
        if smb_obj.is_selected():
            find_element_by_xpath(smb_xpath).send_keys(Keys.SPACE)

    if nfs:
        if nfs_obj.is_selected() is False:
            find_element_by_xpath(nfs_xpath).send_keys(Keys.SPACE)
    else:
        if nfs_obj.is_selected():
            find_element_by_xpath(nfs_xpath).send_keys(Keys.SPACE)

    if ftp:
        if ftp_obj.is_selected() is False:
            find_element_by_xpath(ftp_xpath).send_keys(Keys.SPACE)
    else:
        if ftp_obj.is_selected():
            find_element_by_xpath(ftp_xpath).send_keys(Keys.SPACE)

    if s3:
        if s3_obj.is_selected() is False:
            find_element_by_xpath(s3_xpath).send_keys(Keys.SPACE)
    else:
        if s3_obj.is_selected():
            find_element_by_xpath(s3_xpath).send_keys(Keys.SPACE)

    # 单击完成
    find_element_by_xpath("//*[@id='access_zone_create_window_step2-btn-1']").click()

    # 单击确定创建  starts-with  contains
    find_element_by_xpath("//div[contains(@id,'btn-0') and starts-with(@id,'comfirm')]").click()

    # 等待创建完成
    log.info("wait enable nas")
    check_element_done("//*[@id='access_zone_operation_banner']")
    return

def delete_access_zone(name):
    log.info("begin to delete access zone")

    # 定位到访问分区
    locate_access_manage()
    locate_access_zone()

    is_enable_nas_start_stat = False

    # 勾选待删除的访问分区
    find_element_by_xpath("//div[starts-with(text(),'%s')]/../../div/label/input" % name).click()

    # 点击服务设置
    find_element_by_xpath("//*[@id='access_zone_bn_protocol_setting']").click()

    # smb nfs ftp s3 等服务置为空
    smb_xpath = "//*[@id='protocolSetting-nas-smb-box']"
    nfs_xpath = "//*[@id='protocolSetting-nas-nfs-box']"
    ftp_xpath = "//*[@id='protocolSetting-nas-ftp-box']"
    s3_xpath = "//*[@id='protocolSetting-object-s3-box']"

    smb_obj = find_element_by_xpath(smb_xpath)
    nfs_obj = find_element_by_xpath(nfs_xpath)
    ftp_obj = find_element_by_xpath(ftp_xpath)
    s3_obj = find_element_by_xpath(s3_xpath)

    if smb_obj.is_selected():
        is_enable_nas_start_stat = True
        find_element_by_xpath(smb_xpath).send_keys(Keys.SPACE)   # box 类型反选
    if nfs_obj.is_selected():
        is_enable_nas_start_stat = True
        find_element_by_xpath(nfs_xpath).send_keys(Keys.SPACE)
    if ftp_obj.is_selected():
        is_enable_nas_start_stat = True
        find_element_by_xpath(ftp_xpath).send_keys(Keys.SPACE)
    if s3_obj.is_selected():
        is_enable_nas_start_stat = True
        find_element_by_xpath(s3_xpath).send_keys(Keys.SPACE)

    # 单击确定
    find_element_by_xpath("//*[@id='protocolSettingWindow-btn-0']").click()

    if is_enable_nas_start_stat is True:
        # 勾选警告
        find_element_by_xpath("//*[@id='riskCheckbox']").send_keys(Keys.SPACE)

        # 点击确定
        find_element_by_xpath("//*[contains(@id,'btn-0')]").click()

        # disable_nas 等待时间
        log.info("wait disable nas")
        check_element_done("//*[@id='access_zone_operation_banner']", time_out=180)

    # 重新勾选待删除的访问分区
    obj = find_element_by_xpath("//div[starts-with(text(),'%s')]/../../div/label/input" % name)
    if obj.is_selected():
        pass
    else:
        find_element_by_xpath("//div[starts-with(text(),'%s')]/../../div/label/input" % name).send_keys(Keys.SPACE)

    # 单击删除
    find_element_by_xpath("//*[@id='access_zone_bn_delete']").click()

    # 确认删除
    find_element_by_xpath("//*[contains(@id,'btn-0')]").click()

    # 等待访问分区删除成功
    check_element_done("//*[@id='access_zone_operation_banner']")

    return

def create_group_user(group_name, user_name, auth_provider_name):
    log.info("begin to create group user")

    # 定位到用户/用户组
    locate_access_manage()
    locate_user_group()

    # 选择域名服务器
    Select(find_element_by_xpath("//*[@id='user_group_main_tab_combo_id']")).select_by_visible_text(auth_provider_name)

    # 点击用户组
    find_element_by_xpath("//*[@id='tabCard']/li[2]/a").click()

    # 点击创建用户组
    find_element_by_xpath("//*[@id='group_tab_bn_create']/i").click()

    # 输入用户组name
    find_element_by_xpath("//*[@id='ofs_user_group_group_create_group_name_id']").send_keys(group_name)

    # 点击确定创建用户组
    find_element_by_xpath("//*[@id='group_create_window-btn-0']").click()

    # 检查用户组创建完成
    check_element_done("//*[@id='frame-main-top-panel']")

    # 点击用户按钮
    find_element_by_xpath("//*[@id='tabCard']/li[1]/a").click()

    # 点击创建用户
    find_element_by_xpath("//*[@id='user_tab_bn_create']/i").click()

    # 输入用户name，passwd， 选择主组
    find_element_by_xpath("//*[@id='ofs_user_group_user_create_username_id']").send_keys(user_name)
    find_element_by_xpath("//*[@id='ofs_user_group_user_create_password_id']").send_keys("111111")
    find_element_by_xpath("//*[@id='ofs_user_group_user_create_main_group']/div/i").click()
    find_element_by_xpath("//*[@title='%s']/../../div/label/input" % group_name).click()

    # 点击确定选择主组
    find_element_by_xpath("//*[@id='user_group_main_group_list_window-btn-0']").click()

    # 点击确定创建用户
    find_element_by_xpath("//*[@id='user_create_window-btn-0']").click()

    # 等待创建完成
    check_element_done("//*[@id='tabCard']")

    return

def delete_group_user(group_name, user_name, auth_provider_name, all_user=True):
    log.info("begin to delete group user")
    # 定位到用户/用户组
    locate_access_manage()
    locate_user_group()

    # 选择域名服务器
    Select(find_element_by_xpath("//*[@id='user_group_main_tab_combo_id']")).select_by_visible_text(auth_provider_name)

    # 点击用户按钮
    find_element_by_xpath("//*[@id='tabCard']/li[1]/a").click()

    # 勾选指定删除的用户名
    if all_user:
        find_element_by_xpath("//*[@id='subnet_grid']/div[2]/div/div/div/div/div/div/label/input").send_keys(Keys.SPACE)
    else:
        find_element_by_xpath("//*[@title='%s']/../../div/label/input" % user_name).send_keys(Keys.SPACE)

    # 点击删除
    find_element_by_xpath("//*[@id='user_tab_bn_delete']/i").click()

    # 勾选警告
    find_element_by_xpath("//*[@id='riskCheckbox']").send_keys(Keys.SPACE)

    # 点击确定删除用户
    find_element_by_xpath("//*[contains(@id,'btn-0')]").click()

    # 点击关闭
    check_element_done("//*[contains(@id,'btn-0')]")

    # 点击用户组按钮
    find_element_by_xpath("//*[@id='tabCard']/li[2]/a").click()

    # 点击指定用户组
    find_element_by_xpath("//*[@title='%s']" % group_name).click()

    # 点击删除
    find_element_by_xpath("//*[@id='group_tab_bn_delete']/i").click()

    # 勾选警告
    find_element_by_xpath("//*[@id='riskCheckbox']").send_keys(Keys.SPACE)

    # 点击确定删除group
    find_element_by_xpath("//*[contains(@id,'btn-0')]").click()

    # 等待删除成功
    check_element_done("//*[@id='tabCard']")

    return

def modify_quota(path, logical_quota_cal_type=None, logical_hard_threshold=None, logical_soft_threshold=None,
                 logical_grace_time=None, logical_suggest_threshold=None,
                 filenr_quota_cal_type=None, filenr_hard_threshold=None, filenr_soft_threshold=None,
                 filenr_grace_time=None, filenr_suggest_threshold=None):
    # 定位到配额
    locate_source_manage()
    locate_file()
    locate_dir_quota()

    # 勾选指定路径配额
    find_element_by_xpath("//*[@title='%s']/../../div/label/input" % path).send_keys(Keys.SPACE)

    # 点击修改
    find_element_by_xpath("//*[@id='quota_bn_modify']/i").click()

    # 选择不同类型的配额，逻辑空间阈值
    if logical_quota_cal_type == "QUOTA_COMPUTE":
        Select(find_element_by_xpath("//*[@id='logical_quota_cal_type_combo']")).select_by_value("QUOTA_COMPUTE")

    if logical_quota_cal_type == "QUOTA_LIMIT":
        Select(find_element_by_xpath("//*[@id='logical_quota_cal_type_combo']")).select_by_value("QUOTA_LIMIT")

        if logical_hard_threshold:
            obj = find_element_by_xpath("//*[@id='logical_hard_threshold_field']")
            obj.clear()
            obj.send_keys(logical_hard_threshold)

        if logical_soft_threshold:
            obj_soft = find_element_by_xpath("//*[@id='logical_soft_threshold_field']")
            obj_soft.clear()
            obj_soft.send_keys(logical_soft_threshold)

            obj_time = find_element_by_xpath("//*[@id='logical_grace_time_field']")
            obj_time.clear()
            obj_time.send_keys(logical_grace_time)

        if logical_suggest_threshold:
            obj_suggest = find_element_by_xpath("//*[@id='logical_suggest_threshold_field']")
            obj_suggest.clear()
            obj_suggest.send_keys(logical_suggest_threshold)

    # 选择不同类型的配额，inode阈值
    if filenr_quota_cal_type == 'QUOTA_COMPUTE':
        Select(find_element_by_xpath("//*[@id='filenr_quota_cal_type_combo']")).select_by_value("QUOTA_COMPUTE")

    if filenr_quota_cal_type == 'QUOTA_LIMIT':
        Select(find_element_by_xpath("//*[@id='filenr_quota_cal_type_combo']")).select_by_value("QUOTA_LIMIT")

        if filenr_hard_threshold:
            obj = find_element_by_xpath("//*[@id='filenr_hard_threshold_field']")
            obj.clear()
            obj.send_keys(filenr_hard_threshold)

        if filenr_soft_threshold:
            obj_soft = find_element_by_xpath("//*[@id='filenr_soft_threshold_field']")
            obj_soft.clear()
            obj_soft.send_keys(filenr_soft_threshold)

            obj_time = find_element_by_xpath("//*[@id='filenr_grace_time_field']")
            obj_time.clear()
            obj_time.send_keys(filenr_grace_time)

        if filenr_suggest_threshold:
            obj_suggest = find_element_by_xpath("//*[@id='filenr_suggest_threshold_field']")
            obj_suggest.clear()
            obj_suggest.send_keys(filenr_suggest_threshold)

    # 单击确定创建配额
    find_element_by_xpath("//*[@id='ofs_quota_update_window-btn-0']").click()

    # 等待创建完成
    check_element_done("//*[@id='quota_operation_banner']")

    return

def check_alarms(name, timeout=300):
    global driver

    # 定位到实时告警
    locate_alarm_event()
    locate_current_alarms()

    count = 1
    while True:
        # 超时则退出
        if count >= (timeout/3):
            log.info("check alarms timeout")
            raise Exception("check alarms failed")

        obj = driver.find_elements_by_xpath("//*[starts-with(text(),'%s')]" % name)
        if len(obj) != 0:
            log.info("check alarms right")
            break
        else:
            time.sleep(3)
            count += 1

            # 有可能上次刷新还未显示完毕
            check_element_done()

            driver.find_element_by_xpath("//*[@id='ofs_alarm_active_refresh']").click()
    return

def check_events(event_name, time1, timeout=300):
    global driver
    # 定位到事件
    locate_alarm_event()
    locate_all_events()

    # 点开100条/页
    find_element_by_xpath("//*[@class='kuma-select2-arrow']").click()

    # 选择100条/页
    find_element_by_xpath("//*[starts-with(text(),'100条/页')]").click()

    count = 1
    while True:
        # 超时则退出
        if count >= (timeout/3):
            log.info("check alarms timeout")
            raise Exception("check alarms failed")

        obj = driver.find_elements_by_xpath("//*[starts-with(text(),'%s')]" % event_name)

        if len(obj) != 0:
            # 判断时间在脚本执行后
            time2 = find_element_by_xpath("//*[starts-with(text(),'%s')]/../../../div[4]/div" % event_name).text
            if check_time_earlier_or_later(time1, time2) > 0:
                log.info("check events right")
                break

        time.sleep(3)
        count += 1

        # 有可能上次刷新还未显示完毕
        check_element_done()

        driver.find_element_by_xpath("//*[@id='ofs_all_event_refresh']").click()
    return

def create_smb_share(path, access_zone_name, share_name, auth_access_control, user_name=None, group_name=None):
    """
    :param path:                 volume1:smb_share
    :param access_zone_name:     testzone
    :param share_name:           share_smb
    :param auth_access_control:  ro
                                  rw
                                  full_control
    :param user_name:            user_name
    :param group_name:           group_name
    :return:
    """
    global driver
    log.info("create smb share")

    # 定位到smb
    locate_protocol_manage()
    locate_protocol_file()
    locate_smb()

    path_list = []
    volume_name = path.split(":")[0]
    path_list.append(volume_name)
    path_list.extend(path.split(":")[1].split("/")[1:])

    # 选择访问分区
    Select(find_element_by_xpath("//*[@id='ofs_accesszone_selector']")).select_by_visible_text(access_zone_name)

    # 点击创建
    find_element_by_xpath("//*[@id='smb_bn_create']").click()

    # 填写共享名称
    find_element_by_xpath("//*[@id='smb_operate_step1_name']").send_keys(share_name)

    # 点击共享目录
    find_element_by_xpath("//*[@id='smb_operate_step1_path_div']//i[@class='icon-search']").click()

    # 选择共享目录
    for dir_smb in path_list:
        obj = find_element_by_xpath("//*[@title='%s']" % dir_smb)
        ActionChains(driver).double_click(obj).perform()

    # 点击确定共享目录
    find_element_by_xpath("//*[@id='fs_file_path_browse_window-btn-0']").click()

    # 点击下一步
    find_element_by_xpath("//*[@id='ofs_smb_create_window-btn-0']").click()

    # 点击完成共享
    find_element_by_xpath("//*[@id='ofs_smb_create_step2_window-btn-1']").click()

    # 点击确定完成
    find_element_by_xpath("//*[contains(@id,'btn-0') and starts-with(@id,'comfirm')]").click()

    # 勾选该smb共享
    obj = find_element_by_xpath("//*[@title='%s']/../..//input[@type='checkbox']" % path)
    if obj.is_selected() is False:
        obj.send_keys(Keys.SPACE)

    # 点击添加用户
    find_element_by_xpath("//*[@id='smb_auth_bn_add_div']/i").click()

    # 选中用户或用户组
    user_or_group_name = None
    if user_name:
        obj = find_element_by_xpath("//*[@id='ofs_auth_user_type_user']")
        if obj.is_selected() is False:
            obj.send_keys(Keys.SPACE)
        user_or_group_name = user_name

    if group_name:
        obj = find_element_by_xpath("//*[@id='ofs_auth_user_type_group']")
        if obj.is_selected() is False:
            obj.send_keys(Keys.SPACE)
        user_or_group_name = user_name

    # 点击搜索名称
    find_element_by_xpath("//*[@id='ofs_auth_user_searcher_div']//i").click()

    # 选中用户组或用户
    find_element_by_xpath("//*[@title='%s']/../../div/label/input" % user_or_group_name).send_keys(Keys.SPACE)

    # 点击确定用户用户组
    find_element_by_xpath("//*[@id='ofs_auth_get_user_list_window-btn-0']").click()

    # 选择权限
    Select(find_element_by_xpath("//*[@id='ofs_auth_access_control_checkbox']")).select_by_value(auth_access_control)

    # 点击确定添加
    find_element_by_xpath("//*[@id='ofs_smb_add_auth_window-btn-0']").click()

    # 点击确定
    find_element_by_xpath("//*[contains(@id,'btn-0') and starts-with(@id,'comfirm')]").click()

    # 检查完成
    check_element_done()

    return

def delete_smb_share(path):
    log.info("delete smb share")
    # 定位到smb
    locate_protocol_manage()
    locate_protocol_file()
    locate_smb()

    # 勾选指定路径的smb
    obj = find_element_by_xpath("//*[@title='%s']/../..//input[@type='checkbox']" % path)
    if obj.is_selected() is False:
        obj.send_keys(Keys.SPACE)

    # 点击删除
    find_element_by_xpath("//*[@id='smb_bn_delete']").click()

    # 勾选警告
    find_element_by_xpath("//*[@id='riskCheckbox']").send_keys(Keys.SPACE)

    # 点击确认删除
    find_element_by_xpath("//*[contains(@id,'btn-0') and starts-with(@id,'riskComfirm')]").click()

    # 检查完成
    check_element_done()

    return

def create_nfs_share(path, access_zone_name, share_name, auth_access_control, client_nfs_ip):
    """
    :param path:                   eg    volume1:/quota_test_dir
    :param access_zone_name:       eg    testzone
    :param share_name:             eg    nfs_share
    :param auth_access_control:    eg    ro
                                    eg    rw
    无删除和重命名权限               eg    rw_nodelsacl
    :param client_nfs_ip:          eg    *
                                    eg    10.2.42.102/22
    :return:
    """
    global driver
    log.info("create nfs share")

    # 定位到nfs
    locate_protocol_manage()
    locate_protocol_file()
    locate_nfs()

    path_list = []
    volume_name = path.split(":")[0]
    path_list.append(volume_name)
    path_list.extend(path.split(":")[1].split("/")[1:])

    # 选择访问分区
    Select(find_element_by_xpath("//*[@id='ofs_nfs_access_selector']")).select_by_visible_text(access_zone_name)

    # 点击创建
    find_element_by_xpath("//*[@id='nfs_bn_create']").click()

    # 填写共享名称
    find_element_by_xpath("//*[@id='nfs_operate_step1_name']").send_keys(share_name)

    # 点击共享目录
    find_element_by_xpath("//*[@id='nfs_operate_step1_path_div']//i[@class='icon-search']").click()

    # 选择共享目录
    for dir_nfs in path_list:
        obj = find_element_by_xpath("//*[@title='%s']" % dir_nfs)
        ActionChains(driver).double_click(obj).perform()

    # 点击确定共享目录
    find_element_by_xpath("//*[@id='fs_file_path_browse_window-btn-0']").click()

    # 点击下一步
    find_element_by_xpath("//*[@id='ofs_nfs_create_window-btn-0']").click()

    # 点击完成共享
    find_element_by_xpath("//*[@id='ofs_nfs_create_step2_window-btn-1']").click()

    # 点击确定完成
    find_element_by_xpath("//*[contains(@id,'btn-0') and starts-with(@id,'comfirm')]").click()

    # 勾选该nfs共享
    obj = find_element_by_xpath("//*[@title='%s']/../..//input[@type='checkbox']" % path)
    if obj.is_selected() is False:
        obj.send_keys(Keys.SPACE)

    # 点击添加nfs客户端
    find_element_by_xpath("//*[@id='nfs_client_bn_add_div']/i").click()

    # 填写nfs client ip
    find_element_by_xpath("//*[@id='ofs_nfs_client_ip_address']").send_keys(client_nfs_ip)

    # 选择权限
    Select(find_element_by_xpath("//*[@id='ofs_nfs_client_permission_level']")).select_by_value(auth_access_control)

    # 点击确定添加
    find_element_by_xpath("//*[@id='ofs_nfs_add_client_window-btn-0']").click()

    # 点击确定
    find_element_by_xpath("//*[contains(@id,'btn-0') and starts-with(@id,'comfirm')]").click()

    # 检查完成
    check_element_done()

    return

def delete_nfs_share(path):
    log.info("delete nfs share")

    # 定位到nfs
    locate_protocol_manage()
    locate_protocol_file()
    locate_nfs()

    # 勾选指定路径的nfs
    obj = find_element_by_xpath("//*[@title='%s']/../..//input[@type='checkbox']" % path)
    if obj.is_selected() is False:
        obj.send_keys(Keys.SPACE)

    # 点击删除
    find_element_by_xpath("//*[@id='nfs_bn_delete']").click()

    # 勾选警告
    find_element_by_xpath("//*[@id='riskCheckbox']").send_keys(Keys.SPACE)

    # 点击确认删除
    find_element_by_xpath("//*[contains(@id,'btn-0') and starts-with(@id,'riskComfirm')]").click()

    # 检查完成
    check_element_done()

    return

def create_ftp_share(path, access_zone_name, user_name):
    global driver
    log.info("create ftp share")

    # 定位到ftp
    locate_protocol_manage()
    locate_protocol_file()
    locate_ftp()

    path_list = []
    volume_name = path.split(":")[0]
    path_list.append(volume_name)
    path_list.extend(path.split(":")[1].split("/")[1:])

    # 选择访问分区
    Select(find_element_by_xpath("//*[@id='ofs_accesszone_selector']")).select_by_visible_text(access_zone_name)

    # 点击创建
    find_element_by_xpath("//*[@id='ftp_bn_create']").click()

    # 点击共享目录
    find_element_by_xpath("//*[@id='ftp_operate_path_div']//i[@class='icon-search']").click()

    # 选择共享目录
    for dir_ftp in path_list:
        obj = find_element_by_xpath("//*[@title='%s']" % dir_ftp)
        ActionChains(driver).double_click(obj).perform()

    # 点击确定共享目录
    find_element_by_xpath("//*[@id='fs_file_path_browse_window-btn-0']").click()

    # 点击下一步
    find_element_by_xpath("//*[@id='ofs_ftp_create_window-btn-0']").click()

    # 点击添加用户
    find_element_by_xpath("//*[@id='ftp_operate_step2_add_bn']").click()

    # 点击搜索
    find_element_by_xpath("//*[@id='ofs_auth_user_searcher_div']//i").click()

    # 勾选指定用户
    find_element_by_xpath("//*[@title='%s']/../..//input" % user_name).send_keys(Keys.SPACE)

    # 点击确定用户
    find_element_by_xpath("//*[@id='ofs_auth_get_user_list_window-btn-0']").click()

    # 点击确定授权
    find_element_by_xpath("//*[@id='ofs_ftp_add_auth_window-btn-0']").click()

    # 点击完成共享
    find_element_by_xpath("//*[@id='ofs_ftp_create_step2_window-btn-1']").click()

    # 勾选警告
    find_element_by_xpath("//*[@id='riskCheckbox']").send_keys(Keys.SPACE)

    # 点击确定
    find_element_by_xpath("//*[contains(@id,'btn-0') and starts-with(@id,'riskComfirm')]").click()

    # 点击关闭执行结果
    xpath = "//*[contains(@id,'btn-0') and starts-with(@id,'msgbox')]"
    check_element_done(xpath)

    return

def delete_ftp_share(path):
    log.info("delete ftp share")

    # 定位到ftp
    locate_protocol_manage()
    locate_protocol_file()
    locate_ftp()

    # 勾选指定路径的nfs
    obj = find_element_by_xpath("//*[@title='%s']/../..//input[@type='checkbox']" % path)
    if obj.is_selected() is False:
        obj.send_keys(Keys.SPACE)

    # 点击删除
    find_element_by_xpath("//*[@id='ftp_bn_delete']").click()

    # 勾选警告
    find_element_by_xpath("//*[@id='riskCheckbox']").send_keys(Keys.SPACE)

    # 点击确认删除
    find_element_by_xpath("//*[contains(@id,'btn-0') and starts-with(@id,'riskComfirm')]").click()

    # 检查完成
    check_element_done()

    return

def get_cluster_time():
    return find_element_by_xpath("//*[@id ='ofs_current_connect_cluster_time']").text

def check_time_earlier_or_later(time1, time2):
    # 用来判断集群时间格式，用于检查事件
    # time1     eg:   2018-12-03 15:27:31

    list_time1 = time1.split()[0].split("-")
    list_time1.extend(time1.split()[1].split(":"))

    list_time2 = time2.split()[0].split("-")
    list_time2.extend(time2.split()[1].split(":"))

    int_time1, int_time2, a = 0, 0, 1

    for i in range(1, 7):
        int_time1 = int_time1 + int(list_time1[6 - i]) * a
        int_time2 = int_time2 + int(list_time2[6 - i]) * a
        a *= 60

    return int_time2 - int_time1
