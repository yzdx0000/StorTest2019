# -*- coding:utf-8 -*-
# Author:Liu he
# Date  :2018-8-9

'''
测试内容:SVIP和VIP在同一节点上能被扫描LUN
测试步骤：
1）创建存储池和访问分区，业务子网和对应的SVIP和VIP地址池，并创建2条LUN，LUN1和LUN2对应的VIP1和VIP2分别在节点1和节点2上，SVIP在节点1上
2）创建主机组，添加主机，并将主机组映射到LUN1
3）在主机端使用SVIP登录主机映射的LUN
检查项：
1）使用SVIP登录扫描LUN1成功，不能扫描到LUN2

'''

import os
import time
import random
import commands
import threading
import utils_path
import log
import common
import ReliableTest
import prepare_x1000
import env_manage
import decorator_func
from get_config import config_parser as cp

'''初始化'''
file_name = os.path.basename(__file__)
file_name = file_name[:-3]  # 获取本脚本名，去掉.py后缀
log_file_path = log.get_log_path(file_name)  # 获取日志目录，即test_cases/Log/Case_log


def setup():
    '''获取业务节点IP和非业务节点IP'''
    global node_ip1
    global node_ip2
    global node_ip3
    global client_ip1
    node_ip1 = env_manage.get_inter_ids()[0]  # 业务节点IP
    node_ip2 = env_manage.get_inter_ids()[-1]  # 非业务节点IP
    node_ip3 = env_manage.get_inter_ids()[1]
    client_ip1 = env_manage.client_ips[0]


def create_vip_pool():
    log.info("创建VIP池")
    sub_id = env_manage.osan.get_subnet_id(s_ip=node_ip1)
    az_id = env_manage.osan.get_access_zone_id(node_ip1)
    env_manage.osan.add_vip_address_pool(s_ip=node_ip1, subnet_id=sub_id[0],
                                         domain_name=cp("add_vip_address_pool", "domain_name"),
                                         vip=cp("add_vip_address_pool", "vip"))
    env_manage.osan.enable_san(s_ip=node_ip1, access_zone_id=az_id[0])


def create_subnet1():
    log.info("创建SVIP")
    az_id = env_manage.osan.get_access_zone_id(node_ip1)
    env_manage.osan.create_subnet(s_ip=node_ip1, access_zone_id=az_id[0], name='subnet1',
                                  vv_ip=cp("create_subnet", "vv_ip"), sv_ip=cp("create_subnet", "sv_ip"),
                                  mask=cp("create_subnet", "mask"), gate_way=cp("create_subnet", "gate_way"),
                                  network_interface=cp("create_subnet", "network_interface"))


def create_subnet2():
    log.info("创建SVIP")
    az_id = env_manage.osan.get_access_zone_id(node_ip1)
    env_manage.osan.create_subnet(s_ip=node_ip3, access_zone_id=az_id[1], name='subnet2',
                                  vv_ip=cp("create_subnet", "vv_ip3"), sv_ip=cp("create_subnet", "sv_ip3"),
                                  mask=cp("create_subnet", "mask"), gate_way=cp("create_subnet", "gate_way"),
                                  network_interface=cp("create_subnet", "network_interface"))


def lun_map():
    log.info("逻辑卷映射至主机")
    lun_ids = env_manage.osan.get_lun(s_ip=node_ip1)
    host_group_ids = env_manage.osan.get_host_groups(s_ip=node_ip1)
    for id in lun_ids:
        env_manage.osan.map_lun(s_ip=node_ip1, lun_ids=id, hg_id=host_group_ids[0])


def iscsi_login_xstor1():
    log.info("iscsi 登录")
    iqns = env_manage.osan.discover_scsi(client_ip=client_ip1, vip=cp("add_vip_address_pool", "vip"))
    env_manage.osan.iscsi_login(client_ip=cp("client_node_ip", "client1"), iqn=iqns)


def iscsi_login_xstor2():
    log.info("iscsi 登录")
    iqns = env_manage.osan.discover_scsi(client_ip=client_ip1, vip=cp("add_vip_address_pool", "vip3"))
    env_manage.osan.iscsi_login(client_ip=client_ip1, iqn=iqns)


def check_disk():
    disk_name = env_manage.osan.ls_scsi_dev(client_ip=cp("client_node_ip", "client1"))
    if disk_name is None:
        log.info("find X1000 LUN failed")
        exit(1)
    else:
        log.info("find X1000 LUN %s" % (disk_name))


def create_lun(ips=node_ip1, name="LUN1", access_id=None):
    log.info("节点%s 创建逻辑卷 %s ......" % (ips, name))
    s_pool_id = env_manage.osan.get_storage_id(ips)
    access_id = env_manage.osan.get_access_zone_id(ips)
    if access_id == 1:
        env_manage.osan.create_lun(s_ip=ips, total_bytes="1073741824", lun_type="THIN", lun_name=name,
                                   stor_pool_id=s_pool_id[1], acc_zone_id=access_id[0])
        time.sleep(10)
    else:
        env_manage.osan.create_lun(s_ip=ips, total_bytes="1073741824", lun_type="THIN", lun_name=name,
                                   stor_pool_id=s_pool_id[1], acc_zone_id=access_id[1])
        time.sleep(10)


def clean():
    log.info("清理测试环境")
    env_manage.clean_lun_map()
    env_manage.clean_lun()
    env_manage.clean_initiator()
    env_manage.clean_host()
    env_manage.clean_hostgroup()
    env_manage.clean_vip_address_pool()
    env_manage.clean_subnet()
    env_manage.clean_access_zone()


def case():
    env_manage.create_access(ips=node_ip1, node_ids="1,2", access_name="accesszone1")  # 最少三个节点一个访问区
    env_manage.create_access(ips=node_ip1, node_ids="3", access_name="accesszone2")
    create_subnet1()
    create_subnet2()
    create_vip_pool()
    env_manage.create_host_initiator()
    create_lun(node_ip1, "LUN1", 1)
    create_lun(node_ip1, "LUN2", 2)
    lun_map()
    iscsi_login_xstor1()
    check_disk()
    env_manage.osan.iscsi_logout_all(client_ip=cp("client_node_ip", "client1"))
    iscsi_login_xstor2()
    check_disk()
    env_manage.osan.iscsi_logout_all(node_ip1)


def main():
    env_manage.clean_test_env()
    setup()
    env_manage.xstor_init_pool()
    # prepare_x1000.test_clean(file_name)
    case()
    # clean()  #没有disable san功能，不能清理此类用例彻底暂时用重装来恢复环境
    log.info("The case finished!!!")


if __name__ == '__main__':
    env_manage.rel_check_before_run(file_name, jnl_rep=3, free_jnl_num=0, node_num=3)
    common.case_main(main)
