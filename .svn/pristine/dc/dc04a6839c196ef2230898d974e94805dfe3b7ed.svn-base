# -*- coding:utf-8 _*-
# Author:wangxiang
# Date  :2018-8-13
"""
测试内容:精简卷Qos在线修改写IOPS和写带宽同时设置
步骤:
1）在访问区配置中，每个节点取1块磁盘创建副本模式存储池，创建存储池pool1；
2）选择创建精简卷，选择存储池pool1，精简卷名称为LUN；
3）将精简卷映射至主机，并进行写业务；
4）检查主机业务带宽，待稳定后设置QoS带宽值为实际的50%，设置IOPS值为实际的50%；
5）提交申请后，立即查看主机实际读带宽，带宽值和IOPS约为实际值的50%（忽略性能波动）。
6）再次修改带宽和IOPS值为实际值的75%
检查项:
1）存储池成功创建
2）逻辑卷成功创建
3）业务带宽稳定
4）QoS设置可立即生效
"""
import os
import sys
import utils_path
import common2
import common
import Lun_managerTest
import log
import error
import get_config
import threading
import time
import commands
import random
import breakdown
import ReliableTest

import env_manage_lun_manage
import decorator_func
from get_config import config_parser as cp

"""初始化日志和变量"""
FILE_NAME = os.path.splitext(os.path.basename(__file__))[0]
file_name = os.path.basename(__file__)
file_name = file_name[:-3]  # 获取本脚本名，去掉.py后缀
log_file_path = log.get_log_path(file_name)  # 获取日志目录，即test_cases/Log/Case_log
log.init(log_file_path, True)  # 初始化日志文件

node_ip1 = env_manage_lun_manage.deploy_ips[0]
node_ip2 = env_manage_lun_manage.deploy_ips[1]
client_ip1 = env_manage_lun_manage.client_ip1
esxi_ip = env_manage_lun_manage.Esxi_ips


def iscsi_login():
    global min_seq_w
    global min_seq_r
    hg_id = env_manage_lun_manage.osan.create_host_group(s_ip=node_ip1, hg_name='myhostgroup1')
    h_id = env_manage_lun_manage.osan.add_host(s_ip=node_ip1, h_name='host1', hg_id=hg_id)
    ini_id = env_manage_lun_manage.osan.add_initiator(s_ip=node_ip1, h_id=h_id, iqn=cp("add_initiator", "iqn"),
                                                      alias=cp("add_initiator", "alias"))
    decorator_func.judge_target(
        env_manage_lun_manage.osan.get_option_single(s_ip=node_ip1, command="get_initiators", indexname="initiators"
                                                     , argv2="auth_type", ids="ids", argv1=ini_id),
        "NONE")
    env_manage_lun_manage.osan.update_iscsid_conf(cli_ip=client_ip1, CHAPTYPE='None', s_ip=client_ip1)
    lun_id = env_manage_lun_manage.osan.create_lun(s_ip=node_ip1, total_bytes='5368709120', lun_type="THICK",
                                                   lun_name='LUN1',
                                                   stor_pool_id=2, acc_zone_id=1)
    lun_map_id = env_manage_lun_manage.osan.map_lun(s_ip=node_ip1, lun_ids=lun_id, hg_id=hg_id)
    target = env_manage_lun_manage.osan.discover_scsi(client_ip=client_ip1,
                                                      vip=cp("add_vip_address_pool", "vip") + ":3260")
    log.info(target)
    env_manage_lun_manage.osan.iscsi_login(client_ip=client_ip1, iqn=target)

    # 修改vdbench配置文件的参数值
    seekpct = 0  # 随机
    rdpct1 = 0  # 读写比例(0是全写)
    rdpct2 = 50
    xfersize1 = "(4k,20,8k,20,1k,35,10k,25)"
    lun1 = env_manage_lun_manage.osan.ls_scsi_dev(client_ip=client_ip1)
    min_seq_w = env_manage_lun_manage.co2_osan.gen_vdb_xml(lun=lun1, xfersize=xfersize1, seekpct=seekpct, rdpct=rdpct1)
    min_seq_r = env_manage_lun_manage.co2_osan.gen_vdb_xml(maxdata='5G', lun=lun1, xfersize=xfersize1, seekpct=seekpct,
                                                           rdpct=rdpct2)


def run_vdb(arg=1):
    log.info('Run task %s (%s)...' % (arg, os.getpid()))
    env_manage_lun_manage.co2_osan.run_vdb(client_ip=client_ip1, vdb_xml=min_seq_r, output=node_ip1)


def case():
    log.info("step1:生成vdbench配置文件，将逻辑卷映射至主机，并进行读业务...")
    iscsi_login()
    run_vdb()

    log.info("step2:检查主机业务带宽，待稳定后设置QoS带宽值为实际的50%； ...")
    env_manage_lun_manage.co2_env_manage_lun_manage.osan.run_vdb(client_ip=client_ip1, vdb_xml=min_seq_w, jn_jro='jn',
                                                                 output=node_ip1)
    log.info("提交申请后，立即查看主机实际读带宽，带宽值约为实际值的50%（忽略性能波动）")
    log.info("再次修改读带宽值为实际值的75%")


def main():
    env_manage_lun_manage.revert_env()
    error.rel_check_before_run(file_name, jnl_rep=3, free_jnl_num=0, node_num=3)
    env_manage_lun_manage.clean()  # 环境清理
    # prepare_clean.test_prepare(FILE_NAME)  # 环境准备

    case()  # 用例步骤

    common.ckeck_system()  # 检查系统core

    env_manage_lun_manage.clean()  # 环境清理


if __name__ == '__main__':
    common.case_main(main)  # 主函数执行入口