# !/usr/bin/python
# -*-coding:utf-8 -*
"""
测试内容:多访问区创建

步骤:
1）配置节点池设置副本数为3
2）创建存储池，使用全部磁盘
3）通过管理端cli命令创建访问区“pscli --command=create_access_zone --node_ids=1,2,3 --name=accesszone1”

检查项:
1）节点池创建成功
2）存储池创建成功
3）访问区创建成功
"""
import os, sys
import time
import utils_path
import Lun_managerTest
import common
import log
import error
import get_config
import login
import error
import decorator_func
from get_config import config_parser as cp
import env_manage_lun_manage

"""初始化日志和全局变量"""
conf_file = Lun_managerTest.CONF_FILE  # 配置文件路径
file_name = os.path.basename(__file__)
file_name = file_name[:-3]  # 获取本脚本名，去掉.py后缀
log_file_path = log.get_log_path(file_name)  # 获取日志目录，即test_cases/Log/Case_log
log.init(log_file_path, True)  # 初始化日志文件

log.info("---------------全局初始化操作-----------------")
node_ip1 = env_manage_lun_manage.node_ip1
node_ip2 = env_manage_lun_manage.deploy_ips[1]
client_ip1 = env_manage_lun_manage.client_ips[0]
client_ip2 = env_manage_lun_manage.client_ips[1]
esxi_ip = env_manage_lun_manage.Esxi_ips

deploy_ips = get_config.get_env_ip_info(conf_file)  # 获取集群IP列表
client_ips = get_config.get_allclient_ip()  # 获取客户端IP
node_ids_list = env_manage_lun_manage.osan.get_nodes(node_ip1)
node_ids = ",".join('%s' % id for id in node_ids_list)

Lun_osan = Lun_managerTest.oSan()


def case():
    node_pool_id = Lun_osan.create_node_pool(s_ip=node_ip1, node_ids=cp('create_node_pool', 'node_ids'),
                                             replica_num=cp("create_node_pool", "replica_num"),
                                             stripe_width=cp('create_node_pool', 'stripe_width'),
                                             disk_parity_num=cp("create_node_pool", "disk_parity_num"),
                                             node_parity_num=cp("create_node_pool", "node_parity_num"),
                                             name="nodepool1")
    Lun_osan.startup(s_ip=node_ip1)
    stor_id1 = Lun_osan.create_storage_pool(s_ip=node_ip1, node_pool_ids=node_pool_id, name='pool1')
    Lun_osan.update_param(s_ip=node_ip1, section='MGR', name='mgcd_auto_mount_flag', current='0')  # 解除自动挂载

    az_id = Lun_osan.create_access_zone(s_ip=deploy_ips[0], node_id=node_ids_list[0], name='accesszonetest1')
    az_id2 = Lun_osan.create_access_zone(s_ip=deploy_ips[0], node_id=node_ids_list[1], name='accesszonetest2')
    sub_id = Lun_osan.create_subnet(s_ip=node_ip1, access_zone_id=az_id, name='subnet1',
                                    sv_ip=cp("create_subnet", "sv_ip"),
                                    mask=cp("create_subnet", "mask"),
                                    vv_ip=cp("create_subnet", "vv_ip"),
                                    gate_way=cp("create_subnet", "gate_way"),
                                    network_interface=cp("create_subnet", "network_interface"))
    Lun_osan.add_vip_address_pool(s_ip=node_ip1, subnet_id=sub_id,
                                  domain_name=cp("add_vip_address_pool", "domain_name"),
                                  vip=cp("add_vip_address_pool", "vips"))

    sub_id2 = Lun_osan.create_subnet(s_ip=node_ip2, access_zone_id=az_id2, name='subnet2',
                                     sv_ip="10.1.1.112",
                                     mask=cp("create_subnet", "mask"),
                                     vv_ip="10.1.1.21",
                                     gate_way=cp("create_subnet", "gate_way"),
                                     network_interface=cp("create_subnet", "network_interface"))
    Lun_osan.add_vip_address_pool(s_ip=node_ip2, subnet_id=sub_id2,
                                  domain_name=cp("add_vip_address_pool", "domain_name"),
                                  vip="10.1.1.118-120")

    Lun_osan.enable_san(s_ip=node_ip1, access_zone_id=az_id)
    Lun_osan.enable_san(s_ip=node_ip1, access_zone_id=az_id2)
    hg_id1 = Lun_osan.create_host_group(s_ip=node_ip1, hg_name="hg_1")
    hg_id2 = Lun_osan.create_host_group(s_ip=node_ip1, hg_name="hg_2")
    h_id1 = Lun_osan.add_host(s_ip=node_ip1, h_name="h_1", hg_id=hg_id1)
    h_id2 = Lun_osan.add_host(s_ip=node_ip1, h_name="h_2", hg_id=hg_id2)
    ini_id1 = Lun_osan.add_initiator(s_ip=node_ip1, h_id=h_id1, iqn=cp('add_initiator', 'iqn'),
                                     alias=cp('add_initiator', 'alias'))
    Lun_osan.update_iscsid_conf(cli_ip=client_ip1, CHAPTYPE='None', s_ip=client_ip1)
    ini_id2 = Lun_osan.add_initiator(s_ip=node_ip1, h_id=h_id2, iqn=cp('add_initiator', 'iqn1'),
                                     alias=cp('add_initiator', 'alias1'))
    for i in range(1):
        lun_id = Lun_osan.create_lun(s_ip=deploy_ips[0], lun_type="THIN",
                                     lun_name='LUN{}'.format(i),
                                     stor_pool_id=stor_id1, acc_zone_id=az_id, stripe_width=3)
        log.info(lun_id)
        decorator_func.judge_target(
            Lun_osan.get_option_single(s_ip=deploy_ips[0], command="get_luns", indexname="luns"
                                       , argv2="name", ids="ids", argv1=lun_id),
            'LUN{}'.format(i))

    lun = Lun_osan.get_lun(s_ip=node_ip1)
    for i in lun:
        Lun_osan.map_lun(s_ip=node_ip1, lun_ids=i, hg_id=hg_id1)


def main():
    env_manage_lun_manage.revert_env()
    # error.rel_check_before_run(file_name, jnl_rep=3, free_jnl_num=0, node_num=3)
    env_manage_lun_manage.clean_for_access_zone()
    case()  # 用例步骤
    common.ckeck_system()  # 检查系统状态
    env_manage_lun_manage.clean_for_access_zone()


if __name__ == '__main__':
    main()
