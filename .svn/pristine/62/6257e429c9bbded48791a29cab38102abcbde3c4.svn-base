#!/usr/bin/python
# -*- encoding=utf8 -*-

#######################################################
# 脚本作者：鲍若冰
# 脚本说明：工具使用脚本
#######################################################

import os
import log
import get_config
import common
import re
import sys
import datetime


class Vdbenchrun():
    """
    运行vdbench

    run_create:      创建文件，并生成校验文件
    run_write:       修改文件
    run_write_jn:    修改文件，并生成校验文件
    run_check:       校验数据正确性
    run_check_write: 校验数据正确性，然后跑一定时间的读写
    """
    def __init__(self, depth=None, width=None, files=None, size=None, threads=None, xfersize=None, elapsed=None):
        """
        :author:         baoruobing
        :date  :         2018.04.17
        :description:    创建vdbench对象
        :param depth:    目录深度，默认2
        :param width:    目录宽度，默认2
        :param files:    单个目录中文件数目，默认100
        :param size:     文件大小，默认(512k,30,2m,35,4m,30,32m,5)
        :param threads:  线程数，默认100
        :param xfersize: 单次读取大小，默认(4k,50,64k,30,1m,20)
        :param elapsed:  写的时间，默认240s
        """
        self.depth = 2 if depth is None else depth
        self.width = 2 if width is None else width
        self.files = 100 if files is None else files
        self.size = "(1m,30,4m,35,8m,30,32m,5)" if size is None else size
        # self.size = "(64k,30,128k,35,256k,30,1m,5)" if size == None else size
        self.threads = 100 if threads is None else threads
        self.xfersize = "(4k,50,64k,30,1m,20)" if xfersize is None else xfersize
        self.elapsed = 240 if elapsed is None else elapsed

        self.openflags = None

        self.vdbench_path = get_config.get_snap_vdbench_path()
        self.tool_path = get_config.get_tools_path()
        current_time = datetime.datetime.now()
        currenttime = current_time.strftime('%y-%m-%d-%H-%M-%S')
        self.outputpath_tail = currenttime + '_' + os.path.splitext(os.path.basename(sys.argv[0]))[0]
        self.vdbench_log_path = os.path.join(os.path.dirname(get_config.get_testlog_path()), 'vdbench_log')

        return

    def run_create(self, anchor_path, journal_path, *args):
        """
        :author:             baoruobing
        :date  :             2018.04.17
        :description:        运行vdbench_create创建文件
        :param anchor_path:  数据读写的路径
        :param journal_path: 校验文件创建的路径
        :param args:         运行vdbench的ip
        :return:
        """
        self.anchor_path = anchor_path
        self.journal_path = journal_path
        """
        if 0 == len(args):
            raise Exception("please input client ip")
        """
        self.system_ips = args
        """生成配置create文件"""
        self._set_create_file()

        create_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'create')
        vdbench_ex_path = os.path.join(self.vdbench_path, 'vdbench')
        vdbench_output_path = os.path.join(self.vdbench_log_path, self.outputpath_tail, 'create')
        cmd = 'mkdir -p %s' % vdbench_output_path
        rc = common.command(cmd)
        common.judge_rc(rc, 0, "cmd:%s failed" % cmd)
        cmd = "sh %s -f %s -o %s -jn" % (vdbench_ex_path, create_file_name, vdbench_output_path)
        rc = common.command(cmd)
        return rc

    def run_create_nv(self, anchor_path, *args):
        """
        :author:             wanggl
        :date  :             2018.07.28
        :description:        运行vdbench_create_nv 创建文件,不带校验
        :param anchor_path:  数据读写的路径
        :param journal_path: 校验文件创建的路径
        :param args:         运行vdbench的ip
        :return:
        """
        self.anchor_path = anchor_path
        if 0 == len(args):
            raise Exception("please input client ip")
        self.system_ips = args
        """生成配置create文件"""
        self._set_create_file_mul()

        create_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'create')
        vdbench_ex_path = os.path.join(self.vdbench_path, 'vdbench')
        vdbench_output_path = os.path.join(self.vdbench_log_path, self.outputpath_tail, 'create')
        cmd = 'mkdir -p %s' % vdbench_output_path
        rc = common.command(cmd)
        common.judge_rc(rc, 0, "cmd:%s failed" % cmd)
        cmd = "sh %s -f %s -o %s " % (vdbench_ex_path, create_file_name, vdbench_output_path)
        rc = common.command(cmd)
        return rc

    def run_write(self, anchor_path, *args):
        """
        :author:             baoruobing
        :date  :             2018.04.17
        :description:        运行vdbench_write修改文件
        :param anchor_path:  数据读写的路径
        :param args:         运行vdbench的ip
        :return:
        """
        self.anchor_path = anchor_path
        if 0 == len(args):
            raise Exception("please input client ip")
        self.system_ips = args
        self.openflags = None
        """生成配置write文件"""
        self._set_write_file()

        write_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'write')
        vdbench_ex_path = os.path.join(self.vdbench_path, 'vdbench')
        vdbench_output_path = os.path.join(self.vdbench_log_path, self.outputpath_tail, 'write')
        cmd = 'mkdir -p %s' % vdbench_output_path
        rc = common.command(cmd)
        common.judge_rc(rc, 0, "cmd:%s failed" % cmd)
        cmd = "sh %s -f %s -o %s" % (vdbench_ex_path, write_file_name, vdbench_output_path)
        rc = common.command(cmd)
        return rc

    def run_write_jn(self, anchor_path, journal_path, *args):
        """
        :author:             baoruobing
        :date  :             2018.04.17
        :description:        运行vdbench_write_jn修改文件
        :param anchor_path:  数据读写的路径
        :param journal_path: 校验文件创建的路径
        :param args:         运行vdbench的ip
        :return:
        """
        self.anchor_path = anchor_path
        self.journal_path = journal_path
        if 0 == len(args):
            raise Exception("please input client ip")
        self.system_ips = args
        """生成配置write_jn文件"""
        self._set_write_jn_file()

        write_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'write_jn')
        vdbench_ex_path = os.path.join(self.vdbench_path, 'vdbench')
        vdbench_output_path = os.path.join(self.vdbench_log_path, self.outputpath_tail, 'write_jn')
        cmd = 'mkdir -p %s' % vdbench_output_path
        rc = common.command(cmd)
        common.judge_rc(rc, 0, "cmd:%s failed" % cmd)
        cmd = "sh %s -f %s -o %s -jn" % (vdbench_ex_path, write_file_name, vdbench_output_path)
        rc = common.command(cmd)
        return rc

    def run_write_dio(self, anchor_path, *args):
        """
        :author:             baoruobing
        :date  :             2018.04.17
        :description:        运行vdbench_write修改文件
        :param anchor_path:  数据读写的路径
        :param args:         运行vdbench的ip
        :return:
        """
        self.anchor_path = anchor_path
        if 0 == len(args):
            raise Exception("please input client ip")
        self.system_ips = args
        self.openflags = 'o_direct'
        """生成配置write文件"""
        self._set_write_file()

        write_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'write')
        vdbench_ex_path = os.path.join(self.vdbench_path, 'vdbench')
        vdbench_output_path = os.path.join(self.vdbench_log_path, self.outputpath_tail, 'write')
        cmd = 'mkdir -p %s' % vdbench_output_path
        rc = common.command(cmd)
        common.judge_rc(rc, 0, "cmd:%s failed" % cmd)
        cmd = "sh %s -f %s -o %s" % (vdbench_ex_path, write_file_name, vdbench_output_path)
        rc = common.command(cmd)
        return rc

    def run_check(self, anchor_path, journal_path, *args):
        """
        :author:             baoruobing
        :date  :             2018.04.17
        :description:        运行vdbench_check校验文件
        :param anchor_path:  数据读写的路径
        :param journal_path: 校验文件创建的路径
        :param args:         运行vdbench的ip
        :return:
        """
        self.anchor_path = anchor_path
        self.journal_path = journal_path
        if 0 == len(args):
            raise Exception("please input client ip")
        self.system_ips = args
        """生成配置check文件"""
        self._set_check_file()

        check_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'check')
        vdbench_ex_path = os.path.join(self.vdbench_path, 'vdbench')
        vdbench_output_path = os.path.join(self.vdbench_log_path, self.outputpath_tail, 'check')
        cmd = 'mkdir -p %s' % vdbench_output_path
        rc = common.command(cmd)
        common.judge_rc(rc, 0, "cmd:%s failed" % cmd)
        cmd = "sh %s -f %s -o %s -jro" % (vdbench_ex_path, check_file_name, vdbench_output_path)
        rc = common.command(cmd)
        return rc

    def run_check_write(self, anchor_path, journal_path, *args):
        """
        :author:             baoruobing
        :date  :             2018.04.17
        :description:        运行vdbench_check_write校验文件然后跑压力
        :param anchor_path:  数据读写的路径
        :param journal_path: 校验文件创建的路径
        :param args:         运行vdbench的ip
        :return:
        """
        self.anchor_path = anchor_path
        self.journal_path = journal_path
        if 0 == len(args):
            raise Exception("please input client ip")
        self.system_ips = args
        """生成配置check_write文件"""
        self._set_check_write_file()

        check_write_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'check_write')
        vdbench_ex_path = os.path.join(self.vdbench_path, 'vdbench')
        vdbench_output_path = os.path.join(self.vdbench_log_path, self.outputpath_tail, 'check_write')
        cmd = 'mkdir -p %s' % vdbench_output_path
        rc = common.command(cmd)
        common.judge_rc(rc, 0, "cmd:%s failed" % cmd)
        cmd = "sh %s -f %s -o %s -jr" % (vdbench_ex_path, check_write_file_name, vdbench_output_path)
        rc = common.command(cmd)
        return rc

    def run_stress_no_jnl(self, anchor_path, *args):
        """
        :author:             baoruobing
        :date  :             2018.04.17
        :description:        运行run_stress_no_jnl跑压力
        :param anchor_path:  数据读写的路径
        :param args:         运行vdbench的ip
        :return:
        """
        self.anchor_path = anchor_path
        if 0 == len(args):
            raise Exception("please input client ip")
        self.system_ips = args
        """生成配置stress_no_jnl文件"""
        self._set_stress_no_jnl()

        check_write_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'stress_no_jnl')
        vdbench_ex_path = os.path.join(self.vdbench_path, 'vdbench')
        vdbench_output_path = os.path.join(self.vdbench_log_path, self.outputpath_tail, 'stress_no_jnl')
        cmd = 'mkdir -p %s' % vdbench_output_path
        rc = common.command(cmd)
        common.judge_rc(rc, 0, "cmd:%s failed" % cmd)
        cmd = "sh %s -f %s -o %s" % (vdbench_ex_path, check_write_file_name, vdbench_output_path)
        rc = common.command(cmd)
        return rc

    def run_clean(self, anchor_path, *args):
        """
        :author:              chenjy1
        :date  :              2018.08.15
        :description:         运行vdbench删除文件
        :param anchor_path:  数据读写的路径
        :param args:         运行vdbench的ip
        :return:
        """
        self.anchor_path = anchor_path
        if 0 == len(args):
            raise Exception("please input client ip")
        self.system_ips = args
        """生成配置clean文件"""
        self._set_clean_file()

        clean_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'clean')
        vdbench_ex_path = os.path.join(self.vdbench_path, 'vdbench')
        vdbench_output_path = os.path.join(self.vdbench_log_path, self.outputpath_tail, 'clean')
        cmd = 'mkdir -p %s' % vdbench_output_path
        rc = common.command(cmd)
        common.judge_rc(rc, 0, "cmd:%s failed" % cmd)
        cmd = "sh %s -f %s -o %s" % (vdbench_ex_path, clean_file_name, vdbench_output_path)
        rc = common.command(cmd)
        return rc

    def run_create_mulpath_diff(self, anchor_path_lst, journal_path_lst, client_lst, file_struct_lst, fsd_index=None):
        """
        :author:             chenjy1
        :date  :             2018.08.31
        :description:        运行vdbench_create创建文件 对多个路径创建，且每个路径文件结构不一样
        :param anchor_path:  数据读写的路径
        :param journal_path: 校验文件创建的路径
        :param file_struct_lst: 文件结构列表 形式: [[深度,宽度,文件数,大小],[深度,宽度,文件数,大小]......]
        :param args:         运行vdbench的ip
        :return:
        """

        common.judge_rc_unequal(len(client_lst), 0, "please input client ip")
        common.judge_rc_unequal(len(anchor_path_lst), 0, "please input anchor path")
        common.judge_rc_unequal(len(journal_path_lst), 0, "please input journal path")
        common.judge_rc_unequal(len(file_struct_lst), 0, "please input file_struct_lst path")

        self.anchor_path = anchor_path_lst
        self.journal_path = journal_path_lst
        self.system_ips = client_lst
        self.file_struct = file_struct_lst
        """生成配置create文件"""
        self._set_create_mulpath_diff_file(fsd_index = fsd_index)

        create_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'create_mulpath_diff')
        vdbench_ex_path = os.path.join(self.vdbench_path, 'vdbench')
        vdbench_output_path = os.path.join(self.vdbench_log_path, self.outputpath_tail, 'create_mulpath_diff')
        cmd = 'mkdir -p %s' % vdbench_output_path
        rc = common.command(cmd)
        common.judge_rc(rc, 0, "cmd:%s failed" % cmd)
        cmd = "sh %s -f %s -o %s" % (vdbench_ex_path, create_file_name, vdbench_output_path)
        rc = common.command(cmd)
        return rc

    def run_create_mulpath(self, anchor_path_lst, journal_path_lst, client_lst):
        """
        :author:             chenjy1
        :date  :             2018.08.22
        :description:        运行vdbench_create创建文件 对多个路径创建
        :param anchor_path:  数据读写的路径
        :param journal_path: 校验文件创建的路径
        :param args:         运行vdbench的ip
        :return:
        """

        common.judge_rc_unequal(len(client_lst), 0, "please input client ip")
        common.judge_rc_unequal(len(anchor_path_lst), 0, "please input anchor path")
        common.judge_rc_unequal(len(journal_path_lst), 0, "please input journal path")

        self.anchor_path = anchor_path_lst
        self.journal_path = journal_path_lst
        self.system_ips = client_lst
        """生成配置create文件"""
        self._set_create_mulpath_file()

        create_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'create_mulpath')
        vdbench_ex_path = os.path.join(self.vdbench_path, 'vdbench')
        vdbench_output_path = os.path.join(self.vdbench_log_path, self.outputpath_tail, 'create_mulpath')
        cmd = 'mkdir -p %s' % vdbench_output_path
        rc = common.command(cmd)
        common.judge_rc(rc, 0, "cmd:%s failed" % cmd)
        cmd = "sh %s -f %s -o %s -jn" % (vdbench_ex_path, create_file_name, vdbench_output_path)
        rc = common.command(cmd)
        return rc

    def run_change_one_fsd(self, anchor_path_lst, journal_path_lst, client_lst, file_struct_lst, fsd_index):
        """
        :author:             chenjy1
        :date  :             2018.08.31
        :description:        运行vdbench_create创建文件 对多个路径创建，且每个路径文件结构不一样
        :param anchor_path:  数据读写的路径
        :param journal_path: 校验文件创建的路径
        :param file_struct_lst: 文件结构列表 形式: [[深度,宽度,文件数,大小],[深度,宽度,文件数,大小]......]
        :param args:         运行vdbench的ip
        :return:
        """

        common.judge_rc_unequal(len(client_lst), 0, "please input client ip")
        common.judge_rc_unequal(len(anchor_path_lst), 0, "please input anchor path")
        common.judge_rc_unequal(len(journal_path_lst), 0, "please input journal path")
        common.judge_rc_unequal(len(file_struct_lst), 0, "please input file_struct_lst path")

        self.anchor_path = anchor_path_lst
        self.journal_path = journal_path_lst
        self.system_ips = client_lst
        self.file_struct = file_struct_lst
        self.fsd_index = fsd_index
        """生成配置create文件"""
        self._set_change_one_fsd()

        create_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'change_one_fsd')
        vdbench_ex_path = os.path.join(self.vdbench_path, 'vdbench')
        vdbench_output_path = os.path.join(self.vdbench_log_path, self.outputpath_tail, 'change_one_fsd')
        cmd = 'mkdir -p %s' % vdbench_output_path
        rc = common.command(cmd)
        common.judge_rc(rc, 0, "cmd:%s failed" % cmd)
        cmd = "sh %s -f %s -o %s" % (vdbench_ex_path, create_file_name, vdbench_output_path)
        rc = common.command(cmd)
        return rc

    def run_check_write_mulpath(self, anchor_path_lst, journal_path_lst, client_lst):
        """
        :author:             chenjy1
        :date  :             2018.08.22
        :description:        运行vdbench_check_write校验文件然后跑压力
        :param anchor_path:  数据读写的路径
        :param journal_path: 校验文件创建的路径
        :param args:         运行vdbench的ip
        :return:
        """
        common.judge_rc_unequal(len(client_lst), 0, "please input client ip")
        common.judge_rc_unequal(len(anchor_path_lst), 0, "please input anchor path")
        common.judge_rc_unequal(len(journal_path_lst), 0, "please input journal path")

        self.anchor_path = anchor_path_lst
        self.journal_path = journal_path_lst
        self.system_ips = client_lst
        """生成配置check_write文件"""
        self._set_check_write_mulpath_file()

        check_write_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'check_write_mulpath')
        vdbench_ex_path = os.path.join(self.vdbench_path, 'vdbench')
        vdbench_output_path = os.path.join(self.vdbench_log_path, self.outputpath_tail, 'check_write_mulpath')
        cmd = 'mkdir -p %s' % vdbench_output_path
        rc = common.command(cmd)
        common.judge_rc(rc, 0, "cmd:%s failed" % cmd)
        cmd = "sh %s -f %s -o %s -jn" % (vdbench_ex_path, check_write_file_name, vdbench_output_path)
        rc = common.command(cmd)
        return rc


    def run_create_mulpath_diff_snap_size(self, anchor_path_lst, journal_path_lst, client_lst, file_struct_lst):
        """
        :author:             chenjy1
        :date  :             2018.08.31
        :description:        运行vdbench_create创建文件 对多个路径创建，且每个路径文件结构不一样
        :param anchor_path:  数据读写的路径
        :param journal_path: 校验文件创建的路径
        :param file_struct_lst: 文件结构列表 形式: [[深度,宽度,文件数,大小],[深度,宽度,文件数,大小]......]
        :param args:         运行vdbench的ip
        :return:
        """

        common.judge_rc_unequal(len(client_lst), 0, "please input client ip")
        common.judge_rc_unequal(len(anchor_path_lst), 0, "please input anchor path")
        common.judge_rc_unequal(len(journal_path_lst), 0, "please input journal path")
        common.judge_rc_unequal(len(file_struct_lst), 0, "please input file_struct_lst path")

        self.anchor_path = anchor_path_lst
        self.journal_path = journal_path_lst
        self.system_ips = client_lst
        self.file_struct = file_struct_lst
        """生成配置create文件"""
        self._set_create_mulpath_diff_file_snap_size()

        create_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'create_mulpath_diff')
        vdbench_ex_path = os.path.join(self.vdbench_path, 'vdbench')
        vdbench_output_path = os.path.join(self.vdbench_log_path, self.outputpath_tail, 'create_mulpath_diff')
        cmd = 'mkdir -p %s' % vdbench_output_path
        rc = common.command(cmd)
        common.judge_rc(rc, 0, "cmd:%s failed" % cmd)
        cmd = "sh %s -f %s -o %s" % (vdbench_ex_path, create_file_name, vdbench_output_path)
        rc = common.command(cmd)
        return rc

    def run_clean_one_fsd_snapsize(self, anchor_path_lst, journal_path_lst, client_lst, file_struct_lst, fsd_index):
        """
        :author:             chenjy1
        :date  :             2018.08.31
        :description:        运行vdbench_create创建文件 对多个路径创建，且每个路径文件结构不一样
        :param anchor_path:  数据读写的路径
        :param journal_path: 校验文件创建的路径
        :param file_struct_lst: 文件结构列表 形式: [[深度,宽度,文件数,大小],[深度,宽度,文件数,大小]......]
        :param args:         运行vdbench的ip
        :return:
        """

        common.judge_rc_unequal(len(client_lst), 0, "please input client ip")
        common.judge_rc_unequal(len(anchor_path_lst), 0, "please input anchor path")
        common.judge_rc_unequal(len(journal_path_lst), 0, "please input journal path")
        common.judge_rc_unequal(len(file_struct_lst), 0, "please input file_struct_lst path")

        self.anchor_path = anchor_path_lst
        self.journal_path = journal_path_lst
        self.system_ips = client_lst
        self.file_struct = file_struct_lst
        self.fsd_index = fsd_index
        """生成配置create文件"""
        self._set_clean_one_fsd_snapsize()

        create_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'clean_one_fsd_snapsize')
        vdbench_ex_path = os.path.join(self.vdbench_path, 'vdbench')
        vdbench_output_path = os.path.join(self.vdbench_log_path, self.outputpath_tail, 'clean_one_fsd_snapsize')
        cmd = 'mkdir -p %s' % vdbench_output_path
        rc = common.command(cmd)
        common.judge_rc(rc, 0, "cmd:%s failed" % cmd)
        cmd = "sh %s -f %s -o %s" % (vdbench_ex_path, create_file_name, vdbench_output_path)
        rc = common.command(cmd)
        return rc

    def _set_create_file(self):
        """
        :author:      baoruobing
        :date  :      2018.04.17
        :description: 生成create配置文件
        :return:
        """
        file_content_lst = []
        """hd部分"""
        line_str = "hd=default,vdbench=%s,shell=ssh,user=root" % self.vdbench_path
        file_content_lst.append(line_str)

        if self.system_ips == ():
            line_str = "hd=h1,system=localhost"
            file_content_lst.append(line_str)
        else:
            i = 0
            for system_ip in self.system_ips:
                i += 1
                line_str = "hd=h%d,system=%s" % (i, system_ip)
                file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """fsd部分"""
        line_str = "fsd=default,depth=%d,width=%d,files=%d,size=%s,shared=yes" \
                   % (self.depth, self.width, self.files, self.size)
        file_content_lst.append(line_str)

        line_str = "fsd=fsd1,anchor=%s,journal=%s" % (self.anchor_path, self.journal_path)
        file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """fwd部分"""
        line_str = "fwd=default,threads=%d,xfersize=%s" % (self.threads, self.xfersize)
        file_content_lst.append(line_str)

        if self.system_ips == ():
            line_str = "fwd=fwd1,fsd=fsd1,hd=h1"
            file_content_lst.append(line_str)
        else:
            for i in range(len(self.system_ips)):
                i += 1
                line_str = "fwd=fwd%d,fsd=fsd1,hd=h%d" % (i, i)
                file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """rd部分"""
        line_str = "rd=default,fwdrate=max,elapsed=%d,interval=1,warmup=10,pause=5" % self.elapsed
        file_content_lst.append(line_str)
        line_str = "rd=rd1,fwd=fwd*,format=(clean)"
        file_content_lst.append(line_str)
        line_str = "rd=rd2,fwd=fwd*,format=(restart,only)"
        file_content_lst.append(line_str)

        """写入配置文件"""
        file_content = '\n'.join(file_content_lst)

        create_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'create')
        with open(create_file_name, 'w') as f:
            f.write(file_content)
        return

    def _set_create_file_mul(self):
        """
        :author:      wanggl
        :date  :      2018.04.17
        :description: 生成create配置文件,fsd部分不要shared，fwd部分增加fileio使得多线程操作一个文件不冲突
        :return:
        """
        file_content_lst = []
        """hd部分"""
        line_str = "hd=default,vdbench=%s,shell=ssh,user=root" % self.vdbench_path
        file_content_lst.append(line_str)

        i = 0
        for system_ip in self.system_ips:
            i += 1
            line_str = "hd=h%d,system=%s" % (i, system_ip)
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """fsd部分"""
        line_str = "fsd=default,depth=%d,width=%d,files=%d,size=%s" \
                   % (self.depth, self.width, self.files, self.size)
        file_content_lst.append(line_str)

        line_str = "fsd=fsd1,anchor=%s,journal=%s" % (self.anchor_path, self.journal_path)
        file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """fwd部分"""
        line_str = "fwd=default,threads=%d,xfersize=%s,fileio=(random,shared)" % (self.threads, self.xfersize)
        file_content_lst.append(line_str)

        for i in range(len(self.system_ips)):
            i += 1
            line_str = "fwd=fwd%d,fsd=fsd1,hd=h%d" % (i, i)
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """rd部分"""
        line_str = "rd=default,fwdrate=max,elapsed=%d,interval=1,warmup=10,pause=5" % self.elapsed
        file_content_lst.append(line_str)
        line_str = "rd=rd1,fwd=fwd*,format=(clean)"
        file_content_lst.append(line_str)
        line_str = "rd=rd2,fwd=fwd*,format=(restart,only)"
        file_content_lst.append(line_str)

        """写入配置文件"""
        file_content = '\n'.join(file_content_lst)

        create_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'create')
        with open(create_file_name, 'w') as f:
            f.write(file_content)
        return

    def _set_write_file(self):
        """
        :author:      baoruobing
        :date  :      2018.04.17
        :description: 生成write配置文件
        :return:
        """
        file_content_lst = []
        """hd部分"""
        line_str = "hd=default,vdbench=%s,shell=ssh,user=root" % self.vdbench_path
        file_content_lst.append(line_str)

        i = 0
        for system_ip in self.system_ips:
            i += 1
            line_str = "hd=h%d,system=%s" % (i, system_ip)
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """fsd部分"""
        line_str = "fsd=default,depth=%d,width=%d,files=%d,size=%s,shared=yes" \
                   % (self.depth, self.width, self.files, self.size)
        file_content_lst.append(line_str)

        line_str = "fsd=fsd1,anchor=%s" % (self.anchor_path)
        file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """fwd部分"""
        line_str = "fwd=default,threads=%d,xfersize=%s" % (self.threads, self.xfersize)
        file_content_lst.append(line_str)

        for i in range(len(self.system_ips)):
            i += 1
            line_str = "fwd=fwd%d,fsd=fsd1,hd=h%d,operation=write" % (i, i)
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """rd部分"""
        line_str = "rd=default,fwdrate=max,elapsed=%d,interval=1,warmup=1,pause=2" % self.elapsed
        file_content_lst.append(line_str)
        if self.openflags is None:
            line_str = "rd=rd1,fwd=fwd*,format=no"
        else:
            line_str = "rd=rd1,fwd=fwd*,format=no,openflags=o_direct"
        file_content_lst.append(line_str)

        """写入配置文件"""
        file_content = '\n'.join(file_content_lst)

        create_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'write')
        with open(create_file_name, 'w') as f:
            f.write(file_content)
        return

    def _set_write_jn_file(self):
        """
        :author:      baoruobing
        :date  :      2018.04.17
        :description: 生成write_jn配置文件
        :return:
        """
        file_content_lst = []
        """hd部分"""
        line_str = "hd=default,vdbench=%s,shell=ssh,user=root" % self.vdbench_path
        file_content_lst.append(line_str)

        i = 0
        for system_ip in self.system_ips:
            i += 1
            line_str = "hd=h%d,system=%s" % (i, system_ip)
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """fsd部分"""
        line_str = "fsd=default,depth=%d,width=%d,files=%d,size=%s,shared=yes" \
                   % (self.depth, self.width, self.files, self.size)
        file_content_lst.append(line_str)

        line_str = "fsd=fsd1,anchor=%s,journal=%s" % (self.anchor_path, self.journal_path)
        file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """fwd部分"""
        line_str = "fwd=default,threads=%d,xfersize=%s" % (self.threads, self.xfersize)
        file_content_lst.append(line_str)

        for i in range(len(self.system_ips)):
            i += 1
            line_str = "fwd=fwd%d,fsd=fsd1,hd=h%d,operation=write" % (i, i)
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """rd部分"""
        line_str = "rd=default,fwdrate=max,elapsed=%d,interval=1,warmup=10,pause=50" % self.elapsed
        file_content_lst.append(line_str)
        line_str = "rd=rd1,fwd=fwd*,format=no"
        file_content_lst.append(line_str)

        """写入配置文件"""
        file_content = '\n'.join(file_content_lst)

        create_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'write_jn')
        with open(create_file_name, 'w') as f:
            f.write(file_content)
        return

    def _set_check_file(self):
        """
        :author:      baoruobing
        :date  :      2018.04.17
        :description: 生成check配置文件
        :return:
        """
        file_content_lst = []

        """data_errors部分"""
        line_str = "data_errors=1"
        file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """hd部分"""
        line_str = "hd=default,vdbench=%s,shell=ssh,user=root" % self.vdbench_path
        file_content_lst.append(line_str)

        i = 0
        for system_ip in self.system_ips:
            i += 1
            line_str = "hd=h%d,system=%s" % (i, system_ip)
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """fsd部分"""
        line_str = "fsd=default,depth=%d,width=%d,files=%d,size=%s,shared=yes" \
                   % (self.depth, self.width, self.files, self.size)
        file_content_lst.append(line_str)

        line_str = "fsd=fsd1,anchor=%s,journal=%s" % (self.anchor_path, self.journal_path)
        file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """fwd部分"""
        line_str = "fwd=default,threads=%d,xfersize=%s" % (self.threads, self.xfersize)
        file_content_lst.append(line_str)

        for i in range(len(self.system_ips)):
            i += 1
            line_str = "fwd=fwd%d,fsd=fsd1,hd=h%d" % (i, i)
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """rd部分"""
        line_str = "rd=default,fwdrate=max,elapsed=30,interval=1,warmup=10,pause=5"
        file_content_lst.append(line_str)
        line_str = "rd=rd1,fwd=fwd*,format=no"
        file_content_lst.append(line_str)

        """写入配置文件"""
        file_content = '\n'.join(file_content_lst)

        create_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'check')
        with open(create_file_name, 'w') as f:
            f.write(file_content)
        return

    def _set_check_write_file(self):
        """
        :author:      baoruobing
        :date  :      2018.04.17
        :description: 生成check_write配置文件
        :return:
        """
        file_content_lst = []
        """hd部分"""
        line_str = "hd=default,vdbench=%s,shell=ssh,user=root" % self.vdbench_path
        file_content_lst.append(line_str)

        i = 0
        for system_ip in self.system_ips:
            i += 1
            line_str = "hd=h%d,system=%s" % (i, system_ip)
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """fsd部分"""
        line_str = "fsd=default,depth=%d,width=%d,files=%d,size=%s,shared=yes" \
                   % (self.depth, self.width, self.files, self.size)
        file_content_lst.append(line_str)

        line_str = "fsd=fsd1,anchor=%s,journal=%s" % (self.anchor_path, self.journal_path)
        file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """fwd部分"""
        line_str = "fwd=default,threads=%d,xfersize=%s" % (self.threads, self.xfersize)
        file_content_lst.append(line_str)

        for i in range(len(self.system_ips)):
            i += 1
            line_str = "fwd=fwd%d,fsd=fsd1,hd=h%d" % (i, i)
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """rd部分"""
        # line_str = "rd=default,fwdrate=max,elapsed=%d,maxdata=20g,interval=1,warmup=10,pause=5" % self.elapsed
        line_str = "rd=default,fwdrate=max,elapsed=%d,interval=1,warmup=10,pause=5" % self.elapsed
        file_content_lst.append(line_str)
        line_str = "rd=rd1,fwd=fwd*,format=no,forrdpct=50,forseekpct=50,foroperations=(getattr)"
        file_content_lst.append(line_str)
        line_str = "rd=rd2,fwd=fwd*,format=no,forrdpct=50,forseekpct=50,openflags=o_sync,foroperations=(setattr)"
        # file_content_lst.append(line_str)
        line_str = "rd=rd3,fwd=fwd*,format=no,forrdpct=50,forseekpct=50,openflags=o_direct,foroperations=(getattr)"
        # file_content_lst.append(line_str)

        """写入配置文件"""
        file_content = '\n'.join(file_content_lst)

        create_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'check_write')
        with open(create_file_name, 'w') as f:
            f.write(file_content)
        return

    def _set_stress_no_jnl(self):
        """
        :author:      baoruobing
        :date  :      2018.04.17
        :description: 生成stress_no_jnl配置文件
        :return:
        """
        file_content_lst = []
        """hd部分"""
        line_str = "hd=default,vdbench=%s,shell=ssh,user=root" % self.vdbench_path
        file_content_lst.append(line_str)

        i = 0
        for system_ip in self.system_ips:
            i += 1
            line_str = "hd=h%d,system=%s" % (i, system_ip)
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """fsd部分"""
        line_str = "fsd=default,depth=%d,width=%d,files=%d,size=%s" \
                   % (self.depth, self.width, self.files, self.size)
        file_content_lst.append(line_str)

        for i in range(len(self.system_ips)):
            i += 1
            line_str = "fsd=fsd%d,anchor=%s" % (i, self.anchor_path)
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """fwd部分"""
        line_str = "fwd=default,threads=%d,xfersize=%s" % (self.threads, self.xfersize)
        file_content_lst.append(line_str)

        for i in range(len(self.system_ips)):
            i += 1
            line_str = "fwd=fwd%d,fsd=fsd%d,hd=h%d" % (i, i, i)
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """rd部分"""
        line_str = "rd=default,fwdrate=max,elapsed=%d,interval=1,warmup=20,pause=20" % self.elapsed
        file_content_lst.append(line_str)
        line_str = "rd=rd1,fwd=fwd*,format=only"
        file_content_lst.append(line_str)
        line_str = "rd=rd2,fwd=fwd*,format=no,forrdpct=50,forseekpct=50,foroperations=(getattr)"
        file_content_lst.append(line_str)
        line_str = "rd=rd3,fwd=fwd*,format=no,forrdpct=50,forseekpct=50,openflags=o_sync,foroperations=(setattr)"
        file_content_lst.append(line_str)
        line_str = "rd=rd4,fwd=fwd*,format=no,forrdpct=50,forseekpct=50,openflags=o_direct,foroperations=(getattr)"
        file_content_lst.append(line_str)
        line_str = "rd=rd5,fwd=fwd*,format=clean"
        file_content_lst.append(line_str)

        """写入配置文件"""
        file_content = '\n'.join(file_content_lst)

        create_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'stress_no_jnl')
        with open(create_file_name, 'w') as f:
            f.write(file_content)
        return

    def _set_clean_file(self):
        """
        :author:      chenjy1
        :date  :      2018.08.15
        :description: 生成clean配置文件
        :return:
        """
        file_content_lst = []
        """hd部分"""
        line_str = "hd=default,vdbench=%s,shell=ssh,user=root" % self.vdbench_path
        file_content_lst.append(line_str)

        i = 0
        for system_ip in self.system_ips:
            i += 1
            line_str = "hd=h%d,system=%s" % (i, system_ip)
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """fsd部分"""
        line_str = "fsd=default,depth=%d,width=%d,files=%d,size=%s,shared=yes" \
                   % (self.depth, self.width, self.files, self.size)
        file_content_lst.append(line_str)

        line_str = "fsd=fsd1,anchor=%s" % (self.anchor_path)
        file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """fwd部分"""
        line_str = "fwd=default,threads=%d,xfersize=%s" % (self.threads, self.xfersize)
        file_content_lst.append(line_str)

        for i in range(len(self.system_ips)):
            i += 1
            line_str = "fwd=fwd%d,fsd=fsd1,hd=h%d" % (i, i)
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """rd部分"""
        line_str = "rd=default,fwdrate=max,elapsed=%d,interval=1,warmup=10,pause=5" % self.elapsed
        file_content_lst.append(line_str)
        line_str = "rd=rd1,fwd=fwd*,format=(clean)"
        file_content_lst.append(line_str)

        """写入配置文件"""
        file_content = '\n'.join(file_content_lst)

        clean_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'clean')
        with open(clean_file_name, 'w') as f:
            f.write(file_content)
        return

    def _set_create_mulpath_file(self):
        """
        :author:      chenjy1
        :date  :      2018.08.22
        :description: 生成create配置文件
        :return:
        """
        file_content_lst = []
        """hd部分"""
        line_str = "hd=default,vdbench=%s,shell=ssh,user=root" % self.vdbench_path
        file_content_lst.append(line_str)

        i = 0
        for system_ip in self.system_ips:
            i += 1
            line_str = "hd=h%d,system=%s" % (i, system_ip)
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """fsd部分"""
        line_str = "fsd=default,depth=%d,width=%d,files=%d,size=%s" \
                   % (self.depth, self.width, self.files, self.size)
        file_content_lst.append(line_str)

        for i, anchor_path in enumerate(self.anchor_path):
            line_str = "fsd=fsd%d,anchor=%s,journal=%s" % (i+1, anchor_path, self.journal_path[i])
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """fwd部分"""
        line_str = "fwd=default,threads=%d,xfersize=%s" % (self.threads, self.xfersize)
        file_content_lst.append(line_str)

        for i in range(len(self.system_ips)):
            i += 1
            line_str = "fwd=fwd%d,fsd=fsd%d,hd=h%d" % (i, i, i)
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """rd部分"""
        line_str = "rd=default,fwdrate=max,elapsed=%d,interval=1,warmup=10,pause=5" % self.elapsed
        file_content_lst.append(line_str)
        line_str = "rd=rd1,fwd=fwd*,format=(clean)"
        file_content_lst.append(line_str)
        line_str = "rd=rd2,fwd=fwd*,format=(restart,only)"
        file_content_lst.append(line_str)

        """写入配置文件"""
        file_content = '\n'.join(file_content_lst)

        create_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'create_mulpath')
        with open(create_file_name, 'w') as f:
            f.write(file_content)
        return

    def _set_check_write_mulpath_file(self):
        """
        :author:      chenjy1
        :date  :      2018.08.23
        :description: 生成check_write配置文件
        :return:
        """
        file_content_lst = []
        """hd部分"""
        line_str = "hd=default,vdbench=%s,shell=ssh,user=root" % self.vdbench_path
        file_content_lst.append(line_str)

        i = 0
        for system_ip in self.system_ips:
            i += 1
            line_str = "hd=h%d,system=%s" % (i, system_ip)
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """fsd部分"""
        line_str = "fsd=default,depth=%d,width=%d,files=%d,size=%s" \
                   % (self.depth, self.width, self.files, self.size)
        file_content_lst.append(line_str)

        for i, anchor_path in enumerate(self.anchor_path):
            line_str = "fsd=fsd%d,anchor=%s,journal=%s" % (i+1, anchor_path, self.journal_path[i])
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """fwd部分"""
        line_str = "fwd=default,threads=%d,xfersize=%s" % (self.threads, self.xfersize)
        file_content_lst.append(line_str)

        for i in range(len(self.system_ips)):
            i += 1
            line_str = "fwd=fwd%d,fsd=fsd%d,hd=h%d" % (i, i, i)
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """rd部分"""
        line_str = "rd=default,fwdrate=max,elapsed=%d,maxdata=20g,interval=1,warmup=10,pause=5" % self.elapsed
        file_content_lst.append(line_str)
        line_str = "rd=rd1,fwd=fwd*,format=no,forrdpct=50,forseekpct=50,foroperations=(getattr)"
        file_content_lst.append(line_str)
        line_str = "rd=rd2,fwd=fwd*,format=no,forrdpct=50,forseekpct=50,openflags=o_sync,foroperations=(setattr)"
        file_content_lst.append(line_str)
        line_str = "rd=rd3,fwd=fwd*,format=no,forrdpct=50,forseekpct=50,openflags=o_direct,foroperations=(getattr)"
        file_content_lst.append(line_str)

        """写入配置文件"""
        file_content = '\n'.join(file_content_lst)

        create_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'check_write_mulpath')
        with open(create_file_name, 'w') as f:
            f.write(file_content)
        return

    def _set_create_mulpath_diff_file(self, fsd_index=None):
        """
        :author:      chenjy1
        :date  :      2018.08.31
        :description: 生成create配置文件
        :return:
        """
        file_content_lst = []
        """hd部分"""
        line_str = "hd=default,vdbench=%s,shell=ssh,user=root" % self.vdbench_path
        file_content_lst.append(line_str)

        i = 0
        for system_ip in self.system_ips:
            i += 1
            line_str = "hd=h%d,system=%s" % (i, system_ip)
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        for i, anchor_path in enumerate(self.anchor_path):
            line_str = "fsd=fsd%d,anchor=%s,depth=%d,width=%d,files=%d,size=%s" \
                       % (i+1, anchor_path,
                          self.file_struct[i][0],
                          self.file_struct[i][1], self.file_struct[i][2], self.file_struct[i][3])
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """fwd部分"""
        line_str = "fwd=default,threads=%d,xfersize=%s" % (self.threads, self.xfersize)
        file_content_lst.append(line_str)

        for i in range(len(self.anchor_path)):
            i += 1
            index = (i-1) % len(self.system_ips)
            line_str = "fwd=fwd%d,fsd=fsd%d,hd=h%s" % (i, i, index+1)
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """rd部分"""
        line_str = "rd=default,fwdrate=max,elapsed=%d,interval=1,warmup=10,pause=5" % self.elapsed
        file_content_lst.append(line_str)
        if fsd_index is None:
            line_str = "rd=rd1,fwd=fwd*,format=(restart, only)"
        else:
            line_str = "rd=rd1,fwd=fwd%s,format=(restart, only)" % fsd_index
        file_content_lst.append(line_str)

        """写入配置文件"""
        file_content = '\n'.join(file_content_lst)

        create_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'create_mulpath_diff')
        with open(create_file_name, 'w') as f:
            f.write(file_content)
        return

    def _set_change_one_fsd(self):
        """
        :author:      chenjy1
        :date  :      2018.08.31
        :description: 改变某个fsd中的文件内容
        :return:
        """
        file_content_lst = []
        """hd部分"""
        line_str = "hd=default,vdbench=%s,shell=ssh,user=root" % self.vdbench_path
        file_content_lst.append(line_str)

        i = 0
        for system_ip in self.system_ips:
            i += 1
            line_str = "hd=h%d,system=%s" % (i, system_ip)
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        for i, anchor_path in enumerate(self.anchor_path):
            line_str = "fsd=fsd%d,anchor=%s,depth=%d,width=%d,files=%d,size=%s" \
                       % (i+1, anchor_path, self.file_struct[i][0],
                          self.file_struct[i][1], self.file_struct[i][2], self.file_struct[i][3])
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """fwd部分"""
        line_str = "fwd=default,threads=%d,xfersize=%s" % (self.threads, self.xfersize)
        file_content_lst.append(line_str)

        for i in range(len(self.anchor_path)):
            i += 1
            index = (i-1) % len(self.system_ips)
            line_str = "fwd=fwd%d,fsd=fsd%d,hd=h%s" % (i, i, index+1)
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """rd部分"""
        line_str = "rd=default,fwdrate=max,elapsed=%d,interval=1,warmup=10,pause=5" % self.elapsed
        file_content_lst.append(line_str)
        line_str = "rd=rd1,fwd=fwd%d,format=no,forrdpct=0" % self.fsd_index
        file_content_lst.append(line_str)

        """写入配置文件"""
        file_content = '\n'.join(file_content_lst)

        create_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'change_one_fsd')
        with open(create_file_name, 'w') as f:
            f.write(file_content)
        return

    def _set_create_mulpath_diff_file_snap_size(self):
        """
        :author:      chenjy1
        :date  :      2018.08.31
        :description: 生成create配置文件
        :return:
        """
        file_content_lst = []
        """hd部分"""
        line_str = "hd=default,vdbench=%s,shell=ssh,user=root" % self.vdbench_path
        file_content_lst.append(line_str)

        i = 0
        for system_ip in self.system_ips:
            i += 1
            line_str = "hd=h%d,system=%s" % (i, system_ip)
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        for i, anchor_path in enumerate(self.anchor_path):
            line_str = "fsd=fsd%d,anchor=%s,depth=%d,width=%d,files=%d,size=%s" \
                       % (i+1, anchor_path,
                          self.file_struct[i][0],
                          self.file_struct[i][1], self.file_struct[i][2], self.file_struct[i][3])
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """fwd部分"""
        line_str = "fwd=default,threads=%d,xfersize=%s" % (self.threads, self.xfersize)
        file_content_lst.append(line_str)

        for i in range(len(self.anchor_path)):
            i += 1
            index = (i-1) % len(self.system_ips)
            line_str = "fwd=fwd%d,fsd=fsd%d,hd=h%s" % (i, i, index+1)
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """rd部分"""
        line_str = "rd=default,fwdrate=max,elapsed=%d,interval=1,warmup=10,pause=5" % self.elapsed
        file_content_lst.append(line_str)
        line_str = "rd=rd1,fwd=fwd*,format=yes"
        file_content_lst.append(line_str)

        """写入配置文件"""
        file_content = '\n'.join(file_content_lst)

        create_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'create_mulpath_diff')
        with open(create_file_name, 'w') as f:
            f.write(file_content)
        return

    def _set_clean_one_fsd_snapsize(self):
        """
        :author:      chenjy1
        :date  :      2018.08.31
        :description: 改变某个fsd中的文件内容
        :return:
        """
        file_content_lst = []
        """hd部分"""
        line_str = "hd=default,vdbench=%s,shell=ssh,user=root" % self.vdbench_path
        file_content_lst.append(line_str)

        i = 0
        for system_ip in self.system_ips:
            i += 1
            line_str = "hd=h%d,system=%s" % (i, system_ip)
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        for i, anchor_path in enumerate(self.anchor_path):
            line_str = "fsd=fsd%d,anchor=%s,depth=%d,width=%d,files=%d,size=%s" \
                       % (i+1, anchor_path, self.file_struct[i][0],
                          self.file_struct[i][1], self.file_struct[i][2], self.file_struct[i][3])
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """fwd部分"""
        line_str = "fwd=default,threads=%d,xfersize=%s" % (self.threads, self.xfersize)
        file_content_lst.append(line_str)

        for i in range(len(self.anchor_path)):
            i += 1
            index = (i-1) % len(self.system_ips)
            line_str = "fwd=fwd%d,fsd=fsd%d,hd=h%s" % (i, i, index+1)
            file_content_lst.append(line_str)

        line_str = ""
        file_content_lst.append(line_str)

        """rd部分"""
        line_str = "rd=default,fwdrate=max,elapsed=%d,interval=1,warmup=10,pause=5" % self.elapsed
        file_content_lst.append(line_str)
        line_str = "rd=rd1,fwd=fwd%d,format=clean,forrdpct=0" % self.fsd_index
        file_content_lst.append(line_str)

        """写入配置文件"""
        file_content = '\n'.join(file_content_lst)

        create_file_name = os.path.join(self.tool_path, 'vdbench_datacheck', 'clean_one_fsd_snapsize')
        with open(create_file_name, 'w') as f:
            f.write(file_content)
        return


##############################################################################
# ##name  :      iozone_run
# ##parameter:   node_count：对几个节点运行
#                line_per_node：每个node有line_per_node行
#                运行命令：iozone -t [run_thread] -s [size] -r [xfersize] -+m [这个参数在函数内部]  -w
#                path参数为对哪个目录iozone
# ##author:      chenjinyu
# ##date  :      2018.07.12
# ##Description: 集群运行iozone
##############################################################################
def iozone_run(node_count, line_per_node, path, run_thread, size, xfersize):
    log.info("\t[ iozone_run ]")
    log.info("prepare iozone config file")
    tools_path = get_config.get_tools_path()
    iozone_file_path = tools_path + '/iozone/iozonetest'

    # 清除旧的iozone配置文件
    if iozone_file_path == '' or re.match('[/\*]*$', iozone_file_path) is not None:
        log.warn('-----There is a dangerous command!!!-----')
        return -1, None
    else:
        cmd = 'rm -rf %s' % iozone_file_path
        rc = common.command(cmd)
        if rc != 0:
            log.info("rm -rf iozonefile failed!!!!!!")

    # 开始按设定的参数写入配置文件
    file_object = open(iozone_file_path, 'w')
    for i in range(node_count):
        for j in range(line_per_node):
            node_ip_tmp = get_config.get_parastor_ip(i)
            file_object.write(node_ip_tmp + '   ')
            file_object.write(path + '   ' + 'iozone' + '\n')
    file_object.close()

    # 执行iozone
    cmd = 'iozone -t %d -s %s -r %s -+m %s -+d -w' % (run_thread, size, xfersize, iozone_file_path)
    log.info("start run iozone")
    rc = common.command(cmd)
    return rc
