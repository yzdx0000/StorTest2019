# -*- coding:utf-8 _*-
"""
@author: wangxiang
@file: 2-06-08-01.py
"""
"""
测试内容:创建lun映射

步骤:
1）配置节点池，配置存储池，创建访问区
2）配置SVIP，添加VIP
3）配置主机组，添加主机添加启动器，创建lun映射

检查项:
1）lun映射状态成功
"""
import os, sys
import time
import utils_path
import Lun_managerTest
import common
import log
import error
import get_config
import login
import error
import decorator_func
from get_config import config_parser as cp
import env_manage_lun_manage


def setup():
    global osan
    global client_ips
    global deploy_ips
    conf_file = Lun_managerTest.CONF_FILE  # 配置文件路径
    file_name = os.path.basename(__file__)
    file_name = file_name[:-3]  # 获取本脚本名，去掉.py后缀
    log_file_path = log.get_log_path(file_name)  # 获取日志目录，即test_cases/Log/Case_log
    log.init(log_file_path, True)  # 初始化日志文件

    deploy_ips = get_config.get_env_ip_info(conf_file)  # 获取集群IP列表
    client_ips = get_config.get_allclient_ip()  # 获取客户端IP

    osan = Lun_managerTest.oSan()


def case():
    # free_nodes_ids = osan.get_free_nodes(s_ip=deploy_ips[0])
    # # osan.update_param(s_ip=deploy_ips[0], section='MGR', name='min_meta_replica', current='1')  # 降级模式
    # node_pool_id = osan.create_node_pool(s_ip=deploy_ips[0], node_ids=free_nodes_ids,
    #                                      replica_num=cp("create_node_pool", "replica_num"),
    #                                      stripe_width=cp('create_node_pool', 'stripe_width'),
    #                                      disk_parity_num=cp("create_node_pool", "disk_parity_num"),
    #                                      node_parity_num=cp("create_node_pool", "node_parity_num"),
    #                                      name="nodepool1")
    # osan.startup(s_ip=deploy_ips[0])
    # osan.create_storage_pool(s_ip=deploy_ips[0], node_pool_ids=node_pool_id, name='pool1')
    # osan.update_param(s_ip=deploy_ips[0], section='MGR', name='mgcd_auto_mount_flag', current='0')  # 解除自动挂载
    # az_id = osan.create_access_zone(s_ip=deploy_ips[0], node_id=free_nodes_ids, name='accesszone1')
    # sub_id = osan.create_subnet(s_ip=deploy_ips[0], access_zone_id=az_id, name='subnet1',
    #                             sv_ip=cp("create_subnet", "sv_ip"),
    #                             mask=cp("create_subnet", "mask"),
    #                             vv_ip=cp("create_subnet", "vv_ip"),
    #                             gate_way=cp("create_subnet", "gate_way"),
    #                             network_interface=cp("create_subnet", "network_interface"))
    # osan.add_vip_address_pool(s_ip=deploy_ips[0], subnet_id=sub_id,
    #                           domain_name=cp("add_vip_address_pool", "domain_name"),
    #                           vip=cp("add_vip_address_pool", "vip"))
    # osan.enable_san(s_ip=deploy_ips[0], access_zone_id=az_id)
    target_id = osan.get_targets(s_ip=deploy_ips[0])
    log.info(target_id)


# @decorator_func.tasklet(int(env_manage.cp('timeout', 'second')), maxretry=int(env_manage.cp('timeout', 'maxretry')))
def main():
    env_manage_lun_manage.revert_env()
    error.rel_check_before_run(file_name, jnl_rep=3, free_jnl_num=0, node_num=3)
    setup()
    env_manage_lun_manage.clean()
    case()  # 用例步骤
    common.ckeck_system()  # 检查系统状态


if __name__ == '__main__':
    main()
