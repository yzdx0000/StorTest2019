#!usr/bin/env python  
# -*- coding:utf-8 -*-  
""" 
:author: Liu he
:Description:
@file: run_test.py 
@time: 2018/12/20 
"""
import os
import time
import threading
import commands
import utils_path
import get_config
import log
import env


'''初始化'''

file_name = os.path.basename(__file__)
file_name = file_name[:-3]  # 获取本脚本名，去掉.py后缀
log_file_path = log.get_log_path(file_name)  # 获取日志目录，即test_cases/Log/Case_log
log.init(log_file_path, True)
current_path = os.path.dirname(os.path.abspath(__file__))
conf_file = current_path + "/x1000_test_config.xml"
deploy_ips = get_config.get_env_ip_info(conf_file)  # 获取集群IP列表
client_ips = get_config.get_allclient_ip()  # 获取客户端IP

# osan = Lun_managerTest.oSan()
# com2_osan = common2.oSan()
# com_lh = breakdown.Os_Reliable()

node_ip1 = deploy_ips[0]  # 业务节点IP
client_ip1 = client_ips[0]


def vdb_test():
    lun_name = env.ls_scsi_dev(client_ip=client_ip1)
    vdb_file = env.gen_vdb_xml(lun=lun_name, xfersize="4k", rdpct="50", maxdata="10000G")
    log.info("start vdbench test 4k write and read")
    while True:
        env.run_vdb(client_ip=client_ip1, vdb_xml=vdb_file, output=node_ip1, time=1200)


def run_reliable():
    log.info("will running ReliableTest")
    cmd = ("python %s/ReliableTest_6.0.py -o 2 -z 5 -i \"%s\"" % (current_path, node_ip1))
    log.info(cmd)
    rc, output = commands.getstatusoutput(cmd)
    if rc != 0:
        log.error("runnung ReliableTest find error, will exit")
        os._exit(1)


def create_lun(ips=deploy_ips[0], name="LUN1", size="1073741824", access_id=None):
    s_pool_id = env.get_storage_id(ips)
    if access_id == None:
        log.info("the lun will assigned to the first access zone")
        access_id = env.get_access_zone_id(ips)[0]
    log.info("Return by function \"create_lun\":"
             "send command to %s,from the storage pool %s create lun %s assigned to %s access zone" % (
                 ips, s_pool_id, name, access_id))
    lun_id = env.create_lun(s_ip=ips, total_bytes=size, lun_type="THIN", lun_name=name, stor_pool_id=s_pool_id[1],
                             acc_zone_id=access_id)
    log.info("Return by \"create_lun\"create LUN ID: %s success, will get lun name to check lun info!!!" % (lun_id))
    lun_name = env.get_option_single(s_ip=ips, command="get_luns", indexname="luns", argv2="name", ids="ids",
                                      argv1=lun_id)
    if lun_name == name:
        log.info("Successfully create a lun with the name %s" % (lun_name))
        return lun_id
    else:
        log.error(
            "Create LUN failed. Error Info : \nGet LUN info node : %s \nget lun_name : %s \nWill except lun name : %s " % (
                ips, lun_name, name))
        os._exit(1)


def create_luns():
    for i in range(5):
        lun_name = "LUN" + str(i)
        create_lun(node_ip1, lun_name)


def case():
    # log.info("create lun")
    # create_luns()
    # log.info("create lun map")
    # env.create_lun_map(node_ip1)
    log.info("Iscsi login")
    env.create_iscsi_login(ips=node_ip1, cli_ips=client_ip1)
    threads = []
    threads.append(threading.Thread(target=vdb_test))
    threads.append(threading.Thread(target=run_reliable))
    for i in threads:
        i.start()
    for i in threads:
        i.join()


def main():
    case()


if __name__ == "__main__":
    # env_manage.rel_check_before_run(file_name, jnl_rep=3, free_jnl_num=0, node_num=5)
    main()
