# -*- coding:utf-8 -*-
# Author:Liu he
# Date  :2018-8-15

'''
测试内容: 数据网断开后创建映射
测试步骤：
1、创建节点池，创建存储池，配置访问区，添加启动器
2、创建逻辑卷lun1，映射到主机host1
3、业务节点数据网断开
4、创建逻辑卷lun2，映射至主机host1
检查项：
1）节点池、存储池创建成功
2）节点正常关闭
3）创建访问区成功

'''

import os
import time
import random
import commands
import threading
import utils_path
import log
import common
import prepare_x1000
import check_env
import ReliableTest
import env_manage
import decorator_func
from get_config import config_parser as CP

'''初始化'''
file_name = os.path.basename(__file__)
file_name = file_name[:-3]  # 获取本脚本名，去掉.py后缀
log_file_path = log.get_log_path(file_name)  # 获取日志目录，即test_cases/Log/Case_log


def setup():
    '''获取业务节点IP和非业务节点IP'''
    global node_ip1
    global node_ip2
    global client_ip1
    node_ip1 = env_manage.get_inter_ids()[0]  # 业务节点IP
    node_ip2 = env_manage.get_inter_ids()[-1]  # 非业务节点IP
    client_ip1 = env_manage.client_ips[0]


def lun_map(ids):
    host_group_id = env_manage.osan.get_host_groups(s_ip=node_ip1)
    env_manage.osan.map_lun(s_ip=node_ip1, lun_ids=ids, hg_id=host_group_id[0])


def case():
    subnet_eth = env_manage.com_lh.get_vip_eth_name(node_ip1)
    log.info("step:1.创建逻辑卷")
    env_manage.create_lun(node_ip1, "LUN1")
    env_manage.create_lun(node_ip1, "LUN2")
    lun_id = env_manage.com_lh.get_lun_id_by_name(node_ip1, "LUN1")
    log.info("step:2.映射部分逻辑卷")
    lun_map(lun_id)
    log.info("step:3.关闭网卡")
    env_manage.com_lh.network_test(s_ip=node_ip1, net_name=subnet_eth, net_stat="down")
    time.sleep(30)
    lun_id = env_manage.com_lh.get_lun_id_by_name(node_ip1, "LUN2")
    log.info("step:4.映射剩余部分逻辑卷")
    lun_map(lun_id)
    log.info("step:5.恢复网卡")
    env_manage.com_lh.network_test(s_ip=node_ip1, net_name=subnet_eth, net_stat="up")


def main():
    env_manage.clean_test_env()
    setup()
    case()
    log.info("step:6.检查清理测试环境")
    env_manage.clean_lun_map()
    env_manage.clean_lun()
    env_manage.clean_test_env()
    log.info("The case finished!!!")


if __name__ == "__main__":
    env_manage.rel_check_before_run(file_name, jnl_rep=3, free_jnl_num=0, node_num=3)
    common.case_main(main)
