#!/usr/bin/python
# -*- coding:utf-8 -*-
#**********************************************
#实现功能：
# recovery_oOms用于杀指定次数的oOms进程，待其恢复后退出；
# recovery_oOss用于杀指定次数的oOss进程，待其恢复后退出；
# recovery_postgres用于杀指定次数的postgres进程，待其恢复后退出
#所需参数：需要修改oomsip，oossip和杀进程的次数kill_num
#需要修改变量logfile的值，即日志文件的名称
#作者：张晗
#创建时间：2018/01/22
#**********************************************
import os
import commands
import threading
import time
import _create_logfile_zh
import read_conf_zh
#import _logpath_zh
all_argvs=read_conf_zh.get_argvs()
logfile="../S3output/logfile"
def recovery_oOms(oomsip,kill_num):
	n=0
	while(n<kill_num):
		cmd1='ssh '+oomsip+' ps aux |grep /cliparastor/oms/oOms |grep -v grep'+'| wc -l'
		(status1,result1)=commands.getstatusoutput(cmd1)
		if(result1=='1'):
			(status,out)=commands.getstatusoutput('ssh '+oomsip+' killall -9 oOms')
			_create_logfile_zh.add_content('ssh '+oomsip+' killall -9 oOms',log_name=logfile)
			if(status==0):
				print "the count of kill oOms is %d" % (n+1)
				_create_logfile_zh.add_content("the count of kill oOms is "+str(n+1),log_name=logfile)
				n+=1
				time.sleep(10)
	while True:
		mgrid=os.popen("ssh "+oomsip+" parastor_sysctl getip|grep MGR|grep "+oomsip+"|cut -d '#' -f2|cut -d ':' -f2").read()
		cmd="ssh "+oomsip+" parastor_monitor checkstat nodetype=oOms nodeid="+mgrid.strip()+"|awk -F ':' '{print $4}'"
		oomsstat=os.popen(cmd).read()
		if(oomsstat.strip()=='ok'):
			break
		else:
			time.sleep(5)
			
def recovery_oOss(oomsip,oossip,kill_num):
	n=0
	while(n<kill_num):
		cmd2='ssh '+oossip+' ps aux |grep /cliparastor/oss/oOss |grep -v grep'+'| wc -l'
		(status2,result2)=commands.getstatusoutput(cmd2)
		if(result2=='1'):
			(status,out)=commands.getstatusoutput('ssh '+oossip+' killall -9 oOss')
			_create_logfile_zh.add_content('ssh '+oossip+' killall -9 oOss',log_name=logfile)
			if(status==0):
				print "the count of kill oOss is %d" % (n+1)
				_create_logfile_zh.add_content("the count of kill oOss is "+str(n+1),log_name=logfile)
				n+=1
				time.sleep(60)
	while True:
		dsid=os.popen("ssh "+oomsip+" parastor_sysctl getip|grep "+oossip+"|cut -d '#' -f2|cut -d ':' -f2").read()
		nodeid=int(dsid)+2
		oossstat=os.popen("ssh "+oomsip+" parastor_monitor checkstat nodetype=oOss nodeid="+str(nodeid)+"|"+"awk -F ':' '{print $4}'").read()
		if(oossstat.strip()=='ok'):
			break
		else:
			time.sleep(30)
def recovery_postgres(oomsip,kill_num):
	n=0
	while(n<kill_num):
		cmd3='ssh '+oomsip+' ps aux|grep /mnt/parastor/.ps_hidden/pos/postgres/bin/postgres|grep -v grep|wc -l'
		(status3,result3)=commands.getstatusoutput(cmd3)
		if(result3=='1'):
			(status,out)=commands.getstatusoutput('ssh '+oomsip+' killall -9 postgres')
			_create_logfile_zh.add_content('ssh '+oomsip+' killall -9 postgres',log_name=logfile)
			if(status==0):
		 		print "the count of kill postgres is %d" % (n+1)
				_create_logfile_zh.add_content("the count of kill postgres is "+str(n+1),log_name=logfile)
				n+=1
				time.sleep(5)
	while True:
		if(result3=='1'):
			time.sleep(15)
			break
		else:
			time.sleep(15)			

				

if __name__=="__main__":
	#recovery_oOms(all_argvs['master_mgr_ip'],1)

	recovery_oOss(all_argvs['master_mgr_ip'],all_argvs['oOss_ip'],1)

	#recovery_postgres(all_argvs['master_mgr_ip'],1)
