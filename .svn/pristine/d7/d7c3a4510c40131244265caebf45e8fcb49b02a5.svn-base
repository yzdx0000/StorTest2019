#!/usr/bin/python
#_*_ coding:utf-8 _*_
#使用说明：analyzebucket_xml用于解析桶列表,最终将所有桶都存放于buckets列表中，analyzeobject_xml用于解析对象列表，得到objnames和objsizes两个对象
#所需参数：oOms的ip,oossip,accountname和email，若调用analyzeobject_xml还需要bucketname
import os,sys
import commands
import xml.dom.minidom
import _readconffile_lp
import _getrelatedid_lp
import commonfunction_lp
import getoutputpath_lp
import _log_lp

outputpath = getoutputpath_lp.getoutputpath()
def result2file(out):
	f=open('output','w')
	f.write(out)
	f.close()
def get_xml(filename):
	f = open(filename)
        lines = f.readlines()
        count = 0
        for line in lines:
                if line.startswith('<?xml'):
                        break
                else:
                        count = count + 1
        xml_lst = lines[count:]
        f.close()
        xml_string = ''.join(xml_lst)
        #print xml_string
        return xml_string

def analyzebucket_xml_logger(mgrip,dsip,accountname,email,logger):
	(accountid,accountuid,certificateid)=_getrelatedid_lp.accountrea_logger(mgrip,accountname,email,logger)
        cmd='curl -s -i http://%s:20480 -X GET -H \"Authorization:AWS4-HMAC-SHA256 Credential=%s\"' % (dsip,certificateid)
        logger.info(cmd)
	output1=os.popen(cmd).read()
        logger.info(output1)
        num1=output1.find('HTTP/1.1')
        num2=output1[(num1+9):((num1+12))]
        if(num2=='200'):
                buclistout=outputpath+'/bucketlist'
        	with open(buclistout,'w') as f:
			f.write(output1)
           # 	get_xml('/root/output')
	    	xml_string = get_xml(buclistout)
            	xml_info = xml.dom.minidom.parseString(xml_string)
            	contents_info = xml_info.getElementsByTagName('Bucket')
            	bucketnames=[]
            	for content_info in contents_info:
                	Name = content_info.getElementsByTagName('Name')[0].firstChild.nodeValue
                	bucketnames.append(Name)
		#	print "the num of bueckts is %s" % len(bucketnames)
                os.system("rm -rf "+buclistout)
                return bucketnames
        else:
            return -1
def analyzeobject_xml_logger(mgrip,dsip,bucketname,accountname,email,logger):
	(accountid,accountuid,certificateid)=_getrelatedid_lp.accountrea_logger(mgrip,accountname,email,logger)
	cmd='curl -s -i http://%s:20480/%s -X GET -H \"Authorization:AWS4-HMAC-SHA256 Credential=%s\"' % (dsip,bucketname,certificateid)
        logger.info(cmd)
	output1=os.popen(cmd).read()
        logger.info(output1)
        num1=output1.find('HTTP/1.1')
        num2=output1[(num1+9):((num1+12))]
        if(num2=='200'):
        	objlistout=outputpath+'/'+bucketname+'objlistout'
                with open(objlistout,'w') as f:
			f.write(output1)
                xml_string = get_xml(objlistout)
#		xml_string = get_xml()
		xml_info = xml.dom.minidom.parseString(xml_string)
        	contents_info = xml_info.getElementsByTagName('Contents')
        	objnames=[]
		objsizes=[]
        	for content_info in contents_info:
            		Name = content_info.getElementsByTagName('Key')[0].firstChild.nodeValue
	    		Size = content_info.getElementsByTagName('Size')[0].firstChild.nodeValue
            		objnames.append(Name)
	    		objsizes.append(Size)
		os.system("rm -rf "+objlistout)
       #         print zip(dict(objnames,objsizes))         #列表构成元组
                return objnames,objsizes
        else:
            return -1

if __name__=="__main__":
    args=_readconffile_lp.readconf()
#    print args
    # 第二个步骤：创建logger
    logfilename='test'
    # 创建日志输出文件
    output = getoutputpath_lp.getoutputpath()
    logfilepath = os.path.join(output, logfilename)
    ifmkdir = commonfunction_lp.touchfile(logfilepath)
    logger = _log_lp.log(logfilename)
    if ifmkdir:
        logger.info('%s is alreay exists and we delete it and create a new one' % logfilepath)
    else:
        logger.info('%s is created ok' % logfilepath)
    buckets=analyzebucket_xml_logger(args['master_mgr_ip'],args['oossip'],args['accountname'],args['email'],logger)
    print buckets
    (objnames,objsizes)=analyzeobject_xml_logger(args['master_mgr_ip'],args['oossip'],args['thebucket'],args['accountname'],args['email'],logger)
    print objnames,objsizes
