# -*- coding:utf-8 -*-
# Author:Liu he
# Date  :2018-11-20

'''
有LUN映射时更新VIP
测试步骤：
1、创建节点池
2、创建存储池
3、创建访问区
4、创建SVIP，填写zone id，svip name，IP地址，掩码，网关，网卡名称，提交后可成功创建
5、创建VIP，填写 SVIP id，域名，IP地址，协议类型，配置方法，负载均衡类型并启动iSCSI
6、创建LUN和对应的映射，并在主机端扫描对应的LUN
7、修改vip地址池中有LUN映射的LUN所在的VIP，使和步骤5中的地址不同
检查项：
1、节点池创建成功
2、存储池创建成功
3、访问区创建成功
4、成功创建SVIP
5、创建VIP成功
6、主机端扫描LUN成功
7、VIP地址段修改失败

'''

import os
import time
import random
import xml
import json
import commands
import threading
import utils_path
import log
import common
import ReliableTest
import prepare_x1000
import env_manage
import access_env
import decorator_func
from get_config import config_parser as cp

'''初始化'''
file_name = os.path.basename(__file__)
file_name = file_name[:-3]  # 获取本脚本名，去掉.py后缀
log_file_path = log.get_log_path(file_name)  # 获取日志目录，即test_cases/Log/Case_log


def setup():
    '''获取业务节点IP和非业务节点IP'''
    global node_ip1
    global node_ip2
    global client_ip1
    node_ip1 = env_manage.deploy_ips[0]  # 业务节点IP
    node_ip2 = env_manage.deploy_ips[1]  # 非业务节点IP
    client_ip1 = env_manage.client_ips[0]


def get_vip():
    lun_xml = os.getcwd() + '/test_config.xml'
    svip2 = xml.dom.minidom.parse(lun_xml)
    svip2_info = svip2.getElementsByTagName('vips')[0]
    svips_infos = svip2_info.getElementsByTagName('vip')
    vips_list = []
    for svip in svips_infos:
        ip = svip.getElementsByTagName('ip')[0].firstChild.nodeValue
        vips_list.append(ip)
    return vips_list


def create_luns():
    for i in range(10):
        lun_name = "LUN" + str(i)
        env_manage.create_lun(node_ip1, lun_name)


def update_vip_address_pool(id=None, s_ip=None, vip_addresses=None):
    """
    更改vip地址段
    :Author:wangxiang
    :Date:2018/10/12
    :param id: vip地址段id
    :param s_ip: 节点ip
    :param vip_addresses:
    :return:
    """
    if all([s_ip, id, vip_addresses]):
        cmd = ("ssh {} \"pscli   --command=update_vip_address_pool  --id={} --vip_addresses={}\"").format(s_ip, id,
                                                                                                          vip_addresses)
        log.info(cmd)
        (res, final) = commands.getstatusoutput(cmd)
        if res == 0:
            log.info("update vip_address sucess")
            final = json.loads(final)
            return final
        else:
            log.info(final)
            return 1
    else:
        log.info("arg error!")
        os._exit(1)


def update_vip(n_vip):
    log.info("修改（删除）有lun的vip")
    vip_pool_id = env_manage.osan.get_vip_pool_ids(s_ip=node_ip1)
    rc = update_vip_address_pool(id=vip_pool_id[0], s_ip=node_ip1, vip_addresses=n_vip)
    if rc == 1:
        return
    else:
        log.error("change vip success is failed")
        os._exit(1)


def case():
    log.info("step:1.get new vip")
    vip2 = get_vip()[1]
    log.info("get vip2 :%s" % (vip2))
    log.info("step:2.create 10 luns")
    create_luns()
    log.info("step:3.create lun map")
    env_manage.create_lun_map()
    log.info("step:4.create iscsi login")
    env_manage.create_iscsi_login()
    log.info("step:5.update vip to vip2")
    update_vip(vip2)


def main():
    env_manage.clean_test_env()
    setup()
    case()
    log.info("step:6.检查清理测试环境")
    env_manage.clean_test_env()
    log.info("The case finished!!!")


if __name__ == '__main__':
    env_manage.rel_check_before_run(file_name, jnl_rep=3, free_jnl_num=0, node_num=3)
    common.case_main(main)
