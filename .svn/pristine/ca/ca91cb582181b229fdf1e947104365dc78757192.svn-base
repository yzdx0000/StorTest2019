#!/usr/bin/python
#-*-coding:utf-8 -*
"""
:Date: 2019-01-02
:Author: wuyq
:Description:
function: Try to find the best performance configuration.
:Changerlog:
"""
import os
import commands
import time
import xml
import utils_path
import common2
import common
import log
import get_config
import login
import breakdown

# 参数实例化
conf_file = common2.CONF_FILE
osan = common2.oSan()
reliable = breakdown.Os_Reliable()
disk = breakdown.disk()
node = common.Node()

# 初始化日志文件
file_name = os.path.basename(__file__)
file_name = file_name[:-3]
log_file_path = log.get_log_path(file_name)
log.init(log_file_path, True)

# 获取集群节点信息
deploy_ips = get_config.get_env_ip_info(conf_file)
client_ips = get_config.get_allclient_ip()

config_info = xml.dom.minidom.parse(conf_file)
replica = config_info.getElementsByTagName('replica')[0].firstChild.nodeValue
strip_width = config_info.getElementsByTagName('stripwidth')[0].firstChild.nodeValue
node_parity = int(replica) - 1

# osan.view_vdb_result(client_ips[0], output='stress_io_nor')
# os._exit(0)
vip = login.login()

output = 'stress_io'  # vdbench output dirname
luns_list = []  # A list of volumes used each time
thread_list = []  # A list of threads used each time
iorate_list = []  # A list of iorate produced each time
base_nums = osan.get_lun_nums(deploy_ips[0])

def process():
    log.info("Start to understand the performance of the cluster system...")
    ex_count = 1
    while True:
        log.info("==============================================")
        log.info("The %s time to understand the performance..." % ex_count)
        log.info("Step1:Generate vdbench pressure test parameters.")
        stress_io = osan.gen_stress_vdb(xfersize='4k',
                                        rdpct=0,
                                        seekpct=0,
                                        iorate='2000',
                                        model='forthreads=(16-64,d)')

        log.info("Step2:Run vdbench stress test in host 1.host IP:%s" % client_ips[0])
        osan.run_vdb(client_ips[0], stress_io, output=output, time=180)

        time.sleep(10)
        log.info("Step3:View the vdbench execution results.host IP:%s" % client_ips[0])
        (iorate, thread) = osan.view_vdb_result(client_ips[0], output=(output+'_nor'))
        now_nums = osan.get_lun_nums(deploy_ips[0])

        log.info("The %s time to understand the performance successful!" % ex_count)
        log.info("==============================================")
        if len(iorate_list) > 0 and iorate < iorate_list[-1]:
            log.info("the Max IOrate:%s, the Suitable threads:%s, the Suitable LUN nums:%s" %
                     (iorate_list[-1], thread_list[-1], luns_list[-1]))
            break
        luns_list.append(now_nums)
        thread_list.append(thread)
        iorate_list.append(iorate)
        time.sleep(10)

        log.info("Step4:Add the number of base nums.Number of now luns:%s" % str(now_nums))
        lun_ids = osan.get_lun(deploy_ips[0])
        for count in range(max(lun_ids)+1, max(lun_ids)+base_nums+1):
            osan.create_lun(s_ip=deploy_ips[0], lun_name="lun_"+str(count), stor_pool_id=2,
                            acc_zone_id=1, replica_num=replica, node_parity_num=node_parity,
                            stripe_width=strip_width, lun_type="THIN", total_bytes="99999999999",
                            max_throughput="9000", max_iops="2000", disk_parity_num="0")

        log.info("Step5:Map all new luns to the host groups.")
        host_groups = osan.get_host_groups(deploy_ips[0])
        for count in range(max(lun_ids)+1, max(lun_ids)+base_nums+1):
            if count % 2 == 0:
                osan.map_lun(s_ip=deploy_ips[0], lun_ids=count, hg_id=host_groups[0])
            else:
                osan.map_lun(s_ip=deploy_ips[0], lun_ids=count, hg_id=host_groups[1])

        log.info("Step6:Login all hosts to the vips again.")
        login.login()
        ex_count += 1

if __name__ == '__main__':
    process()
