# !/usr/bin/python
# -*-coding:utf-8 -*
"""
测试内容:删除多个存储池

步骤:
1、选择3个节点创建节点池
2、创建3个存储池，使用全部磁盘
3、删除2个存储池

检查项:
1、节点池创建成功
2、存储池创建成功
3、存储池删除成功
"""
import os, sys
import random
import time
import utils_path
import Lun_managerTest
import common
import log
import get_config
import login
import decorator_func
from get_config import config_parser as cp
import env_manage_lun_manage

node_ip = env_manage_lun_manage.deploy_ips[0]

file_name = os.path.basename(__file__)
file_name = file_name[:-3]  # 获取本脚本名，去掉.py后缀
log_file_path = log.get_log_path(file_name)  # 获取日志目录，即test_cases/Log/Case_log
log.init(log_file_path, True)  # 初始化日志文件


def case():
    node_pool_id = env_manage_lun_manage.osan.get_option(s_ip=node_ip, command="get_node_pools", indexname="node_pools",
                                                         argv="id")[-1]

    data_disk_ids_list = env_manage_lun_manage.break_down.get_all_data_disk_id()
    env_manage_lun_manage.osan.startup(s_ip=node_ip)
    log.info("集群中的所有未使用数据盘:{}".format(data_disk_ids_list))
    if len(data_disk_ids_list) >= 9:
        avg_len = len(data_disk_ids_list) / 3
        env_manage_lun_manage.osan.create_storage_pool(s_ip=node_ip, node_pool_ids=node_pool_id, name='pool1',
                                                       disk_ids='{},{},{}'.format(data_disk_ids_list[0],
                                                                                  data_disk_ids_list[0 + avg_len],
                                                                                  data_disk_ids_list[0 + avg_len * 2]))
        env_manage_lun_manage.assert_ins.assertIN('pool1',
                                                  env_manage_lun_manage.osan.get_option(s_ip=node_ip,
                                                                                        command='get_storage_pools',
                                                                                        indexname='storage_pools',
                                                                                        argv='name'),
                                                  suc_msg='pool1 create success')
        env_manage_lun_manage.osan.create_storage_pool(s_ip=node_ip, node_pool_ids=node_pool_id, name='pool2',
                                                       disk_ids='{},{},{}'.format(data_disk_ids_list[1],
                                                                                  data_disk_ids_list[1 + avg_len],
                                                                                  data_disk_ids_list[1 + avg_len * 2]))
        env_manage_lun_manage.osan.create_storage_pool(s_ip=node_ip, node_pool_ids=node_pool_id, name='pool3',
                                                       disk_ids='{},{},{}'.format(data_disk_ids_list[2],
                                                                                  data_disk_ids_list[2 + avg_len],
                                                                                  data_disk_ids_list[2 + avg_len * 2]))
    else:
        avg_len = len(data_disk_ids_list) / 3
        env_manage_lun_manage.osan.create_storage_pool(s_ip=node_ip, node_pool_ids=node_pool_id, name='pool1',
                                                       disk_ids='{},{}'.format(data_disk_ids_list[0],
                                                                               data_disk_ids_list[0 + avg_len]))
        env_manage_lun_manage.assert_ins.assertIN('pool1',
                                                  env_manage_lun_manage.osan.get_option(s_ip=node_ip,
                                                                                        command='get_storage_pools',
                                                                                        indexname='storage_pools',
                                                                                        argv='name'),
                                                  suc_msg='pool1 create success')
        env_manage_lun_manage.osan.create_storage_pool(s_ip=node_ip, node_pool_ids=node_pool_id, name='pool2',
                                                       disk_ids='{},{}'.format(data_disk_ids_list[1],
                                                                               data_disk_ids_list[1 + avg_len]))
        env_manage_lun_manage.osan.create_storage_pool(s_ip=node_ip, node_pool_ids=node_pool_id, name='pool3',
                                                       disk_ids='{},{}'.format(data_disk_ids_list[2],
                                                                               data_disk_ids_list[2 + avg_len]))
    env_manage_lun_manage.clean_storage_pool()


def main():
    # env_manage_lun_manage.rel_check_before_run(filename=file_name)  # 环境检测和准备
    env_manage_lun_manage.clean_storage_pool()
    case()  # 用例步骤


if __name__ == '__main__':
    main()
