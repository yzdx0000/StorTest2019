#!/usr/bin/python
# -*- encoding=utf8 -*-

import os
import json
import shell
import time
import subprocess
import commands
import log
import get_config
import sys
import re
import random
import datetime
import ReliableTest
import common
from get_config import config_parser as CP

reload(sys)
sys.setdefaultencoding('utf-8')

global CONF_FILE
CONF_FILE = "/home/StorTest/conf/{}".format(CP('xml_confile', 'filename'))
node_ips_list = get_config.get_env_ip_info(CONF_FILE)
CLEAN_ENV = "No"
deploy_ips = get_config.get_env_ip_info(CONF_FILE)


class oSan():
    '''
    x1000相关操作
    create_access_zone
    create_storage_pool
    set_vip
    create_subnet
    add_vip_address_pool
    enable_san
    create_host_group
    add_host
    add_initiator
    create_lun
    map_lun
    write_iqn
    delete_lun_map
    delete_lun
    remove_initiator

    get_node_pool_disks
    get_vip_address_pools
    get_svip
    get_vip_address_pools_id
    discover_scsi
    iscsi_login
    iscsi_logout
    ls_scsi_dev
    get_nodes
    get_storage_id
    get_subnet_id
    get_access_zone_id
    get_hosts
    get_host_groups
    get_lun
    get_lun_maps
    get_lun_maps_by_lunid
    get_iqn
    get_initiators
    analysis_vip
    get_los

    gen_vdb_xml
    run_vdb
    auto_gen_vdb_xml
    auto_gen_vdb_jn_xml
    vdb_write
    vdb_check
    save_vdb_log

    run_cmd
    get_node_by_vip
    get_same_jnl_group
    '''

    def __init__(self):
        pass

    ###########################    创建相关操作    ####################
    def create_access_zone(self, s_ip=None, node_id=None, name=None):
        '''
        date    :   2018-05-23
        Description :   创建访问区
        param   :   s_ip : iscsi服务端IP; node_id : 节点ID; name : 访问区名称
        return  :   Access zone ID,INT
        '''
        if None == s_ip or None == node_id or None == name:
            log.error("Got wrong parameters.")
            log.error("I need s_ip(server ip),node_id(string) and name(accesee zone name).")
            os._exit(1)
        else:
            cmd = ("ssh %s \"pscli --command=create_access_zone --node_ids=%s --name=%s\"" % (s_ip, str(node_id), name))
            (res, final) = commands.getstatusoutput(cmd)
            log.info(cmd)
            if 0 != res:
                log.error(final)
                log.error("Create access zone error.")
                os._exit(1)
            else:
                final = json.loads(final)
        return final['result']

    def create_storage_pool(self, s_ip=None, name=None, node_pool_ids=None, disk_ids=None):
        '''
        date    :   2018-06-05
        Description :   创建存储池
        param   :
        return  :   storage_pool ID
        '''
        if None == name or None == node_pool_ids or s_ip == None:
            log.error("I need storage name= and node_pool_ids=")
            os._exit(1)
        elif None == disk_ids:
            cmd = ("ssh %s \" pscli --command=create_storage_pool --type=BLOCK --name=%s --node_pool_ids=%s\"" % (
                s_ip, name, str(node_pool_ids)))
        else:
            cmd = (
                "ssh %s \" pscli --command=create_storage_pool --disk_ids=%s --type=BLOCK --name=%s --node_pool_ids=%s\"" % (
                    s_ip, str(disk_ids), name, str(node_pool_ids)))
        log.info(cmd)
        (res, prefix) = commands.getstatusoutput(cmd)
        if res != 0:
            log.error(prefix)
            log.error("Create storage pool error.")
            os._exit(1)
        else:
            log.info("Create storage pool success.")
        prefix = json.loads(prefix)
        return prefix['result']['storage_pool_id']

    def set_vip(self, s_ip=None, v_ip=None):
        '''
        date    :   2018-05-29
        Description :   设置vip
        param   :   s_ip : iscsi服务端IP
        return  :   vip
        '''
        if None == s_ip:
            log.error("I need s_ip=server ip to set svip,or s_ip=server ip,v_ip=virtual ip to set virtual ip")
            os._exit(1)
        cmd = ("echo %s | sed -r 's/(.*)(.[0-9]+)/\\1/g'" % (s_ip))
        log.info(cmd)
        (res, prefix) = commands.getstatusoutput(cmd)
        for i in range(200, 254):
            test_ip = ("%s.%d" % (prefix, i))
            if test_ip == v_ip:
                continue
            cmd = ("ping -c 1 %s >& /dev/null" % (test_ip))
            (res, final) = commands.getstatusoutput(cmd)
            if res != 0:
                return test_ip
            if i == 253:
                log.error("Sorry,I can not find the ip you can use.")
                os._exit(1)

    def create_subnet(self, s_ip=None, sv_ip=None, access_zone_id="1", name="subnet1"):
        '''
        date    :   2018-05-29
        Description :   创建subnet
        param   :   s_ip : iscsi服务端IP
        return  :   subnet ID
        '''
        if None == s_ip or None == sv_ip:
            log.error(
                "I need s_ip=server ip,sv_ip=svip at least,access_zone_id default value is 1,name default value is subnet1")
            os._exit(1)
        log.info("Get gateway.")
        cmd = ("ssh %s \"ip route show | sed -n 1p | cut -d ' ' -f 3\"" % (s_ip))
        log.info(cmd)
        (res, final) = commands.getstatusoutput(cmd)
        if 0 != res:
            log.error("Get gateway error.")
            os._exit(1)
        else:
            log.info("Gateway is : %s" % (final))
            gate_way = final
        log.info("Get_network_interface")
        cmd = ("echo %s | sed -r 's/(.*)(\.[0-9]+)/\\1/g'" % (sv_ip))
        log.info(cmd)
        (res, final) = commands.getstatusoutput(cmd)
        prefix = final.strip("[|]|u")
        cmd = ("ssh %s \"ip addr | grep %s | sed -r 's/^ +//g' | cut -d ' ' -f 7\"" % (s_ip, prefix))
        log.info(cmd)
        (res, final) = commands.getstatusoutput(cmd)
        if 0 != res:
            log.error("Get_network_interface error.")
        else:
            if len(final) == 0:
                cmd = ("echo %s | sed -r 's/(.*)(\.[0-9]+)(\.[0-9]+)/\\1/g'" % (sv_ip))
                log.info(cmd)
                (res, final) = commands.getstatusoutput(cmd)
                prefix = final.strip("[|]|u")
                cmd = ("ssh %s \"ip addr | grep %s | sed -r 's/^ +//g' | cut -d ' ' -f 7\"" % (s_ip, prefix))
                log.info(cmd)
                (res, final) = commands.getstatusoutput(cmd)
            log.info("network_interface: %s" % (final))
            network_interface = final
        log.info("Get mask.")
        cmd = ("ssh %s \"ip addr | grep %s | sed -r 's/^ +//g' | cut -d ' ' -f 2 | sed -r 's/.*\///g'\"" % (
            s_ip, prefix))
        log.info(cmd)
        (res, final) = commands.getstatusoutput(cmd)
        if 0 != res:
            log.error("Get mask error.")
            os._exit(1)
        else:
            log.info("Get mask is : %s" % (final))
            mask = final
        cmd1 = ("ssh %s \"pscli --command=create_subnet --access_zone_id=%s --name=%s --svip=%s --subnet_mask=%s --subnet_gateway=%s --network_interfaces=%s --ip_family=IPv4\"" % (s_ip, str(access_zone_id), name, sv_ip, mask, gate_way, network_interface))
        cmd2 = ("ssh %s \"pscli --command=create_subnet --access_zone_id=%s --name=%s --svip=%s --subnet_mask=%s --subnet_gateway=%s --network_interfaces=%s\"" % (s_ip, str(access_zone_id), name, sv_ip, mask, gate_way, network_interface))
        log.info(cmd1)
        (res, final) = commands.getstatusoutput(cmd1)
        if 0 != res:
            log.error(final)
            log.error("Create_subnet error.")
            log.info(cmd2)
            (res, final) = commands.getstatusoutput(cmd2)
            if 0 != res:
                log.error(final)
                log.error("Create_subnet error.")
                os._exit(1)
            else:
                log.info("Create_subnet success.")
                final = json.loads(final)
                return final['result']
        else:
            log.info("Create_subnet success.")
            final = json.loads(final)
            return final['result']

    def add_vip_address_pool(self, s_ip=None, subnet_id=None, domain_name=None, vip=None):
        '''
        date    :   2018-06-05
        Description :   添加虚IP池
        param   :   ids : 存储池ID  nodeid : 节点ID
        return  :   IP池ID
        '''
        if None == s_ip or subnet_id == None or domain_name == None or vip == None:
            log.error("Please input server ip")
            os._exit(1)
        else:
            cmd = (
                "ssh %s \"pscli --command=add_vip_address_pool --subnet_id=%s --domain_name=%s --vip_addresses=%s --supported_protocol=ISCSI --allocation_method=DYNAMIC --load_balance_policy=LB_ROUND_ROBIN\"" % (
                    s_ip, str(subnet_id), domain_name, vip))
            log.info(cmd)
            (res, final) = commands.getstatusoutput(cmd)
            if res != 0:
                log.error(final)
                log.error("Add vip address pool error.")
                os._exit(1)
            else:
                log.info("Add vip address pool success.")
                final = json.loads(final)
                return final['result']

    def enable_san(self, s_ip=None, access_zone_id=None):
        '''
        date    :   2018-06-05
        Description :   激活 san
        param   :   s_ip : 服务节点IP
        return  :   None
        '''
        if None == s_ip or None == access_zone_id:
            log.error("Please input server ip")
            os._exit(1)
        else:
            cmd = ("ssh %s \"pscli --command=enable_san --access_zone_id=%s\"" % (s_ip, str(access_zone_id)))
            log.info(cmd)
            (res, final) = commands.getstatusoutput(cmd)
            if res != 0:
                log.error(final)
                log.error("Enable san on access_zone_id:%s error." % (str(access_zone_id)))
                os._exit(1)
            else:
                log.info("Enable san on access_zone_id:%s success." % (str(access_zone_id)))
                final = json.loads(final)

    def create_host_group(self, s_ip=None, hg_name=None):
        '''
        date    :   2018-06-06
        Description :   创建主机组
        param   :   s_ip : 服务节点IP hg_name : 主机组名称
        return  :   host group ID
        '''
        if None == s_ip or None == hg_name:
            log.error("Please input server ip")
            os._exit(1)
        else:
            cmd = ("ssh %s \"pscli --command=create_host_group --name=%s\"" % (s_ip, str(hg_name)))
            log.info(cmd)
            (res, final) = commands.getstatusoutput(cmd)
            if res != 0:
                log.error(final)
                log.error("Create host group: %s error." % (hg_name))
                os._exit(1)
            else:
                log.info("Create host group: %s success." % (hg_name))
                final = json.loads(final)
                return final['result']

    def add_host(self, s_ip=None, h_name=None, hg_id=None):
        '''
        date    :   2018-06-06
        Description :   创建主机组
        param   :   s_ip : 服务节点IP hg_name : 主机组名称
        return  :   host ID,LIST
        '''
        if None == s_ip or None == h_name or None == hg_id:
            log.error("Please input server ip")
            os._exit(1)
        else:
            cmd = ("ssh %s \"pscli --command=add_host --name=%s --host_group_id=%s\"" % (s_ip, str(h_name), str(hg_id)))
            log.info(cmd)
            (res, final) = commands.getstatusoutput(cmd)
            if res != 0:
                log.error(final)
                log.error("Create host:%s error." % (h_name))
                os._exit(1)
            else:
                log.info("Create host: %s success." % (h_name))
                final = json.loads(final)
                return final['result']

    def add_initiator(self, s_ip=None, h_id=None, iqn=None, alias=None):
        '''
        date    :   2018-06-06
        Description :   添加启动器
        param   :   
        return  :  initiator ID 
        '''
        if None == s_ip or None == h_id or None == iqn or None == alias:
            log.error("add_initiator:got wrong parameters.")
            os._exit(1)
        else:
            cmd = ("ssh %s \"pscli --command=add_initiator --iqn=%s --alias=%s --host_id=%s --auth_type=NONE\"" % (
                s_ip, iqn, alias, h_id))
            log.info(cmd)
            (res, final) = commands.getstatusoutput(cmd)
            if res != 0:
                log.error(final)
                log.error("Add initiator error.")
                os._exit(1)
            else:
                log.info("Add initiator success.")
                final = json.loads(final)
                return final['result']

    def create_lun(self, s_ip=None, lun_name=None, lun_type="THIN", stor_pool_id=None, acc_zone_id=None,
                   total_bytes="99999999999", max_throughput="9000", max_iops="2000",
                   stripe_width="1", disk_parity_num="0", node_parity_num="0", replica_num="1"):
        '''
        date    :   2018-06-06
        Description :   添加启动器
        param   :   
        return  :  Lun ID 
        '''
        if None == s_ip or None == lun_name or None == stor_pool_id or None == acc_zone_id:
            log.error("Create lun:got wrong parameters.")
            os._exit(1)
        elif str(stor_pool_id) == "1":
            log.error("stor_pool_id can not set 1.")
            os._exit(1)
        else:
            cmd = (
                "ssh %s \"pscli --command=create_lun --name=%s --type=%s --storage_pool_id=%s --access_zone_id=%s --total_bytes=%s --max_throughput=%s --max_iops=%s --stripe_width=%s --disk_parity_num=%s --node_parity_num=%s --replica_num=%s\"" % (
                    s_ip, lun_name, lun_type, str(stor_pool_id), str(acc_zone_id),
                    str(total_bytes), str(max_throughput), str(max_iops), str(stripe_width),
                    str(disk_parity_num), str(node_parity_num), str(replica_num)))
            log.info(cmd)
            (res, final) = commands.getstatusoutput(cmd)
            if res != 0:
                log.error(final)
                log.error("Create lun error.")
                os._exit(1)
            else:
                log.info("Create lun success.")
                final = json.loads(final)
                return final['result']

    def map_lun(self, s_ip=None, lun_ids=None, hg_id=None):
        '''
        date    :   2018-06-09
        Description ： map lun
        param   :   lun_ids : 卷ID  hg_id : 主机组ID
        return  :   
        '''
        if None == s_ip or None == lun_ids or None == hg_id:
            log.error("Map lun:got wrong parameters.")
            os._exit(1)
        else:
            cmd = ("ssh %s \"pscli --command=map_luns_to_host_group --lun_ids=%s --host_group_id=%s\"" % (
                s_ip, str(lun_ids), str(hg_id)))
            log.info(cmd)
            (res, final) = commands.getstatusoutput(cmd)
            if res != 0:
                log.error(final)
                log.error("Map lun error.")
                os._exit(1)
            else:
                log.info("Map lun success.")

    def write_iqn(self, cli_ip=None, iqn=None):
        '''
        date    :   2018-06-09
        Description ： write iqn
        param   :  cli_ip : 客户端IP iqn : iqn
        return  :   None
        '''
        if None == cli_ip or None == iqn:
            log.error("Write iqn:got wrong parameters.")
            os._exit(1)
        else:
            cmd = ("ssh %s \"echo InitiatorName=%s > /etc/iscsi/initiatorname.iscsi;service iscsid restart\"" % (
                cli_ip, str(iqn)))
            log.info(cmd)
            (res, final) = commands.getstatusoutput(cmd)
            if res != 0:
                log.error(final)
                log.error("Write iqn error.")
                os._exit(1)
            else:
                log.info("Write iqn success.")

    def delete_lun_map(self, s_ip=None, map_id=None):
        '''
        date    :   2018-06-19
        Description ： 
        param   :  s_ip : 服务节点IP map_id : map ID
        return  :   None
        '''
        if None == s_ip or None == map_id:
            log.error("Delete lun map:got wrong parameters.")
            os._exit(1)
        else:
            cmd = ("ssh %s \" pscli --command=delete_lun_map --id=%s\"" % (s_ip, str(map_id)))
            log.info(cmd)
            (res, final) = commands.getstatusoutput(cmd)
            if res != 0:
                log.error(final)
                log.error("Delete map : %s error." % (str(map_id)))
                os._exit(1)
            else:
                log.info("Delete map : %s success." % (str(map_id)))

    def delete_lun(self, s_ip=None, lun_id=None):
        '''
        date    :   2018-06-19
        Description ： 
        param   :  s_ip : 服务节点IP id : lun ID
        return  :   None
        '''
        if None == s_ip or None == lun_id:
            log.error("Delete lun:got wrong parameters.")
            os._exit(1)
        else:
            cmd = ("ssh %s \" pscli --command=delete_lun --id=%s\"" % (s_ip, str(lun_id)))
            log.info(cmd)
            (res, final) = commands.getstatusoutput(cmd)
            if res != 0:
                log.error(final)
                log.error("Delete lun : %s error." % (str(lun_id)))
                os._exit(1)
            else:
                log.info("Delete lun : %s success." % (str(lun_id)))

    def remove_initiator(self, s_ip=None, ini_id=None):
        '''
        date    :   2018-07-02
        Description ： 
        param   :  s_ip : 服务节点IP ini_id : initiator ID
        return  :   None
        '''
        if None == s_ip or None == ini_id:
            log.error("Remove intiator:got wrong parameters.")
            os._exit(1)
        else:
            cmd = ("ssh %s \" pscli --command=remove_initiator --id=%s\"" % (s_ip, str(ini_id)))
            log.info(cmd)
            (res, final) = commands.getstatusoutput(cmd)
            if res != 0:
                log.error(final)
                log.error("Remove initiator : %s error." % (str(ini_id)))
                os._exit(1)
            else:
                log.info("Remove initiator : %s success." % (str(ini_id)))

    ###########################    获取信息相关操作    ####################
    def get_node_pool_disks(self, s_ip=None, ids=None, nodeid=1):
        '''
        date    :   2018-06-04
        Description :   获取节点池磁盘id
        param   :   ids : 节点池ID  nodeid : 节点ID
        return  :   list[diskid]
        '''
        disk_ids = []
        if None == s_ip:
            log.error("Got wrong server_ip: %s" % (s_ip))
            # os._exit(1)
        else:
            cmd = ("ssh %s \" pscli --command=get_free_disks_by_node_pool_id --ids=%s\"" % (s_ip, str(ids)))
            log.info(cmd)
            (res, final) = commands.getstatusoutput(cmd)
            if res != 0:
                log.error(final)
                log.error("Get node pool disk error.")
                os._exit(1)
            else:
                log.info("Get node pool disk success.")
            final = json.loads(final)
            finals = final['result']
            if len(finals) == 0:
                log.error("There is no disks.")
                os._exit(1)
            for i in range(0, len(finals[0]['children'])):
                if finals[0]['children'][i]['node_id'] == int(nodeid):
                    for j in range(0, len(finals[0]['children'][i]['children'])):
                        disk_ids.append(finals[0]['children'][i]['children'][j]['id'])
        if len(disk_ids) != 0:
            return disk_ids
        else:
            log.error("Found no disks.Maybe you put a wrong node id.")
            os._exit(1)

    def get_vip_address_pools(self, s_ip=None, n_id="1"):
        '''
        date    :   2018-05-15
        Description :   获取VIP
        param   :   s_ip : iscsi服务端IP;n_id : 节点ID
        return  :   VIP(二元列表)
        '''
        vip_list = []
        if None == s_ip:
            log.error("Got wrong server_ip: %s" % (s_ip))
            os._exit(1)
        else:
            cmd = ("ssh %s \" pscli --command=get_vip_address_pools --ids=%s\"" % (s_ip, str(n_id)))
            (res, final) = commands.getstatusoutput(cmd)
            log.info(cmd)
            if res != 0:
                log.error(final)
                log.error("Get_vip_address_pools error.")
                # os._exit(1)
            else:
                log.info("Get_vip_address_pools success.")
                final = json.loads(final)
                if final['result']['total'] == 0:
                    os._exit(1)
                else:
                    finals = final['result']['ip_address_pools']
                    for vip in finals:
                        vip_list.append(vip['vip_addresses'])
                log.info("Get VIP list: %s" % (vip_list))
                return vip_list

    def get_svip(self, s_ip=None, ids=1):
        '''
        date    :   2018-07-06
        Description :   获取SVIP
        param   :   s_ip : iscsi服务端IP;
        return  :   SVIP
        '''
        vip_list = []
        if None == s_ip:
            log.error("Got wrong server_ip: %s" % (s_ip))
            os._exit(1)
        else:
            cmd = ("ssh %s \" pscli --command=get_subnets --ids=%s\"" % (s_ip, str(ids)))
        (res, final) = commands.getstatusoutput(cmd)
        log.info(cmd)
        if res != 0:
            log.error(final)
            log.error("Get_subnets error.")
            os._exit(1)
        else:
            log.info("Get_subnets success.")
        final = json.loads(final)
        if final['result']['total'] == 0:
            os._exit(1)
        else:
            finals = final['result']['subnets']
            for vip in finals:
                vip_list.append(vip['svip'])
        log.info("Get SVIP list: %s" % (vip_list))
        return vip_list

    def get_vip_address_pools_id(self, s_ip=None):
        '''
        date    :   2018-05-15
        Description :   获取VIP pool ID
        param   :   s_ip : iscsi服务端IP
        return  :   pool ID
        '''
        vip_id = []
        if None == s_ip:
            log.error("Got wrong server_ip: %s" % (s_ip))
            os._exit(1)
        else:
            cmd = ("ssh %s \" pscli --command=get_vip_address_pools\"" % (s_ip))
        (res, final) = commands.getstatusoutput(cmd)
        log.info(cmd)
        if res != 0:
            log.error(final)
            log.error("Get_vip_address_pools error.")
            os._exit(1)
        else:
            log.info("Get_vip_address_pools success.")
        final = json.loads(final)
        if final['result']['total'] == 0:
            os._exit(1)
        else:
            finals = final['result']['ip_address_pools']
            for vip in finals:
                vip_id.append(vip['id'])
        return vip_id

    def discover_scsi(self, client_ip, vip):
        '''
        date    :   2018-05-10
        Description :   发现iscsi服务器
        param   :   vip : VIP;client_ip : iscsi客户端IP
        return  :   target
        修改：在discovery中加入2>&1标准输出，规避discovery 提示timeout问题
        '''
        cmd = ("ssh %s \"iscsiadm -m discovery -t st -p %s 2>&1 \"" % (client_ip, vip))
        log.info(cmd)
        (res, target) = commands.getstatusoutput(cmd)
        if res != 0:
            log.error(target)
            log.error("Get target on %s error." % (vip))
            os._exit(1)
        else:
            log.info("Get target on %s success." % (vip))
            target = target.split(" ")[1]
            return target

    def iscsi_login(self, client_ip, iqn):
        '''
        date    :   2018-05-14
        Description :   登录
        param   :   client_ip : iscsi客户端IP;  iqn :   discover_scsi的返回值
        return  :   null
        '''
        cmd = ("ssh %s \"iscsiadm -m node -T %s -l\"" % (client_ip, iqn))
        (res, final) = commands.getstatusoutput(cmd)
        log.info(cmd)
        if res != 0:
            pass
        # log.error(final)
        #            log.error("Login on %s error." % (client_ip))
        else:
            pass
            # log.info("Login success on node %s." % (client_ip))

    def iscsi_logout(self, client_ip, vip=None):
        '''
        date    :   2018-05-14
        Description :   登出
        param   :   client_ip : iscsi客户端IP;  iqn :   discover_scsi的返回值
        return  :   null
        '''
        cmd = ("ssh %s \"iscsiadm -m session |grep %s| cut -d ' ' -f 4\"" % (client_ip, vip))
        log.info(cmd)
        (res, final) = commands.getstatusoutput(cmd)
        final = final.split('\n')
        for i in final:
            # cmd = ("ssh %s \"iscsiadm -m node -T %s -u -p %s\"" % (client_ip, i,vip))
            cmd = ("ssh %s \"iscsiadm -m node -T %s -p %s -o delete;sleep 5;iscsiadm -m node -T %s -u -p %s\"" % (
                client_ip, i, vip, i, vip))
            log.info(cmd)
            (res, final) = commands.getstatusoutput(cmd)
            if res != 0:
                pass
            # log.error(final)
            #                log.error("Logout on %s error." % (client_ip))
            else:
                pass
                # log.info("Logout success on node %s." % (client_ip))

    def iscsi_logout_all(self, client_ip):
        '''
        date    :   2018-05-14
        Description :   登出
        param   :   client_ip : iscsi客户端IP;  iqn :   discover_scsi的返回值
        return  :   null
        '''
        # cmd = ("ssh %s \"iscsiadm -m node --logoutall=all \"" % (client_ip))
        cmd = ("ssh %s \"iscsiadm -m node -u \"" % (client_ip))
        log.info(cmd)
        (res, final) = commands.getstatusoutput(cmd)
        if res != 0:
            log.error(final)
            log.error("Logout on %s error." % (client_ip))
        else:
            log.info("Logout success on node %s." % (client_ip))

    def ls_scsi_dev(self, client_ip):
        '''
        date    :   2018-05-16
        Description :  获取scsi设备名
        param   :   client_ip   :   iscsi客户端IP;
        return  :   scsi 设备名列表
        '''
        cmd = ("ssh %s \"lsscsi | grep Xstor\" | awk '{print $NF}'" % (client_ip))
        (res, final) = commands.getstatusoutput(cmd)
        log.info(cmd)
        if res != 0:
            log.error(final)
            log.error("Get scsi devices on %s error." % (client_ip))
            os._exit(1)
        else:
            log.info("Get scsi devices on %s success." % (client_ip))
        scsis = []
        scsis = final.split('\n')
        if len(scsis) == 0:
            log.error("There is no scsi devices on %s." % (client_ip))
            os._exit(1)
        return scsis

    def get_nodes(self, s_ip=None):
        '''
        date    :   2018-06-05
        Description :   获取节点ID
        param   :   s_ip : 服务节点IP
        return  :   节点ID
        '''
        nodeids = []
        # if None == s_ip:
        #     pass
        #     # log.error("Please input the corrent ip.")
        # else:
        # s_ip = s_ip.split()
        cmd = ("pscli --command=get_nodes")
        (res, final) = oSan().run_pscli_cmd(pscli_cmd=cmd)
        if res != 0:
            log.error("Get nodes error.")
            exit(1)
        else:
            log.info("Get nodes success.")
            final = json.loads(final)
            for i in range(0, len(final['result']['nodes'])):
                nodeids.append(final['result']['nodes'][i]['data_disks'][0]['nodeId'])
        return nodeids

    def get_storage_id(self, s_ip=None):
        '''
        date    :   2018-06-05
        Description :   获取存储池ID
        param   :   s_ip : 服务节点IP
        return  :   存储池ID
        '''
        storids = []
        if None == s_ip:
            log.error("Please input the corrent ip.")
            os._exit(1)
        else:
            cmd = ("ssh %s \"pscli --command=get_storage_pools\"" % (s_ip))
            log.info(cmd)
            (res, final) = commands.getstatusoutput(cmd)
            if res != 0:
                log.error(final)
                log.error("Get storage error.")
                os._exit(1)
            else:
                log.info("Get storage success.")
                final = json.loads(final)
                for i in range(0, final['result']['total']):
                    storids.append(final['result']['storage_pools'][i]['id'])
        return storids

    def get_subnet_id(self, s_ip=None):
        '''
        date    :   20.18-06-05
        Description :   获取subnet ID
        param   :   
        return  :   subnet ID
        '''
        subnetids = []
        if None == s_ip:
            log.error("Please input the corrent ip.")
            os._exit(1)
        else:
            cmd = ("ssh %s \"pscli --command=get_subnets\"" % (s_ip))
            log.info(cmd)
            (res, final) = commands.getstatusoutput(cmd)
            if res != 0:
                log.error(final)
                log.error("Get subnet error.")
                os._exit(1)
            else:
                log.info("Get subnet success.")
                final = json.loads(final)
                for i in range(0, final['result']['total']):
                    subnetids.append(final['result']['subnets'][i]['id'])
        return subnetids

    def get_access_zone_id(self, s_ip=None):
        '''
        date    :   20.18-06-05
        Description :   获取访问区 ID
        param   :   
        return  :   access_zone ID
        '''
        access_zone_ids = []
        if None == s_ip:
            log.error("Please input the corrent ip.")
            os._exit(1)
        else:
            cmd = ("ssh %s \"pscli --command=get_access_zones\"" % (s_ip))
            log.info(cmd)
            (res, final) = commands.getstatusoutput(cmd)
            if res != 0:
                log.error(final)
                log.error("Get access zone error.")
                os._exit(1)
            else:
                log.info("Get access zone success.")
                final = json.loads(final)
                for i in range(0, final['result']['total']):
                    access_zone_ids.append(final['result']['access_zones'][i]['id'])
        return access_zone_ids

    def get_hosts(self, s_ip=None):
        '''
        date    :   2018-06-06
        Description :   获取host ID
        param   ：  
        return  :   hosts ID
        '''
        hostids = []
        if None == s_ip:
            log.error("Please input the corrent ip.")
            os._exit(1)
        else:
            cmd = ("ssh %s \" pscli --command=get_hosts\"" % (s_ip))
            log.info(cmd)
            (res, final) = commands.getstatusoutput(cmd)
            if (res != 0):
                log.error(final)
                log.error("Get hosts error.")
                os._exit(1)
            else:
                log.info("Get hosts success.")
                final = json.loads(final)
                final = final['result']
                for i in range(0, final['total']):
                    hostids.append(final['hosts'][i]['id'])
            return hostids

    def get_host_groups(self, s_ip=None):
        '''
        date    :   2018-06-09
        Description :   获取host ID
        param   ：  
        return  :   host_group ID
        '''
        hostgroupids = []
        if None == s_ip:
            log.error("Please input the correct ip.")
            os._exit(1)
        else:
            cmd = ("ssh %s \" pscli --command=get_host_groups\"" % (s_ip))
            log.info(cmd)
            (res, final) = commands.getstatusoutput(cmd)
            if (res != 0):
                log.error(final)
                log.error("Get host group error.")
                os._exit(1)
            else:
                log.info("Get host group success.")
                final = json.loads(final)
                final = final['result']
                for i in range(0, final['total']):
                    hostgroupids.append(final['host_groups'][i]['id'])
            return hostgroupids

    def get_lun(self, s_ip=None):
        '''
        date    :   2018-06-09
        Description :   获取lun ID
        param   ：  
        return  :   lun ID
        '''
        lunids = []
        if None == s_ip:
            log.error("Please input the correct ip.")
            os._exit(1)
        else:
            cmd = ("ssh %s \"pscli --command=get_luns\"" % (s_ip))
            log.info(cmd)
            (res, final) = commands.getstatusoutput(cmd)
            if (res != 0):
                log.error(final)
                log.error("Get luns error.")
                os._exit(1)
            else:
                log.info("Get luns success.")
                final = json.loads(final)
                final = final['result']
                for i in range(0, final['total']):
                    lunids.append(final['luns'][i]['id'])
            return lunids

    def get_lun_maps(self, s_ip=None):
        '''
        date    :   2018-06-19
        Description :   获取lun map ID
        param   ：  
        return  :   lun map ID
        '''
        lunmapids = []
        if None == s_ip:
            log.error("Please input the correct ip.")
            os._exit(1)
        else:
            cmd = ("ssh %s \"pscli --command=get_lun_maps\"" % (s_ip))
            log.info(cmd)
            (res, final) = commands.getstatusoutput(cmd)
            if (res != 0):
                log.error(final)
                log.error("Get lun maps error.")
                os._exit(1)
            else:
                log.info("Get lun maps success.")
                final = json.loads(final)
                final = final['result']
                for i in range(0, final['total']):
                    lunmapids.append(final['lun_maps'][i]['id'])
            return lunmapids

    def get_lun_maps_by_lunid(self, s_ip=None, lun_ids=None):
        '''
        date    :   2018-06-19
        Description :   获取lun map ID
        param   ：  
        return  :   lun map ID
        '''
        lunmapids = []
        if None == s_ip:
            log.error("Please input the correct ip.")
            os._exit(1)
        elif None == lun_ids:
            cmd = ("ssh %s \"pscli --command=get_lun_maps_by_lun_id \"" % (s_ip))
        else:
            cmd = ("ssh %s \"pscli --command=get_lun_maps_by_lun_id --lun_ids=%s\"" % (s_ip, str(lun_ids)))
        log.info(cmd)
        (res, final) = commands.getstatusoutput(cmd)
        if (res != 0):
            log.error(final)
            log.error("Get lun maps error.")
            os._exit(1)
        else:
            log.info("Get lun maps success.")
            final = json.loads(final)
            final = final['result']
            for i in range(0, final['total']):
                lunmapids.append(final['lun_maps'][i]['id'])
        return lunmapids

    def get_iqn(self, s_ip=None, ids=None):
        '''
        date    :   2018-06-09
        Description :   获取iqn
        param   ：  
        return  :   iqn
        '''
        iqn_ids = []
        if None == s_ip:
            log.error("Please input the correct ip.")
            os._exit(1)
        else:
            if None == ids:
                cmd = ("ssh %s \"pscli --command=get_initiators\"" % (s_ip))
            else:
                cmd = ("ssh %s \"pscli --command=get_initiators --ids=%s\"" % (s_ip, str(ids)))
            log.info(cmd)
            (res, final) = commands.getstatusoutput(cmd)
            if (res != 0):
                log.error(final)
                log.error("Get iqns error.")
                os._exit(1)
            else:
                log.info("Get iqns success.")
                final = json.loads(final)
                final = final['result']
                for i in range(0, final['total']):
                    iqn_ids.append(final['initiators'][i]['name'])
            return iqn_ids

    def get_initiators(self, s_ip=None):
        '''
        date    :   2018-06-09
        Description :   获取initiators ID
        param   ：  
        return  :   initiators ID
        '''
        iqn_ids = []
        if None == s_ip:
            log.error("Please input the correct ip.")
            os._exit(1)
        else:
            cmd = ("ssh %s \"pscli --command=get_initiators\"" % (s_ip))
            log.info(cmd)
            (res, final) = commands.getstatusoutput(cmd)
            if (res != 0):
                log.error(final)
                log.error("Get initiators ID error.")
                os._exit(1)
            else:
                log.info("Get initiators ID success.")
                final = json.loads(final)
                final = final['result']
                for i in range(0, final['total']):
                    iqn_ids.append(final['initiators'][i]['id'])
            return iqn_ids

    def analysis_vip(self, vip=None):
        '''
        date    :   2018-06-22
        Description :   解析vip列表为单个vip
        param   :   vip : vip
        return  :   vip_list
        '''
        print vip
        vips = []
        if type(vip) == str:
            vip = vip.split(',')
        elif type(vip) == list and len(vip) == 1:
            vip = vip[0].split(',')
        for tmp_vip in vip:
            if '-' in tmp_vip:
                ip = re.match('(\d+.\d+.\d+).(\d+)-(\d+)', tmp_vip)
                for j in range(int(ip.group(2)), int(ip.group(3)) + 1):
                    vips.append(ip.group(1) + '.' + str(j))
            else:
                vips.append(tmp_vip)
        return vips

    def get_los_id(self, s_ip=None, lun_id=None):
        '''
        date    :   2018-07-11
        Description :   获取los ID
        param   ：  
        return  :   los ID
        '''
        #        losids = []
        #        if None == s_ip:
        #            log.error("Please input the correct ip.")
        #            os._exit(1)
        #        else:
        #            if None == lun_id:
        #                cmd = ("ssh %s \"pscli --command=get_luns\"" % (s_ip))
        #            else:
        #                cmd = ("ssh %s \"pscli --command=get_luns --ids=%s\"" % (s_ip,str(lun_id)))
        #            log.info(cmd)
        #            (res, final) = commands.getstatusoutput(cmd)
        #            if(res != 0):
        #                log.error(final)
        #                log.error("Get luns los error.")
        #                os._exit(1)
        #            else:
        #                log.info("Get luns los success.")
        #                final = json.loads(final)
        #                final = final['result']
        #                for i in range(0,final['total']):
        #                    losids.append(final['luns'][i]['id'])
        #            return losids
        nodeids = []
        if None == s_ip:
            log.error("Please input the corrent ip.")
            os._exit(1)
        else:
            cmd = ("ssh %s \"pscli --command=get_nodes\"" % (s_ip))
            log.info(cmd)
            (res, final) = commands.getstatusoutput(cmd)
            if res != 0:
                log.error(final)
                log.error("Get nodes error.")
                os._exit(1)
            else:
                log.info("Get nodes success.")
                final = json.loads(final)
                for i in range(0, len(final['result']['nodes'])):
                    nodeids.append(final['result']['nodes'][i]['data_disks'][0]['nodeId'])
        return nodeids

    ###########################    vdbench相关操作    ####################
    # ===================================================
    # latest date :2018-08-2
    # author: wangxiang
    # ===================================================
    # 2018-08-2:
    # 修改者:wangxiang
    # 1.添加一些参数
    def gen_vdb_xml(self, max_range='100M', maxdata='1G', thread=32, offset=None, align=None, lun=None, xfersize=None,
                    rdpct=None, seekpct=None, interval=1):
        '''
        date    :   2018-05-17
        Description :   生成vdbench配置文件
        param   :  vdbench标准配置参数
        return  :   vdbench xml file path
        '''
        t1 = datetime.datetime.now()
        template_file = get_config.get_tools_path() + "/osan/template"  # 获取配置文件模板路径
        vdb_xml = get_config.get_tools_path() + "/osan/vdb_xml." + str(t1.microsecond)  # vdbench测试所用的文件
        sd_num = 1  # 初始化sd数量
        threads = []
        # vdb_path = get_config.get_vdbench_path()        #获取vdbench路径
        if True == os.path.exists(vdb_xml):
            cmd = ("rm -rf %s" % (vdb_xml))
            log.info(cmd)
            commands.getstatusoutput(cmd)
        cmd = ("cp %s %s" % (template_file, vdb_xml))
        log.info(cmd)
        commands.getstatusoutput(cmd)
        if None == lun or len(lun) == 0:
            log.error("Found no scsi devices.")
            os._exit(1)
        if None != offset:
            cmd = ("sed -i '1s/$/,offset=%s/g' %s" % (str(offset), vdb_xml))  # 修改前偏移量
            #            log.info("Modify vdb_xml cmd %s" % (cmd))
            log.info(cmd)
            commands.getstatusoutput(cmd)
        if None != align:
            cmd = ("sed -i '1s/$/,align=%s/g' %s" % (str(align), vdb_xml))  # 修改后偏移量
            #            log.info("Modify vdb_xml cmd %s" % (cmd))
            log.info(cmd)
            commands.getstatusoutput(cmd)
        if None != rdpct:
            cmd = ("sed -i '2s/$/,rdpct=%s/g' %s" % (str(rdpct), vdb_xml))  # 修改读写占比
            log.info(cmd)
            commands.getstatusoutput(cmd)
        if None != seekpct:
            cmd = ("sed -i '2s/$/,seekpct=%s/g' %s" % (str(seekpct), vdb_xml))  # 修改读写占比
            #            log.info("Modify vdb_xml cmd %s" % (cmd))
            log.info(cmd)
            commands.getstatusoutput(cmd)
        if None != xfersize:
            cmd = ("sed -i -r 's/xfersize.*?\)/xfersize=%s/g' %s" % (xfersize, vdb_xml))  # 修改xferrsize
            #            log.info("Modify vdb_xml cmd %s" % (cmd))
            log.info(cmd)
            commands.getstatusoutput(cmd)
        for dev_name in lun:
            sd_xml = ("sd=sd%d,lun=%s,range=(0,%s)" % (sd_num, dev_name, max_range))
            wd_xml = ("wd=wd%d,sd=sd%d" % (sd_num, sd_num))
            cmd = ("sed -i '%da\%s' %s" % (sd_num, sd_xml, vdb_xml))  # 插入rd
            log.info(cmd)
            commands.getstatusoutput(cmd)
            cmd = ("sed -i '$i\%s' %s" % (wd_xml, vdb_xml))  # 插入wd
            log.info(cmd)
            commands.getstatusoutput(cmd)
            sd_num = sd_num + 1
            # threads.append("10")
        # threads = "3"
        max = len(lun) * int(max_range[:-1]) * 2
        if max_range[-1] == 'G':
            maxdata = str(max) + 'G'
        elif max_range[-1] == 'M':
            maxdata = str(max / 1000 + 1) + 'G'
        cmd = ("sed -i -r 's/thread.*?\)/threads=%s/g' %s" % (thread, vdb_xml))  # 修改每个wd的进程数
        log.info(cmd)
        commands.getstatusoutput(cmd)
        cmd = ("sed -i -r 's/interval.*?/interval=%s/g' %s" % (interval, vdb_xml))  # 修改每个wd的interval
        log.info(cmd)
        commands.getstatusoutput(cmd)
        cmd = ("sed -r -i 's/maxdata=[0-9]+[a-zA-Z]+,/maxdata=%s,/g' %s" % (str(maxdata), vdb_xml))  # 修改每个wd的maxdata
        log.info(cmd)
        commands.getstatusoutput(cmd)
        cmd = ("sed -r -i '1idata_errors=3' %s" % (vdb_xml))
        log.info(cmd)
        commands.getstatusoutput(cmd)
        log.info(vdb_xml)
        return vdb_xml

    def change_xml(self,s_ip=None,jn_on=None,vdb_xml=None):
        type_info = get_config.get_machine_type(CONF_FILE)
        node_num=len(oSan().get_nodes(s_ip))
        if node_num==5:
            if type_info == "phy":
                if jn_on != None:
                    # 修改xfersize
                    # cmd = ("sed -i -r 's/xfersize.*?\)/xfersize=(1k,10,4k,25,15k,20,128k,20,213k,25)/g' %s"
                    #        % (vdb_xml))
                    # commands.getstatusoutput(cmd)
                    # # 修改range
                    # cmd = ("sed -r -i 's/range=.*\)/range=(0,3G)/g' %s" % (vdb_xml,))
                    # commands.getstatusoutput(cmd)
                    # # 修改iorate
                    # cmd = ("sed -r -i 's/iorate=[0-9]+/iorate=1000/g' %s" % (vdb_xml,))
                    # commands.getstatusoutput(cmd)

                    cmd = ("sed -i -r 's/xfersize.*?\)/xfersize=(3k)/g' %s"
                           % (vdb_xml))
                    commands.getstatusoutput(cmd)
                    # 修改range
                    cmd = ("sed -r -i 's/range=.*\)/range=(0,100M)/g' %s" % (vdb_xml,))
                    commands.getstatusoutput(cmd)
                    # 修改iorate
                    cmd = ("sed -r -i 's/iorate=[0-9]+/iorate=400/g' %s" % (vdb_xml,))
                    commands.getstatusoutput(cmd)
                    # 修改threads
                    cmd = ("sed -r -i 's/threads=[0-9]+/threads=8/g' %s" % (vdb_xml,))
                    commands.getstatusoutput(cmd)
                    # 修改maxdata
                    cmd = ('grep -c lun %s' % (vdb_xml,))
                    res, lun_num = commands.getstatusoutput(cmd)
                    maxdata = int(lun_num) * 3 + 4
                    cmd = ("sed -r -i 's/maxdata=[0-9]+[a-zA-Z]+,/maxdata=%sG,/g' %s" % (str(maxdata), vdb_xml,))
                    commands.getstatusoutput(cmd)
                else:
                    # # 修改xfersize
                    # cmd = ("sed -i -r 's/xfersize.*?\)/xfersize=(4k,30,15k,20,127k,20,213k,30)/g' %s"
                    #        % (vdb_xml,))
                    # commands.getstatusoutput(cmd)
                    # # 修改range
                    # cmd = ("sed -r -i 's/range=.*\)/range=(0,5G)/g' %s" % (vdb_xml,))
                    # commands.getstatusoutput(cmd)
                    # # 修改iorate
                    # cmd = ("sed -r -i 's/iorate=[0-9]+/iorate=1000/g' %s" % (vdb_xml,))
                    # commands.getstatusoutput(cmd)

                    # 修改xfersize
                    cmd = ("sed -i -r 's/xfersize.*?\)/xfersize=(3k)/g' %s"
                           % (vdb_xml,))
                    commands.getstatusoutput(cmd)
                    # 修改range
                    cmd = ("sed -r -i 's/range=.*\)/range=(0,100M)/g' %s" % (vdb_xml,))
                    commands.getstatusoutput(cmd)
                    # 修改iorate
                    cmd = ("sed -r -i 's/iorate=[0-9]+/iorate=400/g' %s" % (vdb_xml,))
                    commands.getstatusoutput(cmd)
                    # 修改threads
                    cmd = ("sed -r -i 's/threads=[0-9]+/threads=8/g' %s" % (vdb_xml,))
                    commands.getstatusoutput(cmd)
                    # 修改maxdata
                    cmd = ('grep -c lun %s' % (vdb_xml,))
                    res, lun_num = commands.getstatusoutput(cmd)
                    maxdata = int(lun_num) * 5 + 4
                    cmd = ("sed -r -i 's/maxdata=[0-9]+[a-zA-Z]+,/maxdata=%sG,/g' %s" % (str(maxdata), vdb_xml))
                    commands.getstatusoutput(cmd)
        elif node_num==3:
            if type_info == "phy":
                if jn_on != None:
                    # # 修改xfersize
                    # cmd = ("sed -i -r 's/xfersize.*?\)/xfersize=(1k,20,3k,35,16k,20,127k,10,212k,15)/g' %s"
                    #        % (vdb_xml))
                    # commands.getstatusoutput(cmd)
                    # # 修改range
                    # cmd = ("sed -r -i 's/range=.*\)/range=(0,2G)/g' %s" % (vdb_xml,))
                    # commands.getstatusoutput(cmd)
                    # # 修改iorate
                    # cmd = ("sed -r -i 's/iorate=[0-9]+/iorate=1000/g' %s" % (vdb_xml,))
                    # commands.getstatusoutput(cmd)

                    # 修改xfersize
                    cmd = ("sed -i -r 's/xfersize.*?\)/xfersize=(3k)/g' %s"
                           % (vdb_xml))
                    commands.getstatusoutput(cmd)
                    # 修改range
                    cmd = ("sed -r -i 's/range=.*\)/range=(0,100M)/g' %s" % (vdb_xml,))
                    commands.getstatusoutput(cmd)
                    # 修改iorate
                    cmd = ("sed -r -i 's/iorate=[0-9]+/iorate=400/g' %s" % (vdb_xml,))
                    commands.getstatusoutput(cmd)

                    # 修改threads
                    cmd = ("sed -r -i 's/threads=[0-9]+/threads=8/g' %s" % (vdb_xml,))
                    commands.getstatusoutput(cmd)
                    # 修改maxdata
                    cmd = ('grep -c lun %s' % (vdb_xml,))
                    res, lun_num = commands.getstatusoutput(cmd)
                    maxdata = int(lun_num) * 3 + 4
                    cmd = ("sed -r -i 's/maxdata=[0-9]+[a-zA-Z]+,/maxdata=%sG,/g' %s" % (str(maxdata), vdb_xml,))
                    commands.getstatusoutput(cmd)
                else:
                    # # 修改xfersize
                    # cmd = ("sed -i -r 's/xfersize.*?\)/xfersize=(1k,20,4k,30,15k,20,127k,10,213k,20)/g' %s"
                    #        % (vdb_xml,))
                    # commands.getstatusoutput(cmd)
                    # # 修改range
                    # cmd = ("sed -r -i 's/range=.*\)/range=(0,4G)/g' %s" % (vdb_xml,))
                    # commands.getstatusoutput(cmd)
                    # # 修改iorate
                    # cmd = ("sed -r -i 's/iorate=[0-9]+/iorate=1000/g' %s" % (vdb_xml,))
                    # commands.getstatusoutput(cmd)

                    # 修改xfersize
                    cmd = ("sed -i -r 's/xfersize.*?\)/xfersize=(3k)/g' %s"
                           % (vdb_xml,))
                    commands.getstatusoutput(cmd)
                    # 修改range
                    cmd = ("sed -r -i 's/range=.*\)/range=(0,100M)/g' %s" % (vdb_xml,))
                    commands.getstatusoutput(cmd)
                    # 修改iorate
                    cmd = ("sed -r -i 's/iorate=[0-9]+/iorate=400/g' %s" % (vdb_xml,))
                    commands.getstatusoutput(cmd)

                    # 修改threads
                    cmd = ("sed -r -i 's/threads=[0-9]+/threads=8/g' %s" % (vdb_xml,))
                    commands.getstatusoutput(cmd)
                    # 修改maxdata
                    cmd = ('grep -c lun %s' % (vdb_xml,))
                    res, lun_num = commands.getstatusoutput(cmd)
                    maxdata = int(lun_num) * 5 + 4
                    cmd = ("sed -r -i 's/maxdata=[0-9]+[a-zA-Z]+,/maxdata=%sG,/g' %s" % (str(maxdata), vdb_xml))
                    commands.getstatusoutput(cmd)


    def run_vdb(self, client_ip, vdb_xml, jn_jro=None, output=None, time=1200, execute="Y"):
        """
        执行vdbench
        :param client_ip:主机端IP
        :param vdb_xml:
        :param jn_jro:
        :param output:
        :param time:   执行时间
        :param execute: 是否执行vdbench，N 为不执行，非N就会执行
        :return:
        """
        if execute == "N":
            log.info("Will not run  vdbench 。。。")
        else:
            if vdb_xml == None:
                log.error("Please input vdb xml.")
                os._exit(1)
            vdb_xml1 = "/home/vdbench/vdb_xml"
            vdb_path = get_config.get_vdbench_path()  # vdbench工具所在路径
            cmd = ("ssh %s 'mkdir -p /root/output/;mkdir -p /root/vdbench/journal/%s'" % (
                client_ip, str(output)))
            log.info(cmd)
            commands.getstatusoutput(cmd)
            if time != None:
                cmd1 = (
                    "ssh %s '%s/vdbench -f %s -jn -e %s -o /root/output/%s_jn'" % (
                        client_ip, vdb_path, vdb_xml1, str(time), str(output)))
                cmd2 = (
                    "ssh %s '%s/vdbench -f %s -jro -e %s -o /root/output/%s_jro'" % (
                        client_ip, vdb_path, vdb_xml1, str(time), str(output)))
            else:
                cmd1 = ("ssh %s '%s/vdbench -f %s -jn  -o /root/output/%s_jn'" % (
                    client_ip, vdb_path, vdb_xml1, str(output)))
                cmd2 = (
                    "ssh %s '%s/vdbench -f %s -jro -o /root/output/%s_jro'" % (
                        client_ip, vdb_path, vdb_xml1, str(output)))
            if None == jn_jro or jn_jro == "no":
                self.change_xml(vdb_xml=vdb_xml)
                cmd = ("scp %s root@%s:/home/vdbench/vdb_xml" % (vdb_xml, client_ip,))
                log.info(cmd)
                res, final = commands.getstatusoutput(cmd)
                if res != 0:
                    print final
                    os._exit(1)
                cmd = ("ssh %s '%s/vdbench -f %s -e %s -o /root/output/%s_nor'" % (
                    client_ip, vdb_path, vdb_xml1, str(time), str(output)))
                log.info(cmd)
                res, out = commands.getstatusoutput(cmd)
                if res != 0:
                    log.error("Error! Run vdbench without data check error.")
                    os._exit(1)
                else:
                    pass
            elif jn_jro == "jn":
                self.change_xml(jn_on="yes", vdb_xml=vdb_xml)
                ch_cmd = ("sed -r -i 's/,offset=[0-9]+//g' %s" % (vdb_xml))
                commands.getstatusoutput(ch_cmd)
                ch_cmd = ("sed -r -i 's/,align=[0-9]+//g' %s" % (vdb_xml))
                commands.getstatusoutput(ch_cmd)
                cmd = ("scp %s root@%s:/home/vdbench/vdb_xml" % (vdb_xml, client_ip,))
                log.info(cmd)
                res, final = commands.getstatusoutput(cmd)
                if res != 0:
                    print final
                    os._exit(1)
                log.info(cmd1)
                res, out = commands.getstatusoutput(cmd1)
                if res != 0:
                    log.error("Error! Run vdbench with 'jn' error.Vdbench log path is /root/output/%s." % (str(output)))
                    os._exit(1)
                else:
                    log.info("Vdbench jn log path is /root/output.")
            elif jn_jro == "jro":
                log.info(cmd2)
                res, out = commands.getstatusoutput(cmd2)
                if res != 0:
                    log.error(
                        "Error! Run vdbench with 'jro' error.Vdbench log path is /root/output/%s." % (str(output)))
                    os._exit(1)
                else:
                    log.info("Vdbench jro log path is /root/output.")
            else:
                ch_cmd = ("sed -r -i 's/,offset=[0-9]+//g' %s" % (vdb_xml))
                commands.getstatusoutput(ch_cmd)
                ch_cmd = ("sed -r -i 's/,align=[0-9]+//g' %s" % (vdb_xml))
                commands.getstatusoutput(ch_cmd)
                self.change_xml(jn_on="yes", vdb_xml=vdb_xml)
                cmd = ("scp %s root@%s:/home/vdbench/vdb_xml" % (vdb_xml, client_ip,))
                log.info(cmd)
                res, final = commands.getstatusoutput(cmd)
                if res != 0:
                    print final
                    os._exit(1)
                res, out = commands.getstatusoutput(cmd1)
                log.info(cmd1)
                if res != 0:
                    log.error(
                        "Error! Run vdbench with journal verify error.Vdbench log path is /root/output/%s." % (
                            str(output)))
                    os._exit(1)
                else:
                    log.info("Vdbench log path is /root/output.")
                    log.info(cmd2)
                    res, out = commands.getstatusoutput(cmd2)
                    if res != 0:
                        log.error("Error! Vdbench check data error,journal path is /root/vdbench/journal.")
                        os._exit(1)
                    else:
                        pass

    def auto_gen_vdb_xml(self, lun=None, thread=None):
        '''
        date    :   2018-05-22
        Description :   随机生成vdbench配置文件
        param   :  vdbench标准配置参数
        return  :   vdbench xml file path
        '''
        sd_num = 1
        wd_num = 1
        threads = []
        t1 = datetime.datetime.now()
        template_file = get_config.get_tools_path() + "/osan/auto_vdb" + str(t1.microsecond)  # 获取配置文件模板路径
        template = open(template_file, "w+")
        sd_default = "sd=default,journal=/root/vdbench/journal,openflags=o_direct\n"
        template.write(sd_default)
        # Write sd.
        for dev_name in lun:
            offset = random.randint(0, 9999)
            align = random.randint(0, 9999)
            offset = offset - (offset % 512)
            align = align - (align % 512)
            range_low = random.randint(0, 100)
            range_high = 3
            sd = ("sd=sd%d,lun=%s,offset=%d,align=%d,range=(%dM,%dG)\n" % (
                sd_num, dev_name, offset, align, range_low, range_high))
            sd_num = sd_num + 1
            template.write(sd)
        # Write wd.
        for dev_name in lun:
            # 读写比例
            rdpct = random.randint(0, 100)
            # 随机比例
            seekpct = random.randint(0, 100)
            # 读写块大小
            xfer1 = random.randint(1, 256)
            xfer2 = random.randint(1, 256)
            xfer3 = random.randint(1, 256)
            xfer4 = random.randint(1, 256)
            # 读写百分比
            seed = 100
            xfer_pcnt1 = random.randint(1, (seed / 2))
            xfer_pcnt2 = random.randint(1, (100 - xfer_pcnt1) / 2)
            xfer_pcnt3 = random.randint(1, (100 - xfer_pcnt2 - xfer_pcnt1) / 2)
            xfer_pcnt4 = 100 - xfer_pcnt1 - xfer_pcnt2 - xfer_pcnt3
            wd = ("wd=wd%d,sd=sd%d,xfersize=(%dk,%d,%dk,%d,%dk,%d,%dk,%d),rdpct=%d,seekpct=%d\n") % (wd_num, wd_num,
                                                                                                     xfer1, xfer_pcnt1,
                                                                                                     xfer2, xfer_pcnt2,
                                                                                                     xfer3, xfer_pcnt3,
                                                                                                     xfer4, xfer_pcnt4,
                                                                                                     rdpct, seekpct)
            wd_num = wd_num + 1
            template.write(wd)
        # 队列深度，默认为4
        # for dev_name in lun:
        if None == thread:
            threads = "3"
        else:
            threads = str(thread)
        rd = ("rd=run1,wd=wd*,iorate=300,elapsed=600,maxdata=500G,threads=%s,interval=1\n") % (
            re.sub("'| ", "", str(threads)))
        template.write(rd)
        template.close()
        return template_file

    def auto_gen_vdb_jn_xml(self, lun=None, thread=None, output=None):
        '''
        date    :   2018-05-22
        Description :   随机生成vdbench数据校验配置文件
        param   :  vdbench标准配置参数
        return  :   vdbench xml file path
        '''
        sd_num = 1
        wd_num = 1
        threads = []
        t1 = datetime.datetime.now()
        template_file = get_config.get_tools_path() + "/osan/auto_vdb" + str(t1.microsecond)  # 获取配置文件模板路径
        template = open(template_file, "w+")
        sd_default = "sd=default,journal=/root/vdbench/journal/%s,openflags=o_direct\n" % (str(output))
        template.write(sd_default)
        # Write sd.
        for dev_name in lun:
            # offset = random.randint(0,9999)
            # align = random.randint(0,9999)
            # offset = offset-(offset%512)
            # align = align-(align%512)
            # sd = ("sd=sd%d,lun=%s,offset=%d,align=%d\n" % (sd_num, dev_name,offset,align))
            range_low = random.randint(0, 100)
            # range_high = range_low+60
            range_high = 3
            sd = ("sd=sd%d,lun=%s,range=(%dM,%dG)\n" % (sd_num, dev_name, range_low, range_high))
            sd_num = sd_num + 1
            template.write(sd)
        # Write wd.
        for dev_name in lun:
            # 读写比例
            rdpct = random.randint(0, 100)
            # 随机比例
            seekpct = random.randint(0, 100)
            # 读写块大小
            seed = random.randint(1, 4)
            xfer1 = random.randint(1, 2)
            xfer2 = random.randint(1, 64)
            seed = random.randint(1, 4)
            xfer3 = xfer2 * seed
            seed = random.randint(1, 4)
            xfer4 = xfer2 * seed
            # 读写百分比
            seed = 100
            xfer_pcnt1 = random.randint(1, (seed / 2))
            xfer_pcnt2 = random.randint(1, (100 - xfer_pcnt1) / 2)
            xfer_pcnt3 = random.randint(1, (100 - xfer_pcnt2 - xfer_pcnt1) / 2)
            xfer_pcnt4 = 100 - xfer_pcnt1 - xfer_pcnt2 - xfer_pcnt3
            wd = ("wd=wd%d,sd=sd%d,xfersize=(%dk,%d,%dk,%d,%dk,%d,%dk,%d),rdpct=%d,seekpct=%d\n") % (wd_num, wd_num,
                                                                                                     xfer1, xfer_pcnt1,
                                                                                                     xfer2, xfer_pcnt2,
                                                                                                     xfer3, xfer_pcnt3,
                                                                                                     xfer4, xfer_pcnt4,
                                                                                                     rdpct, seekpct)
            wd_num = wd_num + 1
            template.write(wd)
        # 队列深度，默认为4
        #        for dev_name in lun:
        if None == thread:
            threads = "3"
        else:
            threads = str(thread)
        # threads = tuple(threads)
        #        threads = 4
        max_data = len(lun) * 3
        # rd = ("rd=run1,wd=wd*,iorate=max,elapsed=600h,maxdata=3,threads=%s,interval=1\n") %(re.sub("'| ","",str(threads)))
        rd = ("rd=run1,wd=wd*,iorate=300,elapsed=600h,maxdata=%dG,threads=(5),interval=1\n" % (max_data))
        template.write(rd)
        template.close()
        return template_file

    def vdb_write(self, sd=None, lun=None, wd=None, xfersize="4k", rdpct=0, seekpct=0, threads=4, align=None,
                  skew=None):
        write_file = get_config.get_tools_path() + "/osan/write_vdb"  # 获取配置文件模板路径
        if "default" == sd:
            w_file = open(write_file, "w+")
            sd_default = ("data_errors=3,misc=(fifo=1000)\nsd=default,journal=/root/vdbench/journal,openflags=o_direct\n")
            w_file.write(sd_default)
            rd = ("rd=run1,wd=wd*,iorate=200,elapsed=1600,maxdata=1G,interval=1\n")
            w_file.write(rd)
            w_file.close()
        elif None == lun or None == sd or None == wd:
            log.error("Got wrong parameter.")
            os._exit(1)
        else:
            w_file = open(write_file, "a+")
            if None == skew:
                sd_line = ("sd=%s,lun=%s,threads=%s\n" % (
                    sd, lun, str(threads)))
                wd_line = ("wd=%s,sd=%s,xfersize=%s,rdpct=%s,seekpct=%s\n" % (
                    wd, sd, str(xfersize), str(rdpct), str(seekpct)))
            else:
                sd_line = ("sd=%s,lun=%s,range=(0,100M),threads=%s\n" % (
                    sd, lun, str(threads)))
                wd_line = ("wd=%s,sd=%s,xfersize=%s,rdpct=%s,seekpct=%s,skew=%s\n" % (
                    wd, sd, str(xfersize), str(rdpct), str(seekpct), str(skew)))
            w_file.write(sd_line)
            w_file.write(wd_line)
            w_file.close()
        cmd = ("sort %s -o %s;s=`grep rd= %s `;sed -r -i 's/rd=.*//g' %s;sed -r -i '$a\\'$s %s " % (
            write_file, write_file, write_file, write_file, write_file))
        # cmd = ("s=`grep rd= %s `;sed -r -i '$a\\'$s %s ;sed -r -i 's/rd=.*//1' %s" % (write_file, write_file, write_file))
        log.info(cmd)
        res, output = commands.getstatusoutput(cmd)
        return write_file

    def save_vdb_log(self, c_ip=None, f_name=None, out=None):
        '''
        date    :   2018-06-14
        Description :   保存vdbench的日志
        param   :  c_ip : 客户端IP  f_name : 保存的目标文件名
        return  :   None
        '''
        if None == c_ip:
            log.error("Please check your IP you input.")
            os._exit(1)
        else:
            cmd = ('ssh %s "mkdir -p /root/vdb_summary/%s"' % (c_ip, str(out)))
            log.info(cmd)
            commands.getstatusoutput(cmd)
            cmd = ('ssh %s "mkdir -p /root/vdb_summary/%s/%s"' % (c_ip, str(out), f_name))
            log.info(cmd)
            commands.getstatusoutput(cmd)
            cmd = ("ssh %s 'mv /root/output/* /root/vdb_summary/%s/%s'" % (c_ip, str(out), f_name))
            log.info(cmd)
            res, output = commands.getstatusoutput(cmd)

    def vdb_check(self, c_ip=None, time=None, oper=None, output=None):
        '''
        date    :   2018-07-03
        Description :   检查vdbench的日志是否断流
        param   :   c_ip : 客户端IP  time : 断流时间  oper ：要检查的操作，支持iops和bw两种
        return  :   None
        '''
        if None == c_ip or None == output:
            log.error("Please check your IP you input or vdbench output directory.")
            os._exit(1)
        elif None == time:
            time = 60
        elif None == oper:
            oper = "iops"
        if oper == "iops":
            cmd = (
                "ssh %s \"sed -n \'/elapse/,\$p\' /root/output/%s/logfile.html  | grep -v -E 'var|delay|skip|^$|[a-z]' | awk '{print \$3}' | grep -v '^$' | sed ':a;N;s/\\n//g;ta' | grep '\(0.00\)\{%s\}'\"" % (
                    c_ip, output, str(time)))
        else:
            cmd = (
                "ssh %s \"sed -n \'/elapse/,\$p\' /root/output/%s/logfile.html  | grep -v -E 'var|delay|skip|^$|[a-z]' | awk '{print \$4}' | grep -v '^$' | sed ':a;N;s/\\n//g;ta' | grep '\(0.00\)\{%s\}'\"" % (
                    c_ip, output, str(time)))
        log.info(cmd)
        res, output = commands.getstatusoutput(cmd)
        if res == 0:
            log.error("WHOOL!!! I detcted vdbench disconnect exceed %s seconds on node %s." % (str(time), c_ip))
        # os._exit(1)
        else:
            log.info(
                "Vdbench execution completed successfully, and the disconnect time is not more than %s seconds no node %s ." % (
                    str(time), c_ip))

    ################################## pscli command ######################################
    def run_cmd(self, cmd, fault_node_ip=None):
        '''
        date    :   2018-07-05
        Description :   在xstor节点执行pscli命令
        param   :   cmd : 要执行的命令   fault_node_ip : 运行节点的IP
        return  :   None
        '''
        if (fault_node_ip != None):
            node_ips_list.remove(fault_node_ip)
        for node_ip in node_ips_list:
            # 判断节点是否可以ping通
            if False == ReliableTest.check_ping(node_ip):
                continue
            run_cmd = ('ssh %s "%s"' % (node_ip, cmd))
            print run_cmd
            rc, stdout = commands.getstatusoutput(run_cmd)
            if rc == 32512:
                continue
            if (rc != 0) and ('find master error' in stdout.splitlines()[-1]):
                num = 1
                logging.warn('%s return "find master error" %d times' % (run_cmd, num))
                while True:
                    time.sleep(20)
                    num += 1
                    rc, stdout = commands.getstatusoutput(run_cmd)
                    if (rc != 0) and ('find master error' in stdout.splitlines()[-1]):
                        logging.warn('%s return "find master error" %d times' % (cmd, num))
                    else:
                        break

    def get_node_by_vip(self, vip=None):
        '''
        date    :   2018-07-05
        Description :   通过vip获取管理IP
        parm    :   vip : 虚IP
        return  :   物理节点IP
        '''
        cmd = ("ssh %s \"ip a | grep 'inet ' | awk -F '/| ' '{print \$6}'\"" % (vip))
        rc, stdout = commands.getstatusoutput(cmd)
        for ip in stdout.split('\n'):
            if ip in node_ips_list:
                return ip

    def get_same_jnl_group(self, node_id):
        '''
        date    :   2018-07-05
        Description :   通过vip获取同组日志节点
        parm    :   vip : 虚IP
        return  :   同组日志节点ID
        '''
        # cmd = (
        #     "ssh %s \"/home/parastor/tools/nWatch -i %s -t oRole -c oRole#rolemgr_view_dump | grep -A 20 'grpview info' | grep node_id | grep 'node_stat: 0'| awk -F ' |,' '{print \$6}' | sort |uniq\"" % (
        #         node_ips_list[0], str(node_id)))
        # rc, stdout = commands.getstatusoutput(cmd)
        cmd = ("/home/parastor/tools/nWatch -i %s -t oRole -c oRole#rolemgr_view_dump | grep -A 20 'grpview info' | grep node_id | grep 'node_stat: 0'| awk -F ' |,' '{print \$6}' | sort |uniq"
            % (str(node_id)))
        log.info(cmd)
        rc, stdout = self.run_pscli_cmd(pscli_cmd=cmd)
        gids = stdout.split('\n')
        if 0 in gids:
            gids.remove(0)
        return gids

    def run_pscli_cmd(self, pscli_cmd=None, time_out=120, s_ip=None, times=5):
        '''
        :Author:Diws
        :param cmd:
        :return:
        '''
        if pscli_cmd == None:
            log.error("Sorry, please input a command to run.")
            os._exit(1)
        if s_ip != None and (True is ReliableTest.check_ping(s_ip)):
            ssh_cmd = ("timeout %d ssh root@" % (time_out))
            cmd = ("%s%s \"%s\"" % (ssh_cmd, s_ip, pscli_cmd))
            log.info(cmd)
            for i in range(times):
                res, output = commands.getstatusoutput(cmd)
                if res == 0:
                    return res, output
                else:
                    log.error("node %s Try sending %s commands and wait %s at a time" % (s_ip, times, time_out))
        else:
            ssh_cmd = ("timeout %d ssh root@" % (time_out,))
            for d_ip in deploy_ips:
                if False is ReliableTest.check_ping(d_ip):
                    continue
                else:
                    cmd = ("%s%s \"%s\"" % (ssh_cmd, d_ip, pscli_cmd))
                    for i in range(times):
                        res, output = commands.getstatusoutput(cmd)
                        if res == 0:
                            return res, output
                        log.error("node %s Try sending %s commands and wait %s at a time" % (d_ip, times, time_out))
        return res, output

if __name__ == '__main__':
    oSan().change_xml(deploy_ips[0])
