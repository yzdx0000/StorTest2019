#-*- coding:utf-8 -*
#此脚本就是将stability1lib也就是s3的命令集测试num遍
#本脚本和allOperations.py不同的是没有创建账户和certificateid，采用的是已有的，也没有acl相关操作
#用例名称：allOperations1
#用例作用：将桶和对象的所有操作结合起来
#参数解释：mgrip，账户名称，oossip，想要创建的10个桶的名称前缀，想要创建的对象的名称前缀，需要上传的对象的path(包括文件名称),下载对象的目标path（不包括文件名称，只是目录名）
#分段上传成功后的Object名字（splitobjectname），被分段上传的Object的路径（splitobjectpathdir），被分段上传的文件名称（（surobjectname），分段上传的段的数目（numofsplit）
#取消分段上传时上传的Object名字（cancleupobjectname）,桶配额大小（必须小于上传的文件putObjectname的大小）
#用该脚本的额注意事项：改脚本不能在主mgr或者从mgr宕机的时候用
import os,sys,commands,time
#import imports3libpath
import _create_bucket
import common
import _putobjectBySplit_lyz
import _cancleputobjectBySplit_lyz
import _set_bucket_quota_lyz
import _get_bucket_quota_lyz
import _create_many_accounts_lib_lyz
import _sshlistaccounts_lyz1
import _create_certificate
import _delete_certificate
import _set_bucketacl_lyz
import _set_objectacl_lyz
import _getAllObjectsOfBucket_lyz
import _downloadObjectandPrint_lyz
import _query_bucketacl_lyz
import _query_objectacl_lyz
import deletemanyaccount
import _delete_account_lyz
def allOPerations(num,mgrip,accountname,oossip,createBucketname,putObjectname,objectpath,downobjectpath,splitobjectname,splitobjectpathdir,splitfilename,numofsplit,cancleupobjectname,quota):
    for i in range(num):
        #步骤1：创建两个账户
        print 'time o is %s' % (time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(time.time())))
        allaccountnameall = _create_many_accounts_lib_lyz.createManyAccount(mgrip, accountname, accountname, 2)
        if allaccountnameall==-1:
            return -1
        print 'allaccountnameall is %s' % allaccountnameall
        dicts = _sshlistaccounts_lyz1.sshlistaccounts(mgrip)
        if dicts==-1:
            return -1
        accountdicts = {}
        for name in allaccountnameall:
            accountinfo = dicts[name]
            accountdict = {name: accountinfo}
            accountdicts.update(accountdict)
        print '**************所有的生成好的账户信息是：%s*************************' % accountdicts
        #步骤2：给上文中创建的账户每个账户给一个certificateid
        accountnames=[]
        accountids=[]
        certificateids=[]
        for key in accountdicts.keys():
            accountnames.append(key)
            accountid=accountdicts[key][0]
            accountids.append(accountid)
            certificateid=_create_certificate.cer_add(mgrip,accountid)
            if certificateid==-1:
                return -1
            certificateids.append(certificateid)
        certificateid=certificateids[0]
        print 'srcaccountname is %s' %accountnames[0]
        print 'certificateid of srcaccountname is %s' %certificateid

        '''
        #步骤一、根据需要的accountname找到对应的accountid
        accountids=common.sshlistaccounts(mgrip)
        for i in range(len(accountids)):
            if accountids[i].keys()[0]==accountname:
                accountid=accountids[i][accountname][0]
    
        #步骤二：根据accountid获取certificateid,获取所有id中的第一个
        certificateid=[]
        certificateid=common.sshListcertificatesHaveReturn(mgrip,accountid)[0]
        print certificateid
        '''
        #步骤3：获取桶的列表
        Allbukets=[]
        #print oossip,certificateid
        Allbukets=common.getAllBucketOfCertificateid(oossip,certificateid)
        if Allbukets==-1:
            return -1
        print 'Allbukets is %s' % Allbukets
        print  '************获取桶的列表成功***********'
        print ''
        #步骤4：创建2个后续步骤需要的桶
        print 'time o is %s' % (time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(time.time())))
        rec1=_create_bucket.bucket_add(oossip, createBucketname, certificateid)
        if rec1==-1:
            return -1
        print '************%s 后续步骤需要的桶1创建成功************' %createBucketname
        print 'time o is %s' % (time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(time.time())))
        bucketname2=createBucketname+'copy'
        rec2=_create_bucket.bucket_add(oossip, bucketname2, certificateid)
        if rec2==-1:
            return -1
        print '************%s 后续步骤需要的桶2创建成功************' %bucketname2
        print 'time o is %s' % (time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(time.time())))
        #步骤5：创建10个桶
        for num in range(10):
            bucketname=createBucketname+str(num)
            print 'bucketname is %s' %(bucketname)
            rec3=_create_bucket.bucket_add(oossip,bucketname,certificateid)
            if rec3 == -1:
                return -1
            print '创建桶 %s 成功' %bucketname
        print '************创建10个桶成功*****************8'
        #步骤6：再次获取桶列表，查看是否新创建的桶已经创建成功
        Allbukets = common.getAllBucketOfCertificateid(oossip, certificateid)
        if Allbukets==-1:
            return -1
        print '创建完十个桶后的桶列表：'
        print Allbukets
        for num in range(10):
            bucketname = createBucketname + str(num)
            if bucketname not in Allbukets:
                print 'error#################################################'
                print 'the bucket created ok not exists'
                return -1
            print '创建桶后获取桶列表成功,存在桶 %s' %bucketname
        print '*****************创建的10个桶成功出现在桶列表中***************'
        #步骤7：删除10个新创建的桶
        for num in range(10):
            bucketname = createBucketname + str(num)
            rec=common.delete_bucket(oossip,bucketname,certificateid)
            if rec==-1:
                return -1
            print '删除桶%s 成功' %bucketname
        print '*************删除10个桶成功*********************'
        #步骤8：删除桶后，查看桶列表，判断是否删除成功
        Allbukets = common.getAllBucketOfCertificateid(oossip, certificateid)
        if Allbukets==-1:
            return -1
        for num in range(10):
            bucketname = createBucketname + str(num)
            if bucketname in Allbukets:
                print 'error#################################################'
                print 'the bucket deleted ok already exists'
                return -1
            print '删除桶 %s后查询列表成功' %bucketname
        print '**********删除桶后桶列表准确************************'
        #步骤9：获取每一个桶中的所有object列表
        for i in range(len(Allbukets)):
            bucketname=Allbukets[i]
            objects=common.getAllObjectOfBucket(oossip,bucketname,certificateid)
            if objects==-1:
                return -1
            print 'objects of %s is %s' % (bucketname,objects)
        print '*****************查询桶内所有对象成功**********************'

        #步骤10：上传对象,将同一对象上传10次
        for i in range(10):
            putObjectnamenum10=putObjectname+str(i)
            rea=common.add_object(oossip,createBucketname,putObjectnamenum10,objectpath,certificateid)
            if rea==-1:
                return -1
            print '上传对象%s 成功' %putObjectnamenum10
        print '**********上传对象10次成功*********************'

        #再次获取该桶中的Object列表证明该对象已经上传成功
        objectsofadd= common.getAllObjectOfBucket(oossip, createBucketname, certificateid)
        if objectsofadd==-1:
            return -1
        for i in range(10):
            putObjectnamenum10=putObjectname+str(i)
            if putObjectnamenum10 not in objectsofadd:
                print 'error##########################################'
                print '对象 %s 上传到桶%s 中成功了，但是却不在该桶的对象列表中' %(putObjectnamenum10,createBucketname)
            else:
                print '添加的对象成功出现在对象列表中'
        #步骤11：下载上传的10个对象
        for i in range(10):
            putObjectnamenum10 = putObjectname + str(i)
            downobjectpathall=os.path.join(downobjectpath,putObjectnamenum10+'down')
            rec=common.downloadObject(oossip,createBucketname,putObjectnamenum10,downobjectpathall,certificateid)
            if rec==-1:
                return -1
            print '下载对象 %s 到 %s 成功' %(putObjectnamenum10,downobjectpathall)
        print '**********下载10个对象成功*********************'
        #步骤12：对象的MD5值检测
        for i in range(10):
            putObjectnamenum10 = putObjectname + str(i)
            downobjectpathall = os.path.join(downobjectpath, putObjectnamenum10 + 'down')
            rec2=common.checkmd5sum(objectpath,downobjectpathall)
            if rec2==-1:
                return -1
        print '**********md5值检测成功********************'
        #步骤13：复制这10个对象到其他桶中
        for i in range(10):
            putObjectnamenum10 = putObjectname + str(i)
            rec3=common.copyObject(oossip,bucketname2,putObjectnamenum10+'copy',certificateid,createBucketname,putObjectnamenum10)
            if rec3==-1:
                return -1
            print '复制桶 %s 的对象 %s 到 桶%s，名为%s成功'  %(createBucketname,putObjectnamenum10,bucketname2,putObjectnamenum10+'copy')
        print '***************复制桶10次成功**********************'
        # 再次获取该复制的中的Object列表证明该对象已经复制成功
        objectsofadd2 = common.getAllObjectOfBucket(oossip, bucketname2, certificateid)
        if objectsofadd2==-1:
            return -1
        for i in range(10):
            putObjectnamenum10 = putObjectname + str(i)
            if putObjectnamenum10+'copy' not in objectsofadd2:
                print 'error##########################################'
                print '对象 %s 上传到桶%s 中成功了，但是却不在该桶的对象列表中' % (putObjectnamenum10+'copy', bucketname2)
            else:
                print '添加的对象成功出现在对象列表中'
        #步骤14：下载10个复制的对象
        for i in range(10):
            putObjectnamenum10 = putObjectname + str(i)
            downobjectpathall2 = os.path.join(downobjectpath, putObjectnamenum10+'copydown')
            re4=common.downloadObject(oossip, bucketname2, putObjectnamenum10+'copy', downobjectpathall2, certificateid)
            if re4==-1:
                return -1
            print '下载对象 %s 到 %s 成功' % (putObjectnamenum10+'copydown', downobjectpathall2)
        print '**********下载10个复制的对象成功*********************'
        #步骤15：复制后的对象下载后MD5值检测
        for i in range(10):
            putObjectnamenum10 = putObjectname + str(i)
            downobjectpathall2 = os.path.join(downobjectpath, putObjectnamenum10 + 'copydown')
            re5=common.checkmd5sum(objectpath, downobjectpathall2)
            if re5==-1:
                return -1
        print "************复制后的对象检测md5值成功*****************"
        #步骤16：多段上传object
        #(oossip, bucketname, objectname, certificateid, surobjectpathdir, surobjectname, num)
        rep=_putobjectBySplit_lyz.upObjectBySplit(oossip,createBucketname,splitobjectname,certificateid,splitobjectpathdir,splitfilename,numofsplit)
        if rep==-1:
            return -1
        print '************多段上传成功*************'
        # 再次获取该桶中的Object列表证明该分段上传的对象已经上传成功
        objectsofadd3 = common.getAllObjectOfBucket(oossip, createBucketname, certificateid)
        if objectsofadd3== -1:
            return -1
        if splitobjectname not in objectsofadd3:
            print 'error##########################################'
            print '对象 %s 上传到桶%s 中成功了，但是却不在该桶的对象列表中' % (putObjectname + 'copy', bucketname2)
        else:
            print '添加的对象成功出现在对象列表中'
        #步骤17：下载多段上传的object
        downobjectpathallsplit=os.path.join(downobjectpath,splitfilename+'down')
        re6=common.downloadObject(oossip, createBucketname, splitobjectname, downobjectpathallsplit, certificateid)
        if re6== -1:
            return -1
        print '************多段上传对象下载成功*********'
        #步骤18：多段上传和下载后的文件进行md5值检测
        splitsourceallpath=os.path.join(splitobjectpathdir,splitfilename)
        print 'splitsourceallpath is %s' %splitsourceallpath
        re7=common.checkmd5sum(splitsourceallpath, downobjectpathallsplit)
        if re7== -1:
            return -1
        print '**********多段上传对象MD5值检测成功**********'
        #步骤19：取消多段上传
        rec=_cancleputobjectBySplit_lyz.cancleupObjectBySplit(oossip,createBucketname,cancleupobjectname,certificateid,splitobjectpathdir,splitfilename,numofsplit)
        if rec==-1:
            return -1
        #步骤20：设置桶的配额
        quota=int(quota)
        res1=_set_bucket_quota_lyz.set_bucket_quota_exc(oossip,createBucketname,certificateid,quota)
        if res1==-1:
            return -1
        print "************设置桶个配额成功"
        #步骤21：获得桶的配额
        getquota=_get_bucket_quota_lyz.get_bucket_quota_exc(oossip,createBucketname,certificateid)
        if getquota==-1:
            return -1
        if int(getquota)!=quota:
            print "error##################################################3"
            print "***********获得的桶配额和设置的桶配额不符合************"
            return -1
        else:
            print "***********获取桶配额成功*************"

        #步骤22：上传一个大于该配额的文件
        cmdquota = 'curl -s -i http://' + oossip + ':20480/' + createBucketname + '/' + putObjectname+'quota' + ' -X PUT -T "' + objectpath + '" -H "Expect: " -H "Authorization: AWS4-HMAC-SHA256 Credential=' + certificateid + '"'
        print cmdquota
        (return_codequota, outputquota) = commands.getstatusoutput(cmdquota)
        print outputquota
        if outputquota.find('Insufficient Storage Space')>=0:
            print '************配额成功拦截文件***************'
        else:
            print "error########################################"
            print "配额没有成功拦截上传的文件，没有报错Insufficient storage space"
            return -1
        #步骤23：取消桶配额
        res2=_set_bucket_quota_lyz.set_bucket_quota_exc(oossip, createBucketname, certificateid, 0)
        if rec2==-1:
            return -1
        print "************取消桶配额成功***************"
        #步骤24：取消桶配额后再次上传文件
        re8=common.add_object(oossip, createBucketname, putObjectname+'quota1', objectpath, certificateid)
        if re8== -1:
            return -1
        print "***********取消桶的配额后上传文件成功********************"
        #步骤25：设置桶的acl
        print  '************开始设置桶改的acl*****************'
        print '源端和对象端的账户信息是 %s' %accountdicts
        accountuidsrc=accountdicts[accountnames[0]][1]
        accountemailsrc=accountdicts[accountnames[0]][2]
        accountuiddst=accountdicts[accountnames[1]][1]
        accountemaildst=accountdicts[accountnames[1]][2]
        print 'accountuidsrc is %s,accountemailsrcis %s,accountuiddst is %s,accountemaildst is %s' %(accountuidsrc,accountemailsrc,accountuiddst,accountemaildst)
        res=_set_bucketacl_lyz.setBucketAcl(oossip,createBucketname,certificateids[0],accountdicts[accountnames[0]][1],accountdicts[accountnames[0]][2],accountdicts[accountnames[1]][1],accountdicts[accountnames[1]][2],'FULL_CONTROL')
        if res==-1:
            return -1
        print '*************************桶的acl设置成功**************************'
        #步骤26：验证桶的acl获取成功
        reg=_getAllObjectsOfBucket_lyz.getAllObjectOfBucket(oossip,createBucketname,certificateids[1])
        if reg==-1:
            return -1
        print '************用被赋予的account的acl的certificate获取Bucket的acl'
        req=_query_bucketacl_lyz.querybucketAcl(oossip,createBucketname,certificateids[1])
        if req==-1:
            return -1
        print '*******************桶的acl验证成功*******************'
        #步骤27：设置对象的acl
        res2=_set_objectacl_lyz.setobjectacl(oossip,createBucketname,putObjectname+str(0),certificateids[0],accountdicts[accountnames[0]][1],accountdicts[accountnames[0]][2],accountdicts[accountnames[1]][1],accountdicts[accountnames[1]][2],['FULL_CONTROL'])
        if res2==-1:
            return -1
        print '************************对象的acl赋予成功*******************************************'
        #_downloadObjectandPrint_lyz.downloadObject(oossip,createBucketname,putObjectname+str(0),certificateids[1])
        #print '******************用被赋予的account的certificateid打印对象内容成功******************************'
        reqo=_query_objectacl_lyz.queryObjectAcl(oossip,createBucketname,putObjectname+str(0),certificateids[1])
        if reqo==-1:
            return -1
        print '*****************对象的acl获取成功*******************************'
        #步骤28：删除创建的两个桶中的所有对象并删除桶
        objectscreateBuckets = common.getAllObjectOfBucket(oossip, createBucketname, certificateid)
        if objectscreateBuckets== -1:
            return -1
        for obj in objectscreateBuckets:
            re9=common.deleteObject(oossip, createBucketname, obj, certificateid)
            if re9 == -1:
                return -1
        objectscreateBucketscopy = common.getAllObjectOfBucket(oossip, createBucketname+'copy', certificateid)
        if objectscreateBucketscopy == -1:
            return -1
        for obj2 in objectscreateBucketscopy:
            ree1=common.deleteObject(oossip, createBucketname+'copy', obj2, certificateid)
            if ree1 == -1:
                return -1
        print '删除桶%s 和桶%s中的所有对象成功' %(createBucketname,createBucketname+'copy')
        ree2=common.delete_bucket(oossip,createBucketname,certificateid)
        if ree2 == -1:
            return -1
        ree3=common.delete_bucket(oossip, createBucketname+'copy', certificateid)
        if ree3 == -1:
            return -1
        print '***************删除桶%s和桶%s成功***********'  %(createBucketname,createBucketname+'copy')
        #步骤29：删除下载的对象
        for i in range(10):
            putObjectnamenum10 = putObjectname + str(i)
            downobjectpathall = os.path.join(downobjectpath, putObjectnamenum10 + 'down')
            downobjectpathall2 = os.path.join(downobjectpath, putObjectnamenum10 + 'copydown')
            os.popen('rm -rf '+downobjectpathall )
            os.popen('rm -rf '+downobjectpathall2)
        print '*******删除下载的对象成功****************'

        #步骤30：删除创建的两个账户下的certificate,然后删除两个账户
        for certificate in certificateids:
            rcd=_delete_certificate.deleteCertificate(mgrip,certificate)
            if rcd==-1:
                return -1
        for accountid in accountids:
            red=_delete_account_lyz.acc_del(mgrip,accountid)
            if red==-1:
                return -1
        print 'time o is %s' % (time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(time.time())))


        '''
        # 步骤30：删除account
        deletemanyaccount.deletemanyaccount(allaccountnameall,mgrip)
        print '*******************创建的账户删除成功************************'
        print '**************************all is over***********************************'
        '''



        #certificateid=common.sshListcertificatesHaveReturn(mgrip,accountid)
        #print accountid
        #print certificateid
if __name__=="__main__":
    #(mgrip, accountname, oossip, createBucketname, putObjectname, objectpath, downobjectpath, splitobjectname,
    #splitobjectpathdir, splitfilename, num)
    #(mgrip, accountname, oossip, createBucketname, putObjectname, objectpath, downobjectpath, splitobjectname,splitobjectpathdir, splitfilename, numofsplit, cancleupobjectname, quota):
    allOPerations(100,'100.100.100.16','lyztesta','100.100.100.18','lyztestabuc','lyztestaobj','/opt/s3uploadfile/10Mfile','/opt/s3uploadfile/down','objectsplitd','/opt/s3uploadfile','test',2,'objectsplitcancled',1024)
    #_putobjectBySplit_lyz.upObjectBySplit('10.2.40.18', 'aaaa10271', 'objectsplit0', '000024P00B8AVJNI00001XAXLTGX5XFN', '/opt/s3uploadfile','test',2)
