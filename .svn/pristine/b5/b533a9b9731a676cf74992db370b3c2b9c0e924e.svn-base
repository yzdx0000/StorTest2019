# -*- coding:utf-8 -*-
# Author:Liu he
# Date  :2018-8-9

'''
测试内容:SVIP和VIP在同一节点上能被扫描LUN
测试步骤：
1、配置节点池含5节点，设置副本数为3
2、创建存储池，使用全部磁盘
3、创建一个访问区，包含3个节点
4、给访问区添加1个IP地址池，至少包含4个IP
5、启动iSCSI，创建一条LUN和对应的映射
6、主机下发业务中，添加节点池1个节点到访问区时，oJNL主节点掉电
检查项：
6、节点添加到访问区成功，该节点成为日志服务节点；业务正常，故障节点VIP切换到新添加节点

'''

import os
import time
import random
import xml
import commands
import threading
import utils_path
import log
import common
import ReliableTest
import prepare_x1000
import env_manage
import access_env
import decorator_func
from get_config import config_parser as cp

'''初始化'''
file_name = os.path.basename(__file__)
file_name = file_name[:-3]  # 获取本脚本名，去掉.py后缀
log_file_path = log.get_log_path(file_name)  # 获取日志目录，即test_cases/Log/Case_log


def setup():
    '''获取业务节点IP和非业务节点IP'''
    global node_ip1
    global node_ip2
    global client_ip1
    node_ip1 = env_manage.deploy_ips[0]  # 业务节点IP
    node_ip2 = env_manage.deploy_ips[1]  # 非业务节点IP
    client_ip1 = env_manage.client_ips[0]


def get_svip():
    lun_xml = os.getcwd() + '/test_config.xml'
    svip2 = xml.dom.minidom.parse(lun_xml)
    svip2_info = svip2.getElementsByTagName('svips')[0]
    svips_infos = svip2_info.getElementsByTagName('svip')
    svips_list = []
    for svip in svips_infos:
        ip = svip.getElementsByTagName('ip')[0].firstChild.nodeValue
        svips_list.append(ip)
    return svips_list


def get_vip():
    lun_xml = os.getcwd() + '/test_config.xml'
    svip2 = xml.dom.minidom.parse(lun_xml)
    svip2_info = svip2.getElementsByTagName('vips')[0]
    svips_infos = svip2_info.getElementsByTagName('vip')
    vips_list = []
    for svip in svips_infos:
        ip = svip.getElementsByTagName('ip')[0].firstChild.nodeValue
        vips_list.append(ip)
    return vips_list


def pro_test():
    orole_master_ip = env_manage.com_lh.get_master_oRole(s_ip=node_ip1)
    env_manage.com_lh.kill_thread(s_ip=orole_master_ip, p_name="oRole", t_name="pmgr")
    log.info("kill opmgr finished")
    return


def create_iscsi_login(ips=node_ip1, cli_ips=client_ip1, svip=None):
    env_manage.osan.discover_scsi_list(client_ip=cli_ips, svip=svip[0])  # 进行一下discovery，真正的tag从xstor中拿
    target_list = env_manage.osan.get_map_target(ips)
    log.info("Get Info:\nSvip list:%s \nTarget list:%s" % (svip, target_list))
    for tag in target_list:
        log.info("主机发现存储target：%s,主机 %s 将进行SCSI登录" % (tag, cli_ips))
        env_manage.osan.iscsi_login(client_ip=cli_ips, iqn=tag)


def vdb_test():
    lun_name = env_manage.osan.ls_scsi_dev(client_ip=client_ip1)
    vdb_file = env_manage.osan.gen_vdb_xml(lun=lun_name, xfersize="4k", rdpct="50")
    log.info("vdbench 进行读写业务")
    env_manage.com2_osan.run_vdb(client_ip=client_ip1, vdb_xml=vdb_file, output=node_ip1, jn_jro="jn", time=600)


def update_access():
    """
    :description: 节点4为新节点
    :return:
    """
    env_manage.update_access(node_ip1, id_list="1,2,3,4")


def check_node_vip():
    node_list = []
    vips = env_manage.com2_osan.analysis_vip(env_manage.vips)
    for vip in vips:
        mgr_ip = env_manage.com2_osan.get_node_by_vip(vip)
        node_list.append(mgr_ip)
    if env_manage.deploy_ips[3] in node_list:
        log.info("new node have vip")
        return
    else:
        log.error("new node have not vip")
        os._exit(1)


def os_down_osan(access_id):
    time.sleep(30)
    threads = []
    threads.append(threading.Thread(target=update_access))
    threads.append(threading.Thread(target=pro_test))
    for t in threads:
        t.start()
    for t in threads:
        t.join()


def case():
    svip1 = get_svip()[0]
    vip1 = get_vip()[0]
    log.info("step:1.创建访问区")
    az_id1 = env_manage.create_access(ips=node_ip1, node_ids="1,2,3", access_name="accesszone1")
    log.info("step:2.启动scsi")
    env_manage.enable_san()
    sub_id1 = env_manage.create_subnet(s_ip=node_ip1, svip=svip1, a_z_id=az_id1, access_name="sub1")
    env_manage.create_vip(s_ip=node_ip1, subnet_id=sub_id1, vip_name="vip1", vip_pool=vip1)
    env_manage.create_host_group()
    env_manage.create_host()
    env_manage.create_add_initiator()
    env_manage.create_lun(ips=node_ip1, name="LUN1", access_id=az_id1)
    create_iscsi_login(ips=node_ip1, cli_ips=client_ip1, svip=svip1)
    log.info("step:3.停止scsi过程中，主oPmgr节点掉电")
    threads = []
    threads.append(threading.Thread(target=vdb_test))
    threads.append(threading.Thread(target=os_down_osan, args=(az_id1,)))
    for t in threads:
        t.start()
    for t in threads:
        t.join()
    log.info("step:4.检查VIP是否漂移到新节点")
    check_node_vip()
    log.info("step:5.检查节点运行状态，检查服务恢复情况。")
    env_manage.com_lh.get_os_status(node_ip2)
    env_manage.com_lh.multi_check_part_lun_uniform_by_ip()  # 比较数据一致性


def main():
    access_env.check_env()
    setup()
    case()
    log.info("step:6.检查清理测试环境")
    env_manage.clean_access_zone(node_ip1)
    log.info("The case finished!!!")


if __name__ == '__main__':
    env_manage.rel_check_before_run(file_name, jnl_rep=3, free_jnl_num=0, node_num=3)
    common.case_main(main)
